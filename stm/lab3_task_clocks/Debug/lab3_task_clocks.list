
lab3_task_clocks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000974c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080098e4  080098e4  0000a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009900  08009900  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009900  08009900  0000a900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009908  08009908  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009908  08009908  0000a908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800990c  0800990c  0000a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009910  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  2000007c  0800998c  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  0800998c  0000bb28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019221  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e0e  00000000  00000000  000242cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  000280e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001190  00000000  00000000  00029798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001991f  00000000  00000000  0002a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c375  00000000  00000000  00044247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000972ec  00000000  00000000  000605bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f78a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e0  00000000  00000000  000f78ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000fdccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080098cc 	.word	0x080098cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	080098cc 	.word	0x080098cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fd84 	bl	8001014 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f834 	bl	8000578 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000510:	f000 f89a 	bl	8000648 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fa12 	bl	800093c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000518:	f000 f8b6 	bl	8000688 <MX_I2C1_Init>
  MX_I2S2_Init();
 800051c:	f000 f8e2 	bl	80006e4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000520:	f000 f90e 	bl	8000740 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000524:	f000 f93c 	bl	80007a0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000528:	f008 fd8c 	bl	8009044 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 800052c:	f000 f96e 	bl	800080c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000530:	2100      	movs	r1, #0
 8000532:	480f      	ldr	r0, [pc, #60]	@ (8000570 <main+0x6c>)
 8000534:	f004 feb0 	bl	8005298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000538:	2104      	movs	r1, #4
 800053a:	480d      	ldr	r0, [pc, #52]	@ (8000570 <main+0x6c>)
 800053c:	f004 feac 	bl	8005298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000540:	2108      	movs	r1, #8
 8000542:	480b      	ldr	r0, [pc, #44]	@ (8000570 <main+0x6c>)
 8000544:	f004 fea8 	bl	8005298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000548:	210c      	movs	r1, #12
 800054a:	4809      	ldr	r0, [pc, #36]	@ (8000570 <main+0x6c>)
 800054c:	f004 fea4 	bl	8005298 <HAL_TIM_PWM_Start>

  TIM4->CCR1=57;
 8000550:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <main+0x70>)
 8000552:	2239      	movs	r2, #57	@ 0x39
 8000554:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM4->CCR2=10;
 8000556:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <main+0x70>)
 8000558:	220a      	movs	r2, #10
 800055a:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM4->CCR3=65;
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <main+0x70>)
 800055e:	2241      	movs	r2, #65	@ 0x41
 8000560:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM4->CCR4=50;
 8000562:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <main+0x70>)
 8000564:	2232      	movs	r2, #50	@ 0x32
 8000566:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000568:	f008 fd92 	bl	8009090 <MX_USB_HOST_Process>
 800056c:	e7fc      	b.n	8000568 <main+0x64>
 800056e:	bf00      	nop
 8000570:	200001d4 	.word	0x200001d4
 8000574:	40000800 	.word	0x40000800

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f009 f912 	bl	80097b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <SystemClock_Config+0xc8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a26      	ldr	r2, [pc, #152]	@ (8000640 <SystemClock_Config+0xc8>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <SystemClock_Config+0xc8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b21      	ldr	r3, [pc, #132]	@ (8000644 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a20      	ldr	r2, [pc, #128]	@ (8000644 <SystemClock_Config+0xcc>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000644 <SystemClock_Config+0xcc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e8:	2310      	movs	r3, #16
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ec:	23c0      	movs	r3, #192	@ 0xc0
 80005ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 ff43 	bl	8004488 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 fa70 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 f9a6 	bl	8004978 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000632:	f000 fa5b 	bl	8000aec <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	@ 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800064e:	463b      	mov	r3, r7
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800065e:	2301      	movs	r3, #1
 8000660:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000662:	23c0      	movs	r3, #192	@ 0xc0
 8000664:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000666:	2310      	movs	r3, #16
 8000668:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800066a:	2302      	movs	r3, #2
 800066c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4618      	mov	r0, r3
 8000672:	f004 fb8d 	bl	8004d90 <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800067c:	f000 fa36 	bl	8000aec <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	@ (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f003 f8fb 	bl	80038c0 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 fa0c 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000098 	.word	0x20000098
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_I2S2_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	@ (8000738 <MX_I2S2_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_I2S2_Init+0x50>)
 80006f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_I2S2_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <MX_I2S2_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_I2S2_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <MX_I2S2_Init+0x50>)
 800070a:	4a0c      	ldr	r2, [pc, #48]	@ (800073c <MX_I2S2_Init+0x58>)
 800070c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_I2S2_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <MX_I2S2_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_I2S2_Init+0x50>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_I2S2_Init+0x50>)
 8000722:	f003 fa11 	bl	8003b48 <HAL_I2S_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 f9de 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000ec 	.word	0x200000ec
 8000738:	40003800 	.word	0x40003800
 800073c:	00017700 	.word	0x00017700

08000740 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_I2S3_Init+0x54>)
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_I2S3_Init+0x58>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2S3_Init+0x54>)
 800074c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000750:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_I2S3_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_I2S3_Init+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_I2S3_Init+0x54>)
 8000760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000764:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_I2S3_Init+0x54>)
 8000768:	4a0c      	ldr	r2, [pc, #48]	@ (800079c <MX_I2S3_Init+0x5c>)
 800076a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_I2S3_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_I2S3_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_I2S3_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2S3_Init+0x54>)
 8000780:	f003 f9e2 	bl	8003b48 <HAL_I2S_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800078a:	f000 f9af 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000134 	.word	0x20000134
 8000798:	40003c00 	.word	0x40003c00
 800079c:	00017700 	.word	0x00017700

080007a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007f2:	f004 fc1f 	bl	8005034 <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 f976 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000017c 	.word	0x2000017c
 8000808:	40013000 	.word	0x40013000

0800080c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	@ 0x38
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800083c:	4b3d      	ldr	r3, [pc, #244]	@ (8000934 <MX_TIM4_Init+0x128>)
 800083e:	4a3e      	ldr	r2, [pc, #248]	@ (8000938 <MX_TIM4_Init+0x12c>)
 8000840:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000;
 8000842:	4b3c      	ldr	r3, [pc, #240]	@ (8000934 <MX_TIM4_Init+0x128>)
 8000844:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000848:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800084a:	4b3a      	ldr	r3, [pc, #232]	@ (8000934 <MX_TIM4_Init+0x128>)
 800084c:	2210      	movs	r2, #16
 800084e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8000850:	4b38      	ldr	r3, [pc, #224]	@ (8000934 <MX_TIM4_Init+0x128>)
 8000852:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000856:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b36      	ldr	r3, [pc, #216]	@ (8000934 <MX_TIM4_Init+0x128>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b35      	ldr	r3, [pc, #212]	@ (8000934 <MX_TIM4_Init+0x128>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000864:	4833      	ldr	r0, [pc, #204]	@ (8000934 <MX_TIM4_Init+0x128>)
 8000866:	f004 fc6e 	bl	8005146 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000870:	f000 f93c 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800087a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800087e:	4619      	mov	r1, r3
 8000880:	482c      	ldr	r0, [pc, #176]	@ (8000934 <MX_TIM4_Init+0x128>)
 8000882:	f004 fe7b 	bl	800557c <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800088c:	f000 f92e 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000890:	4828      	ldr	r0, [pc, #160]	@ (8000934 <MX_TIM4_Init+0x128>)
 8000892:	f004 fca7 	bl	80051e4 <HAL_TIM_PWM_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800089c:	f000 f926 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4619      	mov	r1, r3
 80008ae:	4821      	ldr	r0, [pc, #132]	@ (8000934 <MX_TIM4_Init+0x128>)
 80008b0:	f005 f9fe 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80008ba:	f000 f917 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008be:	2360      	movs	r3, #96	@ 0x60
 80008c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <MX_TIM4_Init+0x128>)
 80008d6:	f004 fd8f 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80008e0:	f000 f904 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2204      	movs	r2, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4812      	ldr	r0, [pc, #72]	@ (8000934 <MX_TIM4_Init+0x128>)
 80008ec:	f004 fd84 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80008f6:	f000 f8f9 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2208      	movs	r2, #8
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <MX_TIM4_Init+0x128>)
 8000902:	f004 fd79 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800090c:	f000 f8ee 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	220c      	movs	r2, #12
 8000914:	4619      	mov	r1, r3
 8000916:	4807      	ldr	r0, [pc, #28]	@ (8000934 <MX_TIM4_Init+0x128>)
 8000918:	f004 fd6e 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000922:	f000 f8e3 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000926:	4803      	ldr	r0, [pc, #12]	@ (8000934 <MX_TIM4_Init+0x128>)
 8000928:	f000 fa8e 	bl	8000e48 <HAL_TIM_MspPostInit>

}
 800092c:	bf00      	nop
 800092e:	3738      	adds	r7, #56	@ 0x38
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001d4 	.word	0x200001d4
 8000938:	40000800 	.word	0x40000800

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	@ 0x30
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b60      	ldr	r3, [pc, #384]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a5f      	ldr	r2, [pc, #380]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b5d      	ldr	r3, [pc, #372]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b59      	ldr	r3, [pc, #356]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a58      	ldr	r2, [pc, #352]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b56      	ldr	r3, [pc, #344]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b52      	ldr	r3, [pc, #328]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a51      	ldr	r2, [pc, #324]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b4b      	ldr	r3, [pc, #300]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a4a      	ldr	r2, [pc, #296]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b48      	ldr	r3, [pc, #288]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b44      	ldr	r3, [pc, #272]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a43      	ldr	r2, [pc, #268]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b41      	ldr	r3, [pc, #260]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a3c      	ldr	r2, [pc, #240]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad8 <MX_GPIO_Init+0x19c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	4837      	ldr	r0, [pc, #220]	@ (8000adc <MX_GPIO_Init+0x1a0>)
 8000a00:	f000 fe34 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2101      	movs	r1, #1
 8000a08:	4835      	ldr	r0, [pc, #212]	@ (8000ae0 <MX_GPIO_Init+0x1a4>)
 8000a0a:	f000 fe2f 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2110      	movs	r1, #16
 8000a12:	4834      	ldr	r0, [pc, #208]	@ (8000ae4 <MX_GPIO_Init+0x1a8>)
 8000a14:	f000 fe2a 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	482c      	ldr	r0, [pc, #176]	@ (8000adc <MX_GPIO_Init+0x1a0>)
 8000a2c:	f000 fc9a 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a30:	2308      	movs	r3, #8
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4825      	ldr	r0, [pc, #148]	@ (8000adc <MX_GPIO_Init+0x1a0>)
 8000a48:	f000 fc8c 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a4c:	2332      	movs	r3, #50	@ 0x32
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481e      	ldr	r0, [pc, #120]	@ (8000adc <MX_GPIO_Init+0x1a0>)
 8000a62:	f000 fc7f 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4818      	ldr	r0, [pc, #96]	@ (8000ae0 <MX_GPIO_Init+0x1a4>)
 8000a7e:	f000 fc71 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a86:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4814      	ldr	r0, [pc, #80]	@ (8000ae8 <MX_GPIO_Init+0x1ac>)
 8000a98:	f000 fc64 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <MX_GPIO_Init+0x1a8>)
 8000ab4:	f000 fc56 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <MX_GPIO_Init+0x1a8>)
 8000acc:	f000 fc4a 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	@ 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	40020000 	.word	0x40020000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 fbd2 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	@ (8000bcc <HAL_I2C_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12c      	bne.n	8000bc4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a17      	ldr	r2, [pc, #92]	@ (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b86:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480c      	ldr	r0, [pc, #48]	@ (8000bd4 <HAL_I2C_MspInit+0x8c>)
 8000ba4:	f000 fbde 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	4a07      	ldr	r2, [pc, #28]	@ (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	@ 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	@ 0x38
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a59      	ldr	r2, [pc, #356]	@ (8000d5c <HAL_I2S_MspInit+0x184>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d15b      	bne.n	8000cb2 <HAL_I2S_MspInit+0xda>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	4b58      	ldr	r3, [pc, #352]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a57      	ldr	r2, [pc, #348]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b55      	ldr	r3, [pc, #340]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	4b51      	ldr	r3, [pc, #324]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a50      	ldr	r2, [pc, #320]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	4b4a      	ldr	r3, [pc, #296]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a49      	ldr	r2, [pc, #292]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b47      	ldr	r3, [pc, #284]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c5e:	2306      	movs	r3, #6
 8000c60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	483e      	ldr	r0, [pc, #248]	@ (8000d64 <HAL_I2S_MspInit+0x18c>)
 8000c6a:	f000 fb7b 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4836      	ldr	r0, [pc, #216]	@ (8000d64 <HAL_I2S_MspInit+0x18c>)
 8000c8a:	f000 fb6b 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c8e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	482f      	ldr	r0, [pc, #188]	@ (8000d68 <HAL_I2S_MspInit+0x190>)
 8000cac:	f000 fb5a 	bl	8001364 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cb0:	e04f      	b.n	8000d52 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8000d6c <HAL_I2S_MspInit+0x194>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d14a      	bne.n	8000d52 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	4a26      	ldr	r2, [pc, #152]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ccc:	4b24      	ldr	r3, [pc, #144]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	4a18      	ldr	r2, [pc, #96]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d04:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <HAL_I2S_MspInit+0x188>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d10:	2310      	movs	r3, #16
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d20:	2306      	movs	r3, #6
 8000d22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4811      	ldr	r0, [pc, #68]	@ (8000d70 <HAL_I2S_MspInit+0x198>)
 8000d2c:	f000 fb1a 	bl	8001364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d30:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d42:	2306      	movs	r3, #6
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_I2S_MspInit+0x18c>)
 8000d4e:	f000 fb09 	bl	8001364 <HAL_GPIO_Init>
}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	@ 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40003800 	.word	0x40003800
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40003c00 	.word	0x40003c00
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <HAL_SPI_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12b      	bne.n	8000dee <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <HAL_SPI_MspInit+0x88>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <HAL_SPI_MspInit+0x88>)
 8000da0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_SPI_MspInit+0x88>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000daa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_SPI_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	@ (8000dfc <HAL_SPI_MspInit+0x88>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <HAL_SPI_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dce:	23e0      	movs	r3, #224	@ 0xe0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dde:	2305      	movs	r3, #5
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <HAL_SPI_MspInit+0x8c>)
 8000dea:	f000 fabb 	bl	8001364 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	@ 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0b      	ldr	r2, [pc, #44]	@ (8000e40 <HAL_TIM_Base_MspInit+0x3c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10d      	bne.n	8000e32 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_TIM_Base_MspInit+0x40>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <HAL_TIM_Base_MspInit+0x40>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <HAL_TIM_Base_MspInit+0x40>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40000800 	.word	0x40000800
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <HAL_TIM_MspPostInit+0x68>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d11e      	bne.n	8000ea8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_TIM_MspPostInit+0x6c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <HAL_TIM_MspPostInit+0x6c>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_TIM_MspPostInit+0x6c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e86:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <HAL_TIM_MspPostInit+0x70>)
 8000ea4:	f000 fa5e 	bl	8001364 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40000800 	.word	0x40000800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f000 f8d1 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <OTG_FS_IRQHandler+0x10>)
 8000f22:	f000 fe79 	bl	8001c18 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000600 	.word	0x20000600

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	@ (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f008 fc3e 	bl	80097e0 <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20020000 	.word	0x20020000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	2000021c 	.word	0x2000021c
 8000f98:	20000b28 	.word	0x20000b28

08000f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc4:	f7ff ffea 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fca:	490d      	ldr	r1, [pc, #52]	@ (8001000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800100c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fee:	f008 fbfd 	bl	80097ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f7ff fa87 	bl	8000504 <main>
  bx  lr    
 8000ff6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ff8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001000:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001004:	08009910 	.word	0x08009910
  ldr r2, =_sbss
 8001008:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800100c:	20000b28 	.word	0x20000b28

08001010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC_IRQHandler>
	...

08001014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <HAL_Init+0x40>)
 800101e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001024:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <HAL_Init+0x40>)
 800102a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800102e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a07      	ldr	r2, [pc, #28]	@ (8001054 <HAL_Init+0x40>)
 8001036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f94f 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f808 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001048:	f7ff fd56 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023c00 	.word	0x40023c00

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <HAL_InitTick+0x54>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <HAL_InitTick+0x58>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f967 	bl	800134a <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001094:	f000 f92f 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	@ (80010b4 <HAL_InitTick+0x5c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000220 	.word	0x20000220

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000220 	.word	0x20000220

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffde 	bl	80010e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	@ (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	@ (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	@ (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	@ 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff29 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff3e 	bl	8001188 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff8e 	bl	8001234 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5d 	bl	80011e0 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff31 	bl	80011a4 <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e159      	b.n	8001634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8148 	bne.w	800162e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d005      	beq.n	80013b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d017      	beq.n	8001454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d123      	bne.n	80014a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a2 	beq.w	800162e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b57      	ldr	r3, [pc, #348]	@ (800164c <HAL_GPIO_Init+0x2e8>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a56      	ldr	r2, [pc, #344]	@ (800164c <HAL_GPIO_Init+0x2e8>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b54      	ldr	r3, [pc, #336]	@ (800164c <HAL_GPIO_Init+0x2e8>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001506:	4a52      	ldr	r2, [pc, #328]	@ (8001650 <HAL_GPIO_Init+0x2ec>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a49      	ldr	r2, [pc, #292]	@ (8001654 <HAL_GPIO_Init+0x2f0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x202>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a48      	ldr	r2, [pc, #288]	@ (8001658 <HAL_GPIO_Init+0x2f4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x1fe>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a47      	ldr	r2, [pc, #284]	@ (800165c <HAL_GPIO_Init+0x2f8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x1fa>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a46      	ldr	r2, [pc, #280]	@ (8001660 <HAL_GPIO_Init+0x2fc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x1f6>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a45      	ldr	r2, [pc, #276]	@ (8001664 <HAL_GPIO_Init+0x300>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x1f2>
 8001552:	2304      	movs	r3, #4
 8001554:	e008      	b.n	8001568 <HAL_GPIO_Init+0x204>
 8001556:	2307      	movs	r3, #7
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x204>
 800155a:	2303      	movs	r3, #3
 800155c:	e004      	b.n	8001568 <HAL_GPIO_Init+0x204>
 800155e:	2302      	movs	r3, #2
 8001560:	e002      	b.n	8001568 <HAL_GPIO_Init+0x204>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_GPIO_Init+0x204>
 8001566:	2300      	movs	r3, #0
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	f002 0203 	and.w	r2, r2, #3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4093      	lsls	r3, r2
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001578:	4935      	ldr	r1, [pc, #212]	@ (8001650 <HAL_GPIO_Init+0x2ec>)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001586:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <HAL_GPIO_Init+0x304>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001668 <HAL_GPIO_Init+0x304>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <HAL_GPIO_Init+0x304>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d4:	4a24      	ldr	r2, [pc, #144]	@ (8001668 <HAL_GPIO_Init+0x304>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015da:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <HAL_GPIO_Init+0x304>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001668 <HAL_GPIO_Init+0x304>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <HAL_GPIO_Init+0x304>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001628:	4a0f      	ldr	r2, [pc, #60]	@ (8001668 <HAL_GPIO_Init+0x304>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b0f      	cmp	r3, #15
 8001638:	f67f aea2 	bls.w	8001380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3724      	adds	r7, #36	@ 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40013800 	.word	0x40013800
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	40020800 	.word	0x40020800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40013c00 	.word	0x40013c00

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001688:	e003      	b.n	8001692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	041a      	lsls	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	619a      	str	r2, [r3, #24]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af02      	add	r7, sp, #8
 80016a4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e059      	b.n	8001764 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f007 fd18 	bl	8009100 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2203      	movs	r2, #3
 80016d4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016de:	d102      	bne.n	80016e6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 fbc3 	bl	8005e76 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7c1a      	ldrb	r2, [r3, #16]
 80016f8:	f88d 2000 	strb.w	r2, [sp]
 80016fc:	3304      	adds	r3, #4
 80016fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001700:	f004 fb44 	bl	8005d8c <USB_CoreInit>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2202      	movs	r2, #2
 800170e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e026      	b.n	8001764 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2101      	movs	r1, #1
 800171c:	4618      	mov	r0, r3
 800171e:	f004 fbbb 	bl	8005e98 <USB_SetCurrentMode>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e017      	b.n	8001764 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7c1a      	ldrb	r2, [r3, #16]
 800173c:	f88d 2000 	strb.w	r2, [sp]
 8001740:	3304      	adds	r3, #4
 8001742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001744:	f004 fd64 	bl	8006210 <USB_HostInit>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2202      	movs	r2, #2
 8001752:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e004      	b.n	8001764 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b08b      	sub	sp, #44	@ 0x2c
 8001770:	af04      	add	r7, sp, #16
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	70fb      	strb	r3, [r7, #3]
 800177e:	460b      	mov	r3, r1
 8001780:	70bb      	strb	r3, [r7, #2]
 8001782:	4613      	mov	r3, r2
 8001784:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001786:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001788:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_HCD_HC_Init+0x2c>
 8001794:	2302      	movs	r3, #2
 8001796:	e09d      	b.n	80018d4 <HAL_HCD_HC_Init+0x168>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	3319      	adds	r3, #25
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3314      	adds	r3, #20
 80017c4:	787a      	ldrb	r2, [r7, #1]
 80017c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3315      	adds	r3, #21
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	3326      	adds	r3, #38	@ 0x26
 80017ec:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	78bb      	ldrb	r3, [r7, #2]
 80017f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017fa:	b2d8      	uxtb	r0, r3
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	3316      	adds	r3, #22
 800180a:	4602      	mov	r2, r0
 800180c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	4619      	mov	r1, r3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fba4 	bl	8001f60 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001818:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800181c:	2b00      	cmp	r3, #0
 800181e:	da0a      	bge.n	8001836 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	3317      	adds	r3, #23
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e009      	b.n	800184a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3317      	adds	r3, #23
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f004 fe2c 	bl	80064ac <USB_GetHostSpeed>
 8001854:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001856:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10b      	bne.n	8001876 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800185e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_HCD_HC_Init+0x10a>
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d104      	bne.n	8001876 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001870:	d901      	bls.n	8001876 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001872:	23bc      	movs	r3, #188	@ 0xbc
 8001874:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	3318      	adds	r3, #24
 8001886:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800188a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	b298      	uxth	r0, r3
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	3328      	adds	r3, #40	@ 0x28
 80018a0:	4602      	mov	r2, r0
 80018a2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	787c      	ldrb	r4, [r7, #1]
 80018ae:	78ba      	ldrb	r2, [r7, #2]
 80018b0:	78f9      	ldrb	r1, [r7, #3]
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	4623      	mov	r3, r4
 80018c2:	f004 fe1b 	bl	80064fc <USB_HC_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd90      	pop	{r4, r7, pc}

080018dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	70fb      	strb	r3, [r7, #3]
 80018ee:	460b      	mov	r3, r1
 80018f0:	70bb      	strb	r3, [r7, #2]
 80018f2:	4613      	mov	r3, r2
 80018f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3317      	adds	r3, #23
 8001906:	78ba      	ldrb	r2, [r7, #2]
 8001908:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	3326      	adds	r3, #38	@ 0x26
 800191a:	787a      	ldrb	r2, [r7, #1]
 800191c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800191e:	7c3b      	ldrb	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d114      	bne.n	800194e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	332a      	adds	r3, #42	@ 0x2a
 8001934:	2203      	movs	r2, #3
 8001936:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3319      	adds	r3, #25
 8001948:	7f3a      	ldrb	r2, [r7, #28]
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	e009      	b.n	8001962 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	332a      	adds	r3, #42	@ 0x2a
 800195e:	2202      	movs	r2, #2
 8001960:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001962:	787b      	ldrb	r3, [r7, #1]
 8001964:	2b03      	cmp	r3, #3
 8001966:	f200 8102 	bhi.w	8001b6e <HAL_HCD_HC_SubmitRequest+0x292>
 800196a:	a201      	add	r2, pc, #4	@ (adr r2, 8001970 <HAL_HCD_HC_SubmitRequest+0x94>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	08001981 	.word	0x08001981
 8001974:	08001b59 	.word	0x08001b59
 8001978:	08001a45 	.word	0x08001a45
 800197c:	08001acf 	.word	0x08001acf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001980:	7c3b      	ldrb	r3, [r7, #16]
 8001982:	2b01      	cmp	r3, #1
 8001984:	f040 80f5 	bne.w	8001b72 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001988:	78bb      	ldrb	r3, [r7, #2]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d12d      	bne.n	80019ea <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800198e:	8b3b      	ldrh	r3, [r7, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d109      	bne.n	80019a8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	333d      	adds	r3, #61	@ 0x3d
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	333d      	adds	r3, #61	@ 0x3d
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10a      	bne.n	80019d4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	332a      	adds	r3, #42	@ 0x2a
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80019d2:	e0ce      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	332a      	adds	r3, #42	@ 0x2a
 80019e4:	2202      	movs	r2, #2
 80019e6:	701a      	strb	r2, [r3, #0]
      break;
 80019e8:	e0c3      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	331a      	adds	r3, #26
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	f040 80b8 	bne.w	8001b72 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	333c      	adds	r3, #60	@ 0x3c
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10a      	bne.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	332a      	adds	r3, #42	@ 0x2a
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
      break;
 8001a2c:	e0a1      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	332a      	adds	r3, #42	@ 0x2a
 8001a3e:	2202      	movs	r2, #2
 8001a40:	701a      	strb	r2, [r3, #0]
      break;
 8001a42:	e096      	b.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a44:	78bb      	ldrb	r3, [r7, #2]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d120      	bne.n	8001a8c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a4a:	78fa      	ldrb	r2, [r7, #3]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	333d      	adds	r3, #61	@ 0x3d
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10a      	bne.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	332a      	adds	r3, #42	@ 0x2a
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a74:	e07e      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	332a      	adds	r3, #42	@ 0x2a
 8001a86:	2202      	movs	r2, #2
 8001a88:	701a      	strb	r2, [r3, #0]
      break;
 8001a8a:	e073      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	333c      	adds	r3, #60	@ 0x3c
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10a      	bne.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	332a      	adds	r3, #42	@ 0x2a
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
      break;
 8001ab6:	e05d      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	332a      	adds	r3, #42	@ 0x2a
 8001ac8:	2202      	movs	r2, #2
 8001aca:	701a      	strb	r2, [r3, #0]
      break;
 8001acc:	e052      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ace:	78bb      	ldrb	r3, [r7, #2]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d120      	bne.n	8001b16 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	333d      	adds	r3, #61	@ 0x3d
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10a      	bne.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	332a      	adds	r3, #42	@ 0x2a
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001afe:	e039      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	332a      	adds	r3, #42	@ 0x2a
 8001b10:	2202      	movs	r2, #2
 8001b12:	701a      	strb	r2, [r3, #0]
      break;
 8001b14:	e02e      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	333c      	adds	r3, #60	@ 0x3c
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10a      	bne.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	332a      	adds	r3, #42	@ 0x2a
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
      break;
 8001b40:	e018      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	332a      	adds	r3, #42	@ 0x2a
 8001b52:	2202      	movs	r2, #2
 8001b54:	701a      	strb	r2, [r3, #0]
      break;
 8001b56:	e00d      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	332a      	adds	r3, #42	@ 0x2a
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
      break;
 8001b6c:	e002      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001b6e:	bf00      	nop
 8001b70:	e000      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001b72:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	332c      	adds	r3, #44	@ 0x2c
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	8b39      	ldrh	r1, [r7, #24]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4403      	add	r3, r0
 8001b98:	3334      	adds	r3, #52	@ 0x34
 8001b9a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	334c      	adds	r3, #76	@ 0x4c
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3338      	adds	r3, #56	@ 0x38
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3315      	adds	r3, #21
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	334d      	adds	r3, #77	@ 0x4d
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	1a9b      	subs	r3, r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	3310      	adds	r3, #16
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	1d19      	adds	r1, r3, #4
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	799b      	ldrb	r3, [r3, #6]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f004 fd8e 	bl	8006728 <USB_HC_StartXfer>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop

08001c18 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 faa8 	bl	8006184 <USB_GetMode>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	f040 80fb 	bne.w	8001e32 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 fa6b 	bl	800611c <USB_ReadInterrupts>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80f1 	beq.w	8001e30 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fa62 	bl	800611c <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c62:	d104      	bne.n	8001c6e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 fa52 	bl	800611c <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c82:	d104      	bne.n	8001c8e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f004 fa42 	bl	800611c <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ca2:	d104      	bne.n	8001cae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 fa32 	bl	800611c <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d103      	bne.n	8001cca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 fa24 	bl	800611c <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cde:	d120      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001ce8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d113      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cfa:	2110      	movs	r1, #16
 8001cfc:	6938      	ldr	r0, [r7, #16]
 8001cfe:	f004 f917 	bl	8005f30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d02:	6938      	ldr	r0, [r7, #16]
 8001d04:	f004 f946 	bl	8005f94 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7a5b      	ldrb	r3, [r3, #9]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d105      	bne.n	8001d1c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fb28 	bl	800636c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f007 fa6d 	bl	80091fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 f9f8 	bl	800611c <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d36:	d102      	bne.n	8001d3e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f001 fd4d 	bl	80037d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 f9ea 	bl	800611c <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d106      	bne.n	8001d60 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f007 fa36 	bl	80091c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f004 f9d9 	bl	800611c <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d74:	d139      	bne.n	8001dea <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 ff18 	bl	8006bb0 <USB_HC_ReadInterrupt>
 8001d80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e025      	b.n	8001dd4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d018      	beq.n	8001dce <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001db2:	d106      	bne.n	8001dc2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f905 	bl	8001fca <HCD_HC_IN_IRQHandler>
 8001dc0:	e005      	b.n	8001dce <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 ff67 	bl	8002c9c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	795b      	ldrb	r3, [r3, #5]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d3d3      	bcc.n	8001d88 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 f994 	bl	800611c <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d101      	bne.n	8001e02 <HAL_HCD_IRQHandler+0x1ea>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_HCD_IRQHandler+0x1ec>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d014      	beq.n	8001e32 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0210 	bic.w	r2, r2, #16
 8001e16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f001 fbfe 	bl	800361a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699a      	ldr	r2, [r3, #24]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0210 	orr.w	r2, r2, #16
 8001e2c:	619a      	str	r2, [r3, #24]
 8001e2e:	e000      	b.n	8001e32 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001e30:	bf00      	nop
    }
  }
}
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_HCD_Start+0x16>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e013      	b.n	8001e76 <HAL_HCD_Start+0x3e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f004 faec 	bl	800643a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 fff4 	bl	8005e54 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_HCD_Stop+0x16>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e00d      	b.n	8001eb0 <HAL_HCD_Stop+0x32>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f004 ffb6 	bl	8006e12 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f004 fa8e 	bl	80063e6 <USB_ResetPort>
 8001eca:	4603      	mov	r3, r0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	334c      	adds	r3, #76	@ 0x4c
 8001ef0:	781b      	ldrb	r3, [r3, #0]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	3338      	adds	r3, #56	@ 0x38
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 fad0 	bl	80064da <USB_GetCurrentFrame>
 8001f3a:	4603      	mov	r3, r0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 faab 	bl	80064ac <USB_GetHostSpeed>
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	331a      	adds	r3, #26
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	331b      	adds	r3, #27
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3325      	adds	r3, #37	@ 0x25
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3324      	adds	r3, #36	@ 0x24
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f004 f8aa 	bl	8006142 <USB_ReadChInterrupts>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d11a      	bne.n	800202e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002004:	461a      	mov	r2, r3
 8002006:	2304      	movs	r3, #4
 8002008:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	334d      	adds	r3, #77	@ 0x4d
 800201a:	2207      	movs	r2, #7
 800201c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f004 fdd3 	bl	8006bd2 <USB_HC_Halt>
 800202c:	e09e      	b.n	800216c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f004 f883 	bl	8006142 <USB_ReadChInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002046:	d11b      	bne.n	8002080 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002054:	461a      	mov	r2, r3
 8002056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800205a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	334d      	adds	r3, #77	@ 0x4d
 800206c:	2208      	movs	r2, #8
 800206e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f004 fdaa 	bl	8006bd2 <USB_HC_Halt>
 800207e:	e075      	b.n	800216c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f004 f85a 	bl	8006142 <USB_ReadChInterrupts>
 800208e:	4603      	mov	r3, r0
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b08      	cmp	r3, #8
 8002096:	d11a      	bne.n	80020ce <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a4:	461a      	mov	r2, r3
 80020a6:	2308      	movs	r3, #8
 80020a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	334d      	adds	r3, #77	@ 0x4d
 80020ba:	2206      	movs	r2, #6
 80020bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 fd83 	bl	8006bd2 <USB_HC_Halt>
 80020cc:	e04e      	b.n	800216c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 f833 	bl	8006142 <USB_ReadChInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e6:	d11b      	bne.n	8002120 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f4:	461a      	mov	r2, r3
 80020f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	334d      	adds	r3, #77	@ 0x4d
 800210c:	2209      	movs	r2, #9
 800210e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f004 fd5a 	bl	8006bd2 <USB_HC_Halt>
 800211e:	e025      	b.n	800216c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f004 f80a 	bl	8006142 <USB_ReadChInterrupts>
 800212e:	4603      	mov	r3, r0
 8002130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002134:	2b80      	cmp	r3, #128	@ 0x80
 8002136:	d119      	bne.n	800216c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002144:	461a      	mov	r2, r3
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	334d      	adds	r3, #77	@ 0x4d
 800215a:	2207      	movs	r2, #7
 800215c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f004 fd33 	bl	8006bd2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f003 ffe4 	bl	8006142 <USB_ReadChInterrupts>
 800217a:	4603      	mov	r3, r0
 800217c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002184:	d112      	bne.n	80021ac <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fd1f 	bl	8006bd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021a6:	6093      	str	r3, [r2, #8]
 80021a8:	f000 bd75 	b.w	8002c96 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f003 ffc4 	bl	8006142 <USB_ReadChInterrupts>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	f040 8128 	bne.w	8002416 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d2:	461a      	mov	r2, r3
 80021d4:	2320      	movs	r3, #32
 80021d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	331b      	adds	r3, #27
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d119      	bne.n	8002222 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	331b      	adds	r3, #27
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	0151      	lsls	r1, r2, #5
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	440a      	add	r2, r1
 8002218:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800221c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002220:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	799b      	ldrb	r3, [r3, #6]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01b      	beq.n	8002262 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	3330      	adds	r3, #48	@ 0x30
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	1ac9      	subs	r1, r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4403      	add	r3, r0
 800225e:	3338      	adds	r3, #56	@ 0x38
 8002260:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	334d      	adds	r3, #77	@ 0x4d
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	3344      	adds	r3, #68	@ 0x44
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002296:	461a      	mov	r2, r3
 8002298:	2301      	movs	r3, #1
 800229a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	3326      	adds	r3, #38	@ 0x26
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	3326      	adds	r3, #38	@ 0x26
 80022c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d110      	bne.n	80022ea <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 fc7e 	bl	8006bd2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e2:	461a      	mov	r2, r3
 80022e4:	2310      	movs	r3, #16
 80022e6:	6093      	str	r3, [r2, #8]
 80022e8:	e03d      	b.n	8002366 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3326      	adds	r3, #38	@ 0x26
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d00a      	beq.n	8002316 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3326      	adds	r3, #38	@ 0x26
 8002310:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002312:	2b01      	cmp	r3, #1
 8002314:	d127      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	0151      	lsls	r1, r2, #5
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	440a      	add	r2, r1
 800232c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002330:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002334:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	334c      	adds	r3, #76	@ 0x4c
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	334c      	adds	r3, #76	@ 0x4c
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f006 ff59 	bl	8009218 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	799b      	ldrb	r3, [r3, #6]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d13b      	bne.n	80023e6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3338      	adds	r3, #56	@ 0x38
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4403      	add	r3, r0
 800238e:	3328      	adds	r3, #40	@ 0x28
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	440b      	add	r3, r1
 8002394:	1e59      	subs	r1, r3, #1
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4403      	add	r3, r0
 80023a4:	3328      	adds	r3, #40	@ 0x28
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8470 	beq.w	8002c96 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	333c      	adds	r3, #60	@ 0x3c
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2d8      	uxtb	r0, r3
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	333c      	adds	r3, #60	@ 0x3c
 80023de:	4602      	mov	r2, r0
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	f000 bc58 	b.w	8002c96 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	333c      	adds	r3, #60	@ 0x3c
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	f083 0301 	eor.w	r3, r3, #1
 80023fe:	b2d8      	uxtb	r0, r3
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	333c      	adds	r3, #60	@ 0x3c
 800240e:	4602      	mov	r2, r0
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	f000 bc40 	b.w	8002c96 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f003 fe8f 	bl	8006142 <USB_ReadChInterrupts>
 8002424:	4603      	mov	r3, r0
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b20      	cmp	r3, #32
 800242c:	d131      	bne.n	8002492 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800243a:	461a      	mov	r2, r3
 800243c:	2320      	movs	r3, #32
 800243e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	331a      	adds	r3, #26
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	f040 841f 	bne.w	8002c96 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	331b      	adds	r3, #27
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	334d      	adds	r3, #77	@ 0x4d
 800247c:	2203      	movs	r2, #3
 800247e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f004 fba2 	bl	8006bd2 <USB_HC_Halt>
 800248e:	f000 bc02 	b.w	8002c96 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fe51 	bl	8006142 <USB_ReadChInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	f040 8305 	bne.w	8002ab6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	2302      	movs	r3, #2
 80024bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	334d      	adds	r3, #77	@ 0x4d
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d114      	bne.n	80024fe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	334d      	adds	r3, #77	@ 0x4d
 80024e4:	2202      	movs	r2, #2
 80024e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	334c      	adds	r3, #76	@ 0x4c
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e2cc      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	334d      	adds	r3, #77	@ 0x4d
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b06      	cmp	r3, #6
 8002512:	d114      	bne.n	800253e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	334d      	adds	r3, #77	@ 0x4d
 8002524:	2202      	movs	r2, #2
 8002526:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	334c      	adds	r3, #76	@ 0x4c
 8002538:	2205      	movs	r2, #5
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e2ac      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	334d      	adds	r3, #77	@ 0x4d
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b07      	cmp	r3, #7
 8002552:	d00b      	beq.n	800256c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	334d      	adds	r3, #77	@ 0x4d
 8002564:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002566:	2b09      	cmp	r3, #9
 8002568:	f040 80a6 	bne.w	80026b8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334d      	adds	r3, #77	@ 0x4d
 800257c:	2202      	movs	r2, #2
 800257e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3344      	adds	r3, #68	@ 0x44
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1c59      	adds	r1, r3, #1
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4403      	add	r3, r0
 80025a0:	3344      	adds	r3, #68	@ 0x44
 80025a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3344      	adds	r3, #68	@ 0x44
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d943      	bls.n	8002642 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	3344      	adds	r3, #68	@ 0x44
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	331a      	adds	r3, #26
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d123      	bne.n	800262c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	331b      	adds	r3, #27
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	331c      	adds	r3, #28
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	0151      	lsls	r1, r2, #5
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	440a      	add	r2, r1
 8002622:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	334c      	adds	r3, #76	@ 0x4c
 800263c:	2204      	movs	r2, #4
 800263e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002640:	e229      	b.n	8002a96 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	334c      	adds	r3, #76	@ 0x4c
 8002652:	2202      	movs	r2, #2
 8002654:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	3326      	adds	r3, #38	@ 0x26
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00b      	beq.n	8002684 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	3326      	adds	r3, #38	@ 0x26
 800267c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800267e:	2b02      	cmp	r3, #2
 8002680:	f040 8209 	bne.w	8002a96 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800269a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b0:	461a      	mov	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026b6:	e1ee      	b.n	8002a96 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334d      	adds	r3, #77	@ 0x4d
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	f040 80c8 	bne.w	8002860 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	334d      	adds	r3, #77	@ 0x4d
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	331b      	adds	r3, #27
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	f040 81ce 	bne.w	8002a98 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3326      	adds	r3, #38	@ 0x26
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d16b      	bne.n	80027ea <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3348      	adds	r3, #72	@ 0x48
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	1c59      	adds	r1, r3, #1
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4403      	add	r3, r0
 8002732:	3348      	adds	r3, #72	@ 0x48
 8002734:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	3348      	adds	r3, #72	@ 0x48
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d943      	bls.n	80027d4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3348      	adds	r3, #72	@ 0x48
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	331b      	adds	r3, #27
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3344      	adds	r3, #68	@ 0x44
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d809      	bhi.n	800279e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	331c      	adds	r3, #28
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	0151      	lsls	r1, r2, #5
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	440a      	add	r2, r1
 80027b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027bc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	334c      	adds	r3, #76	@ 0x4c
 80027ce:	2204      	movs	r2, #4
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	e014      	b.n	80027fe <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	334c      	adds	r3, #76	@ 0x4c
 80027e4:	2202      	movs	r2, #2
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e009      	b.n	80027fe <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	334c      	adds	r3, #76	@ 0x4c
 80027fa:	2202      	movs	r2, #2
 80027fc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3326      	adds	r3, #38	@ 0x26
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00b      	beq.n	800282c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3326      	adds	r3, #38	@ 0x26
 8002824:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002826:	2b02      	cmp	r3, #2
 8002828:	f040 8136 	bne.w	8002a98 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002842:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800284a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002858:	461a      	mov	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e11b      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	334d      	adds	r3, #77	@ 0x4d
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b03      	cmp	r3, #3
 8002874:	f040 8081 	bne.w	800297a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	334d      	adds	r3, #77	@ 0x4d
 8002888:	2202      	movs	r2, #2
 800288a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	331b      	adds	r3, #27
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 80fa 	bne.w	8002a98 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	334c      	adds	r3, #76	@ 0x4c
 80028b4:	2202      	movs	r2, #2
 80028b6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	0151      	lsls	r1, r2, #5
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	440a      	add	r2, r1
 80028ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	0151      	lsls	r1, r2, #5
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	440a      	add	r2, r1
 80028ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	0151      	lsls	r1, r2, #5
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	440a      	add	r2, r1
 800290e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002912:	f023 0320 	bic.w	r3, r3, #32
 8002916:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3326      	adds	r3, #38	@ 0x26
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3326      	adds	r3, #38	@ 0x26
 800293e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002940:	2b02      	cmp	r3, #2
 8002942:	f040 80a9 	bne.w	8002a98 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800295c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002964:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	e08e      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	334d      	adds	r3, #77	@ 0x4d
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d143      	bne.n	8002a18 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	334d      	adds	r3, #77	@ 0x4d
 80029a0:	2202      	movs	r2, #2
 80029a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	334c      	adds	r3, #76	@ 0x4c
 80029b4:	2202      	movs	r2, #2
 80029b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3326      	adds	r3, #38	@ 0x26
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3326      	adds	r3, #38	@ 0x26
 80029de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d159      	bne.n	8002a98 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a02:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a10:	461a      	mov	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e03f      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	334d      	adds	r3, #77	@ 0x4d
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d126      	bne.n	8002a7c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	334d      	adds	r3, #77	@ 0x4d
 8002a3e:	2202      	movs	r2, #2
 8002a40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3344      	adds	r3, #68	@ 0x44
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	1c59      	adds	r1, r3, #1
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4403      	add	r3, r0
 8002a62:	3344      	adds	r3, #68	@ 0x44
 8002a64:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	334c      	adds	r3, #76	@ 0x4c
 8002a76:	2204      	movs	r2, #4
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e00d      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	334d      	adds	r3, #77	@ 0x4d
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	f000 8100 	beq.w	8002c94 <HCD_HC_IN_IRQHandler+0xcca>
 8002a94:	e000      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a96:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	334c      	adds	r3, #76	@ 0x4c
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f006 fbb2 	bl	8009218 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ab4:	e0ef      	b.n	8002c96 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 fb3f 	bl	8006142 <USB_ReadChInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aca:	2b40      	cmp	r3, #64	@ 0x40
 8002acc:	d12f      	bne.n	8002b2e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ada:	461a      	mov	r2, r3
 8002adc:	2340      	movs	r3, #64	@ 0x40
 8002ade:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	334d      	adds	r3, #77	@ 0x4d
 8002af0:	2205      	movs	r2, #5
 8002af2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	331a      	adds	r3, #26
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3344      	adds	r3, #68	@ 0x44
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 f853 	bl	8006bd2 <USB_HC_Halt>
 8002b2c:	e0b3      	b.n	8002c96 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 fb03 	bl	8006142 <USB_ReadChInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	f040 80a7 	bne.w	8002c96 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	3326      	adds	r3, #38	@ 0x26
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d11b      	bne.n	8002b96 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3344      	adds	r3, #68	@ 0x44
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	334d      	adds	r3, #77	@ 0x4d
 8002b82:	2204      	movs	r2, #4
 8002b84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 f81f 	bl	8006bd2 <USB_HC_Halt>
 8002b94:	e03f      	b.n	8002c16 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3326      	adds	r3, #38	@ 0x26
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3326      	adds	r3, #38	@ 0x26
 8002bbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d129      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3344      	adds	r3, #68	@ 0x44
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	799b      	ldrb	r3, [r3, #6]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HCD_HC_IN_IRQHandler+0xc2a>
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	331b      	adds	r3, #27
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d110      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334d      	adds	r3, #77	@ 0x4d
 8002c04:	2204      	movs	r2, #4
 8002c06:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f003 ffde 	bl	8006bd2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	331b      	adds	r3, #27
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d129      	bne.n	8002c80 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	331b      	adds	r3, #27
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	0151      	lsls	r1, r2, #5
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	440a      	add	r2, r1
 8002c56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	0151      	lsls	r1, r2, #5
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	440a      	add	r2, r1
 8002c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c7a:	f043 0320 	orr.w	r3, r3, #32
 8002c7e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2310      	movs	r3, #16
 8002c90:	6093      	str	r3, [r2, #8]
 8002c92:	e000      	b.n	8002c96 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002c94:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 fa41 	bl	8006142 <USB_ReadChInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d11b      	bne.n	8002d02 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2304      	movs	r3, #4
 8002cda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	334d      	adds	r3, #77	@ 0x4d
 8002cec:	2207      	movs	r2, #7
 8002cee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 ff6a 	bl	8006bd2 <USB_HC_Halt>
 8002cfe:	f000 bc89 	b.w	8003614 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fa19 	bl	8006142 <USB_ReadChInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	f040 8082 	bne.w	8002e20 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3319      	adds	r3, #25
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d124      	bne.n	8002d8e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	3319      	adds	r3, #25
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334c      	adds	r3, #76	@ 0x4c
 8002d68:	2202      	movs	r2, #2
 8002d6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	334d      	adds	r3, #77	@ 0x4d
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 ff22 	bl	8006bd2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	331a      	adds	r3, #26
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	f040 8437 	bne.w	8003614 <HCD_HC_OUT_IRQHandler+0x978>
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	331b      	adds	r3, #27
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 842b 	bne.w	8003614 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3326      	adds	r3, #38	@ 0x26
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d009      	beq.n	8002de8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	331b      	adds	r3, #27
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	334d      	adds	r3, #77	@ 0x4d
 8002df8:	2203      	movs	r2, #3
 8002dfa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 fee4 	bl	8006bd2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3344      	adds	r3, #68	@ 0x44
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e3f9      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f003 f98a 	bl	8006142 <USB_ReadChInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e38:	d111      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e46:	461a      	mov	r2, r3
 8002e48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 febb 	bl	8006bd2 <USB_HC_Halt>
 8002e5c:	e3da      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 f96b 	bl	8006142 <USB_ReadChInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d168      	bne.n	8002f48 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3344      	adds	r3, #68	@ 0x44
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 f955 	bl	8006142 <USB_ReadChInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ea0:	d112      	bne.n	8002ec8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3319      	adds	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2340      	movs	r3, #64	@ 0x40
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	331b      	adds	r3, #27
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d019      	beq.n	8002f12 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	331b      	adds	r3, #27
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	0151      	lsls	r1, r2, #5
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	440a      	add	r2, r1
 8002f08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f10:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2301      	movs	r3, #1
 8002f22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	334d      	adds	r3, #77	@ 0x4d
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 fe46 	bl	8006bd2 <USB_HC_Halt>
 8002f46:	e365      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 f8f6 	bl	8006142 <USB_ReadChInterrupts>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5c:	2b40      	cmp	r3, #64	@ 0x40
 8002f5e:	d139      	bne.n	8002fd4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	334d      	adds	r3, #77	@ 0x4d
 8002f70:	2205      	movs	r2, #5
 8002f72:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	331a      	adds	r3, #26
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3319      	adds	r3, #25
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3344      	adds	r3, #68	@ 0x44
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 fe09 	bl	8006bd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2340      	movs	r3, #64	@ 0x40
 8002fd0:	6093      	str	r3, [r2, #8]
 8002fd2:	e31f      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 f8b0 	bl	8006142 <USB_ReadChInterrupts>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d11a      	bne.n	8003022 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	334d      	adds	r3, #77	@ 0x4d
 800300e:	2206      	movs	r2, #6
 8003010:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f003 fdd9 	bl	8006bd2 <USB_HC_Halt>
 8003020:	e2f8      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f003 f889 	bl	8006142 <USB_ReadChInterrupts>
 8003030:	4603      	mov	r3, r0
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b10      	cmp	r3, #16
 8003038:	d144      	bne.n	80030c4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	3344      	adds	r3, #68	@ 0x44
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	334d      	adds	r3, #77	@ 0x4d
 800305e:	2204      	movs	r2, #4
 8003060:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	3319      	adds	r3, #25
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d114      	bne.n	80030a2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3318      	adds	r3, #24
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3319      	adds	r3, #25
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fd91 	bl	8006bd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030bc:	461a      	mov	r2, r3
 80030be:	2310      	movs	r3, #16
 80030c0:	6093      	str	r3, [r2, #8]
 80030c2:	e2a7      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f003 f838 	bl	8006142 <USB_ReadChInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d8:	2b80      	cmp	r3, #128	@ 0x80
 80030da:	f040 8083 	bne.w	80031e4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	799b      	ldrb	r3, [r3, #6]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d111      	bne.n	800310a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	334d      	adds	r3, #77	@ 0x4d
 80030f6:	2207      	movs	r2, #7
 80030f8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fd65 	bl	8006bd2 <USB_HC_Halt>
 8003108:	e062      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3344      	adds	r3, #68	@ 0x44
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	1c59      	adds	r1, r3, #1
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4403      	add	r3, r0
 800312a:	3344      	adds	r3, #68	@ 0x44
 800312c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3344      	adds	r3, #68	@ 0x44
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d922      	bls.n	800318a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3344      	adds	r3, #68	@ 0x44
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	334c      	adds	r3, #76	@ 0x4c
 8003168:	2204      	movs	r2, #4
 800316a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334c      	adds	r3, #76	@ 0x4c
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f006 f848 	bl	8009218 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003188:	e022      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	334c      	adds	r3, #76	@ 0x4c
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031b4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031bc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031dc:	461a      	mov	r2, r3
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	6093      	str	r3, [r2, #8]
 80031e2:	e217      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 ffa8 	bl	8006142 <USB_ReadChInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fc:	d11b      	bne.n	8003236 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	334d      	adds	r3, #77	@ 0x4d
 800320e:	2209      	movs	r2, #9
 8003210:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f003 fcd9 	bl	8006bd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800322c:	461a      	mov	r2, r3
 800322e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003232:	6093      	str	r3, [r2, #8]
 8003234:	e1ee      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f002 ff7f 	bl	8006142 <USB_ReadChInterrupts>
 8003244:	4603      	mov	r3, r0
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	f040 81df 	bne.w	800360e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325c:	461a      	mov	r2, r3
 800325e:	2302      	movs	r3, #2
 8003260:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	334d      	adds	r3, #77	@ 0x4d
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	f040 8093 	bne.w	80033a0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334d      	adds	r3, #77	@ 0x4d
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334c      	adds	r3, #76	@ 0x4c
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	3326      	adds	r3, #38	@ 0x26
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d00b      	beq.n	80032d0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	3326      	adds	r3, #38	@ 0x26
 80032c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	f040 8190 	bne.w	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	799b      	ldrb	r3, [r3, #6]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d115      	bne.n	8003304 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	333d      	adds	r3, #61	@ 0x3d
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2d8      	uxtb	r0, r3
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	333d      	adds	r3, #61	@ 0x3d
 8003300:	4602      	mov	r2, r0
 8003302:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	799b      	ldrb	r3, [r3, #6]
 8003308:	2b01      	cmp	r3, #1
 800330a:	f040 8171 	bne.w	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3334      	adds	r3, #52	@ 0x34
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8165 	beq.w	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	3334      	adds	r3, #52	@ 0x34
 8003336:	6819      	ldr	r1, [r3, #0]
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4403      	add	r3, r0
 8003346:	3328      	adds	r3, #40	@ 0x28
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	440b      	add	r3, r1
 800334c:	1e59      	subs	r1, r3, #1
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4403      	add	r3, r0
 800335c:	3328      	adds	r3, #40	@ 0x28
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	fbb1 f3f3 	udiv	r3, r1, r3
 8003364:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 813f 	beq.w	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	333d      	adds	r3, #61	@ 0x3d
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	f083 0301 	eor.w	r3, r3, #1
 800338a:	b2d8      	uxtb	r0, r3
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	333d      	adds	r3, #61	@ 0x3d
 800339a:	4602      	mov	r2, r0
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e127      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	334d      	adds	r3, #77	@ 0x4d
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d120      	bne.n	80033f8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	334d      	adds	r3, #77	@ 0x4d
 80033c6:	2202      	movs	r2, #2
 80033c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	331b      	adds	r3, #27
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	f040 8107 	bne.w	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	334c      	adds	r3, #76	@ 0x4c
 80033f2:	2202      	movs	r2, #2
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e0fb      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	334d      	adds	r3, #77	@ 0x4d
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b04      	cmp	r3, #4
 800340c:	d13a      	bne.n	8003484 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	334d      	adds	r3, #77	@ 0x4d
 800341e:	2202      	movs	r2, #2
 8003420:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	334c      	adds	r3, #76	@ 0x4c
 8003432:	2202      	movs	r2, #2
 8003434:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	331b      	adds	r3, #27
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	f040 80d1 	bne.w	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	331b      	adds	r3, #27
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	0151      	lsls	r1, r2, #5
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	440a      	add	r2, r1
 8003478:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800347c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003480:	6053      	str	r3, [r2, #4]
 8003482:	e0b5      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	334d      	adds	r3, #77	@ 0x4d
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d114      	bne.n	80034c4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	334d      	adds	r3, #77	@ 0x4d
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	334c      	adds	r3, #76	@ 0x4c
 80034be:	2202      	movs	r2, #2
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e095      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	334d      	adds	r3, #77	@ 0x4d
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d114      	bne.n	8003504 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	334d      	adds	r3, #77	@ 0x4d
 80034ea:	2202      	movs	r2, #2
 80034ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	334c      	adds	r3, #76	@ 0x4c
 80034fe:	2205      	movs	r2, #5
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	e075      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	334d      	adds	r3, #77	@ 0x4d
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b07      	cmp	r3, #7
 8003518:	d00a      	beq.n	8003530 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	334d      	adds	r3, #77	@ 0x4d
 800352a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800352c:	2b09      	cmp	r3, #9
 800352e:	d170      	bne.n	8003612 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	334d      	adds	r3, #77	@ 0x4d
 8003540:	2202      	movs	r2, #2
 8003542:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3344      	adds	r3, #68	@ 0x44
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	1c59      	adds	r1, r3, #1
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4403      	add	r3, r0
 8003564:	3344      	adds	r3, #68	@ 0x44
 8003566:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3344      	adds	r3, #68	@ 0x44
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d914      	bls.n	80035a8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	3344      	adds	r3, #68	@ 0x44
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	334c      	adds	r3, #76	@ 0x4c
 80035a2:	2204      	movs	r2, #4
 80035a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035a6:	e022      	b.n	80035ee <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334c      	adds	r3, #76	@ 0x4c
 80035b8:	2202      	movs	r2, #2
 80035ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	334c      	adds	r3, #76	@ 0x4c
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f005 fe06 	bl	8009218 <HAL_HCD_HC_NotifyURBChange_Callback>
 800360c:	e002      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003612:	bf00      	nop
  }
}
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b08a      	sub	sp, #40	@ 0x28
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	0c5b      	lsrs	r3, r3, #17
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800364e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d004      	beq.n	8003660 <HCD_RXQLVL_IRQHandler+0x46>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b05      	cmp	r3, #5
 800365a:	f000 80b6 	beq.w	80037ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800365e:	e0b7      	b.n	80037d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80b3 	beq.w	80037ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	332c      	adds	r3, #44	@ 0x2c
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80a7 	beq.w	80037ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3338      	adds	r3, #56	@ 0x38
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	18d1      	adds	r1, r2, r3
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4403      	add	r3, r0
 80036a4:	3334      	adds	r3, #52	@ 0x34
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4299      	cmp	r1, r3
 80036aa:	f200 8083 	bhi.w	80037b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	332c      	adds	r3, #44	@ 0x2c
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	b292      	uxth	r2, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	f002 fccf 	bl	800606c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	332c      	adds	r3, #44	@ 0x2c
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	18d1      	adds	r1, r2, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4403      	add	r3, r0
 80036f2:	332c      	adds	r3, #44	@ 0x2c
 80036f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3338      	adds	r3, #56	@ 0x38
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	18d1      	adds	r1, r2, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4403      	add	r3, r0
 800371a:	3338      	adds	r3, #56	@ 0x38
 800371c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	0cdb      	lsrs	r3, r3, #19
 800372e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003732:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3328      	adds	r3, #40	@ 0x28
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4293      	cmp	r3, r2
 800374c:	d13f      	bne.n	80037ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d03c      	beq.n	80037ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800376a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003772:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	333c      	adds	r3, #60	@ 0x3c
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	f083 0301 	eor.w	r3, r3, #1
 800379c:	b2d8      	uxtb	r0, r3
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	333c      	adds	r3, #60	@ 0x3c
 80037ae:	4602      	mov	r2, r0
 80037b0:	701a      	strb	r2, [r3, #0]
      break;
 80037b2:	e00c      	b.n	80037ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	334c      	adds	r3, #76	@ 0x4c
 80037c4:	2204      	movs	r2, #4
 80037c6:	701a      	strb	r2, [r3, #0]
      break;
 80037c8:	e001      	b.n	80037ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80037ce:	bf00      	nop
  }
}
 80037d0:	bf00      	nop
 80037d2:	3728      	adds	r7, #40	@ 0x28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003804:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d10b      	bne.n	8003828 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d102      	bne.n	8003820 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f005 fce0 	bl	80091e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f043 0302 	orr.w	r3, r3, #2
 8003826:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b08      	cmp	r3, #8
 8003830:	d132      	bne.n	8003898 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b04      	cmp	r3, #4
 8003842:	d126      	bne.n	8003892 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7a5b      	ldrb	r3, [r3, #9]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d113      	bne.n	8003874 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003852:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003856:	d106      	bne.n	8003866 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2102      	movs	r1, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f002 fd84 	bl	800636c <USB_InitFSLSPClkSel>
 8003864:	e011      	b.n	800388a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2101      	movs	r1, #1
 800386c:	4618      	mov	r0, r3
 800386e:	f002 fd7d 	bl	800636c <USB_InitFSLSPClkSel>
 8003872:	e00a      	b.n	800388a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	79db      	ldrb	r3, [r3, #7]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003882:	461a      	mov	r2, r3
 8003884:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003888:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f005 fcd2 	bl	8009234 <HAL_HCD_PortEnabled_Callback>
 8003890:	e002      	b.n	8003898 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f005 fcdc 	bl	8009250 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d103      	bne.n	80038aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6013      	str	r3, [r2, #0]
}
 80038b6:	bf00      	nop
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e12b      	b.n	8003b2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd f92e 	bl	8000b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	@ 0x24
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003924:	f001 fa20 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8003928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4a81      	ldr	r2, [pc, #516]	@ (8003b34 <HAL_I2C_Init+0x274>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d807      	bhi.n	8003944 <HAL_I2C_Init+0x84>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a80      	ldr	r2, [pc, #512]	@ (8003b38 <HAL_I2C_Init+0x278>)
 8003938:	4293      	cmp	r3, r2
 800393a:	bf94      	ite	ls
 800393c:	2301      	movls	r3, #1
 800393e:	2300      	movhi	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e006      	b.n	8003952 <HAL_I2C_Init+0x92>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a7d      	ldr	r2, [pc, #500]	@ (8003b3c <HAL_I2C_Init+0x27c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	bf94      	ite	ls
 800394c:	2301      	movls	r3, #1
 800394e:	2300      	movhi	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0e7      	b.n	8003b2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a78      	ldr	r2, [pc, #480]	@ (8003b40 <HAL_I2C_Init+0x280>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0c9b      	lsrs	r3, r3, #18
 8003964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a6a      	ldr	r2, [pc, #424]	@ (8003b34 <HAL_I2C_Init+0x274>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d802      	bhi.n	8003994 <HAL_I2C_Init+0xd4>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3301      	adds	r3, #1
 8003992:	e009      	b.n	80039a8 <HAL_I2C_Init+0xe8>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	4a69      	ldr	r2, [pc, #420]	@ (8003b44 <HAL_I2C_Init+0x284>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	099b      	lsrs	r3, r3, #6
 80039a6:	3301      	adds	r3, #1
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	495c      	ldr	r1, [pc, #368]	@ (8003b34 <HAL_I2C_Init+0x274>)
 80039c4:	428b      	cmp	r3, r1
 80039c6:	d819      	bhi.n	80039fc <HAL_I2C_Init+0x13c>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e59      	subs	r1, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d6:	1c59      	adds	r1, r3, #1
 80039d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039dc:	400b      	ands	r3, r1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_I2C_Init+0x138>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e59      	subs	r1, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f0:	3301      	adds	r3, #1
 80039f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f6:	e051      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 80039f8:	2304      	movs	r3, #4
 80039fa:	e04f      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d111      	bne.n	8003a28 <HAL_I2C_Init+0x168>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e012      	b.n	8003a4e <HAL_I2C_Init+0x18e>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	0099      	lsls	r1, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Init+0x196>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e022      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10e      	bne.n	8003a7c <HAL_I2C_Init+0x1bc>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e58      	subs	r0, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	440b      	add	r3, r1
 8003a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a7a:	e00f      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1e58      	subs	r0, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	0099      	lsls	r1, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	6809      	ldr	r1, [r1, #0]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003aca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6911      	ldr	r1, [r2, #16]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	000186a0 	.word	0x000186a0
 8003b38:	001e847f 	.word	0x001e847f
 8003b3c:	003d08ff 	.word	0x003d08ff
 8003b40:	431bde83 	.word	0x431bde83
 8003b44:	10624dd3 	.word	0x10624dd3

08003b48 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e128      	b.n	8003dac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a90      	ldr	r2, [pc, #576]	@ (8003db4 <HAL_I2S_Init+0x26c>)
 8003b72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fd f82f 	bl	8000bd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b90:	f023 030f 	bic.w	r3, r3, #15
 8003b94:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d060      	beq.n	8003c68 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bae:	2310      	movs	r3, #16
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d802      	bhi.n	8003bc6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	f001 f9d2 	bl	8004f70 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bcc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bd6:	d125      	bne.n	8003c24 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfc:	3305      	adds	r3, #5
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	e01f      	b.n	8003c42 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	3305      	adds	r3, #5
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e00e      	b.n	8003c42 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	461a      	mov	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	3305      	adds	r3, #5
 8003c40:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4a5c      	ldr	r2, [pc, #368]	@ (8003db8 <HAL_I2S_Init+0x270>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	08db      	lsrs	r3, r3, #3
 8003c4c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	e003      	b.n	8003c70 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d902      	bls.n	8003c7c <HAL_I2S_Init+0x134>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	2bff      	cmp	r3, #255	@ 0xff
 8003c7a:	d907      	bls.n	8003c8c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c80:	f043 0210 	orr.w	r2, r3, #16
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e08f      	b.n	8003dac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	ea42 0103 	orr.w	r1, r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003caa:	f023 030f 	bic.w	r3, r3, #15
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6851      	ldr	r1, [r2, #4]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6892      	ldr	r2, [r2, #8]
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68d2      	ldr	r2, [r2, #12]
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6992      	ldr	r2, [r2, #24]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d161      	bne.n	8003d9c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a38      	ldr	r2, [pc, #224]	@ (8003dbc <HAL_I2S_Init+0x274>)
 8003cdc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a37      	ldr	r2, [pc, #220]	@ (8003dc0 <HAL_I2S_Init+0x278>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_I2S_Init+0x1a4>
 8003ce8:	4b36      	ldr	r3, [pc, #216]	@ (8003dc4 <HAL_I2S_Init+0x27c>)
 8003cea:	e001      	b.n	8003cf0 <HAL_I2S_Init+0x1a8>
 8003cec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	4932      	ldr	r1, [pc, #200]	@ (8003dc0 <HAL_I2S_Init+0x278>)
 8003cf8:	428a      	cmp	r2, r1
 8003cfa:	d101      	bne.n	8003d00 <HAL_I2S_Init+0x1b8>
 8003cfc:	4a31      	ldr	r2, [pc, #196]	@ (8003dc4 <HAL_I2S_Init+0x27c>)
 8003cfe:	e001      	b.n	8003d04 <HAL_I2S_Init+0x1bc>
 8003d00:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003d04:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d08:	f023 030f 	bic.w	r3, r3, #15
 8003d0c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc0 <HAL_I2S_Init+0x278>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d101      	bne.n	8003d1c <HAL_I2S_Init+0x1d4>
 8003d18:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc4 <HAL_I2S_Init+0x27c>)
 8003d1a:	e001      	b.n	8003d20 <HAL_I2S_Init+0x1d8>
 8003d1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d20:	2202      	movs	r2, #2
 8003d22:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a25      	ldr	r2, [pc, #148]	@ (8003dc0 <HAL_I2S_Init+0x278>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2S_Init+0x1ea>
 8003d2e:	4b25      	ldr	r3, [pc, #148]	@ (8003dc4 <HAL_I2S_Init+0x27c>)
 8003d30:	e001      	b.n	8003d36 <HAL_I2S_Init+0x1ee>
 8003d32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d42:	d003      	beq.n	8003d4c <HAL_I2S_Init+0x204>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d103      	bne.n	8003d54 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	e001      	b.n	8003d58 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d62:	4313      	orrs	r3, r2
 8003d64:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d76:	4313      	orrs	r3, r2
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	897b      	ldrh	r3, [r7, #10]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d84:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc0 <HAL_I2S_Init+0x278>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d101      	bne.n	8003d94 <HAL_I2S_Init+0x24c>
 8003d90:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <HAL_I2S_Init+0x27c>)
 8003d92:	e001      	b.n	8003d98 <HAL_I2S_Init+0x250>
 8003d94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d98:	897a      	ldrh	r2, [r7, #10]
 8003d9a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3720      	adds	r7, #32
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	08003ebf 	.word	0x08003ebf
 8003db8:	cccccccd 	.word	0xcccccccd
 8003dbc:	08003fd5 	.word	0x08003fd5
 8003dc0:	40003800 	.word	0x40003800
 8003dc4:	40003400 	.word	0x40003400

08003dc8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10e      	bne.n	8003e58 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e48:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ffb8 	bl	8003dc8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	b292      	uxth	r2, r2
 8003e74:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	1c9a      	adds	r2, r3, #2
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10e      	bne.n	8003eb6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ea6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff93 	bl	8003ddc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d13a      	bne.n	8003f50 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d109      	bne.n	8003ef8 <I2S_IRQHandler+0x3a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eee:	2b40      	cmp	r3, #64	@ 0x40
 8003ef0:	d102      	bne.n	8003ef8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ffb4 	bl	8003e60 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b40      	cmp	r3, #64	@ 0x40
 8003f00:	d126      	bne.n	8003f50 <I2S_IRQHandler+0x92>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d11f      	bne.n	8003f50 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f043 0202 	orr.w	r2, r3, #2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ff50 	bl	8003df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d136      	bne.n	8003fca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d109      	bne.n	8003f7a <I2S_IRQHandler+0xbc>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f70:	2b80      	cmp	r3, #128	@ 0x80
 8003f72:	d102      	bne.n	8003f7a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ff45 	bl	8003e04 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d122      	bne.n	8003fca <I2S_IRQHandler+0x10c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d11b      	bne.n	8003fca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fa0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbc:	f043 0204 	orr.w	r2, r3, #4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff13 	bl	8003df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a92      	ldr	r2, [pc, #584]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003fee:	4b92      	ldr	r3, [pc, #584]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff0:	e001      	b.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ff2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a8b      	ldr	r2, [pc, #556]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800400c:	4b8a      	ldr	r3, [pc, #552]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800400e:	e001      	b.n	8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004010:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004020:	d004      	beq.n	800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 8099 	bne.w	800415e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b02      	cmp	r3, #2
 8004034:	d107      	bne.n	8004046 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f925 	bl	8004290 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9c8 	bl	80043f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004066:	2b40      	cmp	r3, #64	@ 0x40
 8004068:	d13a      	bne.n	80040e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d035      	beq.n	80040e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a6e      	ldr	r2, [pc, #440]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800407e:	4b6e      	ldr	r3, [pc, #440]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004080:	e001      	b.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004082:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4969      	ldr	r1, [pc, #420]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800408e:	428b      	cmp	r3, r1
 8004090:	d101      	bne.n	8004096 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004092:	4b69      	ldr	r3, [pc, #420]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004094:	e001      	b.n	800409a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004096:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800409a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800409e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	f043 0202 	orr.w	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fe88 	bl	8003df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	f040 80c3 	bne.w	8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80bd 	beq.w	8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004106:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a49      	ldr	r2, [pc, #292]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004112:	4b49      	ldr	r3, [pc, #292]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004114:	e001      	b.n	800411a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004116:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4944      	ldr	r1, [pc, #272]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004122:	428b      	cmp	r3, r1
 8004124:	d101      	bne.n	800412a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004126:	4b44      	ldr	r3, [pc, #272]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004128:	e001      	b.n	800412e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800412a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800412e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004132:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004134:	2300      	movs	r3, #0
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	f043 0204 	orr.w	r2, r3, #4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fe4a 	bl	8003df0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800415c:	e089      	b.n	8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b02      	cmp	r3, #2
 8004166:	d107      	bne.n	8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f8be 	bl	80042f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f8fd 	bl	800438c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004198:	2b40      	cmp	r3, #64	@ 0x40
 800419a:	d12f      	bne.n	80041fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02a      	beq.n	80041fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041c2:	e001      	b.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4919      	ldr	r1, [pc, #100]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041d0:	428b      	cmp	r3, r1
 80041d2:	d101      	bne.n	80041d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80041d4:	4b18      	ldr	r3, [pc, #96]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041d6:	e001      	b.n	80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80041d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f043 0202 	orr.w	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff fdfa 	bl	8003df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b08      	cmp	r3, #8
 8004204:	d136      	bne.n	8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d031      	beq.n	8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a07      	ldr	r2, [pc, #28]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800421a:	4b07      	ldr	r3, [pc, #28]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800421c:	e001      	b.n	8004222 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800421e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4902      	ldr	r1, [pc, #8]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800422a:	428b      	cmp	r3, r1
 800422c:	d106      	bne.n	800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800422e:	4b02      	ldr	r3, [pc, #8]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004230:	e006      	b.n	8004240 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004232:	bf00      	nop
 8004234:	40003800 	.word	0x40003800
 8004238:	40003400 	.word	0x40003400
 800423c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004240:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004244:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004254:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f043 0204 	orr.w	r2, r3, #4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fdc0 	bl	8003df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004270:	e000      	b.n	8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004272:	bf00      	nop
}
 8004274:	bf00      	nop
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	1c99      	adds	r1, r3, #2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6251      	str	r1, [r2, #36]	@ 0x24
 80042a2:	881a      	ldrh	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d113      	bne.n	80042ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ffc9 	bl	800427c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	1c99      	adds	r1, r3, #2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6251      	str	r1, [r2, #36]	@ 0x24
 8004306:	8819      	ldrh	r1, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1d      	ldr	r2, [pc, #116]	@ (8004384 <I2SEx_TxISR_I2SExt+0x90>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d101      	bne.n	8004316 <I2SEx_TxISR_I2SExt+0x22>
 8004312:	4b1d      	ldr	r3, [pc, #116]	@ (8004388 <I2SEx_TxISR_I2SExt+0x94>)
 8004314:	e001      	b.n	800431a <I2SEx_TxISR_I2SExt+0x26>
 8004316:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800431a:	460a      	mov	r2, r1
 800431c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d121      	bne.n	800437a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a12      	ldr	r2, [pc, #72]	@ (8004384 <I2SEx_TxISR_I2SExt+0x90>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d101      	bne.n	8004344 <I2SEx_TxISR_I2SExt+0x50>
 8004340:	4b11      	ldr	r3, [pc, #68]	@ (8004388 <I2SEx_TxISR_I2SExt+0x94>)
 8004342:	e001      	b.n	8004348 <I2SEx_TxISR_I2SExt+0x54>
 8004344:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	490d      	ldr	r1, [pc, #52]	@ (8004384 <I2SEx_TxISR_I2SExt+0x90>)
 8004350:	428b      	cmp	r3, r1
 8004352:	d101      	bne.n	8004358 <I2SEx_TxISR_I2SExt+0x64>
 8004354:	4b0c      	ldr	r3, [pc, #48]	@ (8004388 <I2SEx_TxISR_I2SExt+0x94>)
 8004356:	e001      	b.n	800435c <I2SEx_TxISR_I2SExt+0x68>
 8004358:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800435c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004360:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff81 	bl	800427c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40003800 	.word	0x40003800
 8004388:	40003400 	.word	0x40003400

0800438c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68d8      	ldr	r0, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	1c99      	adds	r1, r3, #2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80043a4:	b282      	uxth	r2, r0
 80043a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d113      	bne.n	80043e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff ff4a 	bl	800427c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a20      	ldr	r2, [pc, #128]	@ (8004480 <I2SEx_RxISR_I2SExt+0x90>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <I2SEx_RxISR_I2SExt+0x16>
 8004402:	4b20      	ldr	r3, [pc, #128]	@ (8004484 <I2SEx_RxISR_I2SExt+0x94>)
 8004404:	e001      	b.n	800440a <I2SEx_RxISR_I2SExt+0x1a>
 8004406:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800440a:	68d8      	ldr	r0, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	1c99      	adds	r1, r3, #2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004416:	b282      	uxth	r2, r0
 8004418:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d121      	bne.n	8004476 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a12      	ldr	r2, [pc, #72]	@ (8004480 <I2SEx_RxISR_I2SExt+0x90>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d101      	bne.n	8004440 <I2SEx_RxISR_I2SExt+0x50>
 800443c:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <I2SEx_RxISR_I2SExt+0x94>)
 800443e:	e001      	b.n	8004444 <I2SEx_RxISR_I2SExt+0x54>
 8004440:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	490d      	ldr	r1, [pc, #52]	@ (8004480 <I2SEx_RxISR_I2SExt+0x90>)
 800444c:	428b      	cmp	r3, r1
 800444e:	d101      	bne.n	8004454 <I2SEx_RxISR_I2SExt+0x64>
 8004450:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <I2SEx_RxISR_I2SExt+0x94>)
 8004452:	e001      	b.n	8004458 <I2SEx_RxISR_I2SExt+0x68>
 8004454:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004458:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800445c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ff03 	bl	800427c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40003800 	.word	0x40003800
 8004484:	40003400 	.word	0x40003400

08004488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e267      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d075      	beq.n	8004592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044a6:	4b88      	ldr	r3, [pc, #544]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d00c      	beq.n	80044cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b2:	4b85      	ldr	r3, [pc, #532]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d112      	bne.n	80044e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044be:	4b82      	ldr	r3, [pc, #520]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ca:	d10b      	bne.n	80044e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044cc:	4b7e      	ldr	r3, [pc, #504]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d05b      	beq.n	8004590 <HAL_RCC_OscConfig+0x108>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d157      	bne.n	8004590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e242      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ec:	d106      	bne.n	80044fc <HAL_RCC_OscConfig+0x74>
 80044ee:	4b76      	ldr	r3, [pc, #472]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a75      	ldr	r2, [pc, #468]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e01d      	b.n	8004538 <HAL_RCC_OscConfig+0xb0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0x98>
 8004506:	4b70      	ldr	r3, [pc, #448]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a6f      	ldr	r2, [pc, #444]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 800450c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b6d      	ldr	r3, [pc, #436]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a6c      	ldr	r2, [pc, #432]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e00b      	b.n	8004538 <HAL_RCC_OscConfig+0xb0>
 8004520:	4b69      	ldr	r3, [pc, #420]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a68      	ldr	r2, [pc, #416]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 8004526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b66      	ldr	r3, [pc, #408]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a65      	ldr	r2, [pc, #404]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 8004532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004540:	f7fc fdce 	bl	80010e0 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fc fdca 	bl	80010e0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	@ 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e207      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b5b      	ldr	r3, [pc, #364]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0xc0>
 8004566:	e014      	b.n	8004592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fc fdba 	bl	80010e0 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fc fdb6 	bl	80010e0 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e1f3      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	4b51      	ldr	r3, [pc, #324]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0xe8>
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d063      	beq.n	8004666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800459e:	4b4a      	ldr	r3, [pc, #296]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045aa:	4b47      	ldr	r3, [pc, #284]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d11c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045b6:	4b44      	ldr	r3, [pc, #272]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d116      	bne.n	80045f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	4b41      	ldr	r3, [pc, #260]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_RCC_OscConfig+0x152>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e1c7      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045da:	4b3b      	ldr	r3, [pc, #236]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4937      	ldr	r1, [pc, #220]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ee:	e03a      	b.n	8004666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d020      	beq.n	800463a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f8:	4b34      	ldr	r3, [pc, #208]	@ (80046cc <HAL_RCC_OscConfig+0x244>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fc fd6f 	bl	80010e0 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004606:	f7fc fd6b 	bl	80010e0 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e1a8      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004618:	4b2b      	ldr	r3, [pc, #172]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004624:	4b28      	ldr	r3, [pc, #160]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4925      	ldr	r1, [pc, #148]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 8004634:	4313      	orrs	r3, r2
 8004636:	600b      	str	r3, [r1, #0]
 8004638:	e015      	b.n	8004666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463a:	4b24      	ldr	r3, [pc, #144]	@ (80046cc <HAL_RCC_OscConfig+0x244>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fc fd4e 	bl	80010e0 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004648:	f7fc fd4a 	bl	80010e0 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e187      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465a:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d036      	beq.n	80046e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d016      	beq.n	80046a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467a:	4b15      	ldr	r3, [pc, #84]	@ (80046d0 <HAL_RCC_OscConfig+0x248>)
 800467c:	2201      	movs	r2, #1
 800467e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fc fd2e 	bl	80010e0 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004688:	f7fc fd2a 	bl	80010e0 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e167      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469a:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <HAL_RCC_OscConfig+0x240>)
 800469c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f0      	beq.n	8004688 <HAL_RCC_OscConfig+0x200>
 80046a6:	e01b      	b.n	80046e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a8:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <HAL_RCC_OscConfig+0x248>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ae:	f7fc fd17 	bl	80010e0 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b4:	e00e      	b.n	80046d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b6:	f7fc fd13 	bl	80010e0 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d907      	bls.n	80046d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e150      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
 80046c8:	40023800 	.word	0x40023800
 80046cc:	42470000 	.word	0x42470000
 80046d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d4:	4b88      	ldr	r3, [pc, #544]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 80046d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ea      	bne.n	80046b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 8097 	beq.w	800481c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ee:	2300      	movs	r3, #0
 80046f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f2:	4b81      	ldr	r3, [pc, #516]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10f      	bne.n	800471e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	4b7d      	ldr	r3, [pc, #500]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	4a7c      	ldr	r2, [pc, #496]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800470c:	6413      	str	r3, [r2, #64]	@ 0x40
 800470e:	4b7a      	ldr	r3, [pc, #488]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471a:	2301      	movs	r3, #1
 800471c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471e:	4b77      	ldr	r3, [pc, #476]	@ (80048fc <HAL_RCC_OscConfig+0x474>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d118      	bne.n	800475c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472a:	4b74      	ldr	r3, [pc, #464]	@ (80048fc <HAL_RCC_OscConfig+0x474>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a73      	ldr	r2, [pc, #460]	@ (80048fc <HAL_RCC_OscConfig+0x474>)
 8004730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004736:	f7fc fcd3 	bl	80010e0 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473e:	f7fc fccf 	bl	80010e0 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e10c      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004750:	4b6a      	ldr	r3, [pc, #424]	@ (80048fc <HAL_RCC_OscConfig+0x474>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d106      	bne.n	8004772 <HAL_RCC_OscConfig+0x2ea>
 8004764:	4b64      	ldr	r3, [pc, #400]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004768:	4a63      	ldr	r2, [pc, #396]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004770:	e01c      	b.n	80047ac <HAL_RCC_OscConfig+0x324>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b05      	cmp	r3, #5
 8004778:	d10c      	bne.n	8004794 <HAL_RCC_OscConfig+0x30c>
 800477a:	4b5f      	ldr	r3, [pc, #380]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477e:	4a5e      	ldr	r2, [pc, #376]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004780:	f043 0304 	orr.w	r3, r3, #4
 8004784:	6713      	str	r3, [r2, #112]	@ 0x70
 8004786:	4b5c      	ldr	r3, [pc, #368]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478a:	4a5b      	ldr	r2, [pc, #364]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	6713      	str	r3, [r2, #112]	@ 0x70
 8004792:	e00b      	b.n	80047ac <HAL_RCC_OscConfig+0x324>
 8004794:	4b58      	ldr	r3, [pc, #352]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004798:	4a57      	ldr	r2, [pc, #348]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a0:	4b55      	ldr	r3, [pc, #340]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a4:	4a54      	ldr	r2, [pc, #336]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 80047a6:	f023 0304 	bic.w	r3, r3, #4
 80047aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d015      	beq.n	80047e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fc fc94 	bl	80010e0 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fc fc90 	bl	80010e0 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e0cb      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d2:	4b49      	ldr	r3, [pc, #292]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0ee      	beq.n	80047bc <HAL_RCC_OscConfig+0x334>
 80047de:	e014      	b.n	800480a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e0:	f7fc fc7e 	bl	80010e0 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e8:	f7fc fc7a 	bl	80010e0 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e0b5      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fe:	4b3e      	ldr	r3, [pc, #248]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1ee      	bne.n	80047e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d105      	bne.n	800481c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004810:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	4a38      	ldr	r2, [pc, #224]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80a1 	beq.w	8004968 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004826:	4b34      	ldr	r3, [pc, #208]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b08      	cmp	r3, #8
 8004830:	d05c      	beq.n	80048ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d141      	bne.n	80048be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483a:	4b31      	ldr	r3, [pc, #196]	@ (8004900 <HAL_RCC_OscConfig+0x478>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fc fc4e 	bl	80010e0 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004848:	f7fc fc4a 	bl	80010e0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e087      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485a:	4b27      	ldr	r3, [pc, #156]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	019b      	lsls	r3, r3, #6
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	3b01      	subs	r3, #1
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	491b      	ldr	r1, [pc, #108]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004890:	4b1b      	ldr	r3, [pc, #108]	@ (8004900 <HAL_RCC_OscConfig+0x478>)
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004896:	f7fc fc23 	bl	80010e0 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489e:	f7fc fc1f 	bl	80010e0 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e05c      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b0:	4b11      	ldr	r3, [pc, #68]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <HAL_RCC_OscConfig+0x416>
 80048bc:	e054      	b.n	8004968 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048be:	4b10      	ldr	r3, [pc, #64]	@ (8004900 <HAL_RCC_OscConfig+0x478>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fc fc0c 	bl	80010e0 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fc fc08 	bl	80010e0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e045      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <HAL_RCC_OscConfig+0x470>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x444>
 80048ea:	e03d      	b.n	8004968 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d107      	bne.n	8004904 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e038      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40007000 	.word	0x40007000
 8004900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004904:	4b1b      	ldr	r3, [pc, #108]	@ (8004974 <HAL_RCC_OscConfig+0x4ec>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d028      	beq.n	8004964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d121      	bne.n	8004964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	429a      	cmp	r2, r3
 800492c:	d11a      	bne.n	8004964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800493a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800493c:	4293      	cmp	r3, r2
 800493e:	d111      	bne.n	8004964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	3b01      	subs	r3, #1
 800494e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004950:	429a      	cmp	r2, r3
 8004952:	d107      	bne.n	8004964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800

08004978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0cc      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800498c:	4b68      	ldr	r3, [pc, #416]	@ (8004b30 <HAL_RCC_ClockConfig+0x1b8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d90c      	bls.n	80049b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499a:	4b65      	ldr	r3, [pc, #404]	@ (8004b30 <HAL_RCC_ClockConfig+0x1b8>)
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b63      	ldr	r3, [pc, #396]	@ (8004b30 <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0b8      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049cc:	4b59      	ldr	r3, [pc, #356]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4a58      	ldr	r2, [pc, #352]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e4:	4b53      	ldr	r3, [pc, #332]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4a52      	ldr	r2, [pc, #328]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f0:	4b50      	ldr	r3, [pc, #320]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	494d      	ldr	r1, [pc, #308]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d044      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d107      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a16:	4b47      	ldr	r3, [pc, #284]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d119      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e07f      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d003      	beq.n	8004a36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d107      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a36:	4b3f      	ldr	r3, [pc, #252]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e06f      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a46:	4b3b      	ldr	r3, [pc, #236]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e067      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a56:	4b37      	ldr	r3, [pc, #220]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f023 0203 	bic.w	r2, r3, #3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4934      	ldr	r1, [pc, #208]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a68:	f7fc fb3a 	bl	80010e0 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6e:	e00a      	b.n	8004a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a70:	f7fc fb36 	bl	80010e0 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e04f      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	4b2b      	ldr	r3, [pc, #172]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 020c 	and.w	r2, r3, #12
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d1eb      	bne.n	8004a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a98:	4b25      	ldr	r3, [pc, #148]	@ (8004b30 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d20c      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b22      	ldr	r3, [pc, #136]	@ (8004b30 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b20      	ldr	r3, [pc, #128]	@ (8004b30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e032      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004acc:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4916      	ldr	r1, [pc, #88]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aea:	4b12      	ldr	r3, [pc, #72]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	490e      	ldr	r1, [pc, #56]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004afe:	f000 f821 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 8004b02:	4602      	mov	r2, r0
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	490a      	ldr	r1, [pc, #40]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c0>)
 8004b10:	5ccb      	ldrb	r3, [r1, r3]
 8004b12:	fa22 f303 	lsr.w	r3, r2, r3
 8004b16:	4a09      	ldr	r2, [pc, #36]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b1a:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fc fa9a 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023c00 	.word	0x40023c00
 8004b34:	40023800 	.word	0x40023800
 8004b38:	080098e8 	.word	0x080098e8
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	20000004 	.word	0x20000004

08004b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b48:	b094      	sub	sp, #80	@ 0x50
 8004b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b5c:	4b79      	ldr	r3, [pc, #484]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d00d      	beq.n	8004b84 <HAL_RCC_GetSysClockFreq+0x40>
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	f200 80e1 	bhi.w	8004d30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_RCC_GetSysClockFreq+0x34>
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d003      	beq.n	8004b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b76:	e0db      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b78:	4b73      	ldr	r3, [pc, #460]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b7c:	e0db      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b7e:	4b73      	ldr	r3, [pc, #460]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x208>)
 8004b80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b82:	e0d8      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b84:	4b6f      	ldr	r3, [pc, #444]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d063      	beq.n	8004c62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	099b      	lsrs	r3, r3, #6
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ba4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bae:	2300      	movs	r3, #0
 8004bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	462b      	mov	r3, r5
 8004bba:	f04f 0000 	mov.w	r0, #0
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	0159      	lsls	r1, r3, #5
 8004bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc8:	0150      	lsls	r0, r2, #5
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4621      	mov	r1, r4
 8004bd0:	1a51      	subs	r1, r2, r1
 8004bd2:	6139      	str	r1, [r7, #16]
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be8:	4659      	mov	r1, fp
 8004bea:	018b      	lsls	r3, r1, #6
 8004bec:	4651      	mov	r1, sl
 8004bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	018a      	lsls	r2, r1, #6
 8004bf6:	4651      	mov	r1, sl
 8004bf8:	ebb2 0801 	subs.w	r8, r2, r1
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	eb63 0901 	sbc.w	r9, r3, r1
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c16:	4690      	mov	r8, r2
 8004c18:	4699      	mov	r9, r3
 8004c1a:	4623      	mov	r3, r4
 8004c1c:	eb18 0303 	adds.w	r3, r8, r3
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	462b      	mov	r3, r5
 8004c24:	eb49 0303 	adc.w	r3, r9, r3
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c36:	4629      	mov	r1, r5
 8004c38:	024b      	lsls	r3, r1, #9
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c40:	4621      	mov	r1, r4
 8004c42:	024a      	lsls	r2, r1, #9
 8004c44:	4610      	mov	r0, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c54:	f7fb fac0 	bl	80001d8 <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c60:	e058      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c62:	4b38      	ldr	r3, [pc, #224]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c72:	623b      	str	r3, [r7, #32]
 8004c74:	2300      	movs	r3, #0
 8004c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	f04f 0000 	mov.w	r0, #0
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	0159      	lsls	r1, r3, #5
 8004c8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c8e:	0150      	lsls	r0, r2, #5
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4641      	mov	r1, r8
 8004c96:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cb4:	ebb2 040a 	subs.w	r4, r2, sl
 8004cb8:	eb63 050b 	sbc.w	r5, r3, fp
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	00eb      	lsls	r3, r5, #3
 8004cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cca:	00e2      	lsls	r2, r4, #3
 8004ccc:	4614      	mov	r4, r2
 8004cce:	461d      	mov	r5, r3
 8004cd0:	4643      	mov	r3, r8
 8004cd2:	18e3      	adds	r3, r4, r3
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	eb45 0303 	adc.w	r3, r5, r3
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cea:	4629      	mov	r1, r5
 8004cec:	028b      	lsls	r3, r1, #10
 8004cee:	4621      	mov	r1, r4
 8004cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	028a      	lsls	r2, r1, #10
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cfe:	2200      	movs	r2, #0
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	61fa      	str	r2, [r7, #28]
 8004d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d08:	f7fb fa66 	bl	80001d8 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4613      	mov	r3, r2
 8004d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d14:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d2e:	e002      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d30:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3750      	adds	r7, #80	@ 0x50
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	007a1200 	.word	0x007a1200

08004d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d54:	4b03      	ldr	r3, [pc, #12]	@ (8004d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000000 	.word	0x20000000

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d6c:	f7ff fff0 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0a9b      	lsrs	r3, r3, #10
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4903      	ldr	r1, [pc, #12]	@ (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	080098f8 	.word	0x080098f8

08004d90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d105      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d038      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004db8:	4b68      	ldr	r3, [pc, #416]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dbe:	f7fc f98f 	bl	80010e0 <HAL_GetTick>
 8004dc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dc6:	f7fc f98b 	bl	80010e0 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e0bd      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dd8:	4b61      	ldr	r3, [pc, #388]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	019b      	lsls	r3, r3, #6
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	495a      	ldr	r1, [pc, #360]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dfe:	4b57      	ldr	r3, [pc, #348]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e04:	f7fc f96c 	bl	80010e0 <HAL_GetTick>
 8004e08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e0c:	f7fc f968 	bl	80010e0 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e09a      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e1e:	4b50      	ldr	r3, [pc, #320]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8083 	beq.w	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	4b48      	ldr	r3, [pc, #288]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e40:	4a47      	ldr	r2, [pc, #284]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e48:	4b45      	ldr	r3, [pc, #276]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e54:	4b43      	ldr	r3, [pc, #268]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a42      	ldr	r2, [pc, #264]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e5e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e60:	f7fc f93e 	bl	80010e0 <HAL_GetTick>
 8004e64:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e68:	f7fc f93a 	bl	80010e0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e06c      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e86:	4b36      	ldr	r3, [pc, #216]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d02f      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d028      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eac:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eae:	4b2e      	ldr	r3, [pc, #184]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004eba:	4a29      	ldr	r2, [pc, #164]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ec0:	4b27      	ldr	r3, [pc, #156]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d114      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fc f908 	bl	80010e0 <HAL_GetTick>
 8004ed0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	e00a      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed4:	f7fc f904 	bl	80010e0 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e034      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eea:	4b1d      	ldr	r3, [pc, #116]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ee      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f02:	d10d      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f04:	4b16      	ldr	r3, [pc, #88]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f18:	4911      	ldr	r1, [pc, #68]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
 8004f1e:	e005      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004f20:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a0e      	ldr	r2, [pc, #56]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f26:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f2a:	6093      	str	r3, [r2, #8]
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f38:	4909      	ldr	r1, [pc, #36]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	7d1a      	ldrb	r2, [r3, #20]
 8004f4e:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f50:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	42470068 	.word	0x42470068
 8004f60:	40023800 	.word	0x40023800
 8004f64:	40007000 	.word	0x40007000
 8004f68:	42470e40 	.word	0x42470e40
 8004f6c:	424711e0 	.word	0x424711e0

08004f70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d141      	bne.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f8e:	4b25      	ldr	r3, [pc, #148]	@ (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f96:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fa4:	d131      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fa6:	4b20      	ldr	r3, [pc, #128]	@ (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004fa8:	617b      	str	r3, [r7, #20]
          break;
 8004faa:	e031      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fac:	4b1d      	ldr	r3, [pc, #116]	@ (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fb8:	d109      	bne.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004fba:	4b1a      	ldr	r3, [pc, #104]	@ (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fc4:	4a19      	ldr	r2, [pc, #100]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fca:	613b      	str	r3, [r7, #16]
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004fce:	4b15      	ldr	r3, [pc, #84]	@ (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fd8:	4a15      	ldr	r2, [pc, #84]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fde:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004fe0:	4b10      	ldr	r3, [pc, #64]	@ (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ffa:	0f1b      	lsrs	r3, r3, #28
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	fbb2 f3f3 	udiv	r3, r2, r3
 8005006:	617b      	str	r3, [r7, #20]
          break;
 8005008:	e002      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
          break;
 800500e:	bf00      	nop
        }
      }
      break;
 8005010:	e000      	b.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8005012:	bf00      	nop
    }
  }
  return frequency;
 8005014:	697b      	ldr	r3, [r7, #20]
}
 8005016:	4618      	mov	r0, r3
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800
 8005028:	00bb8000 	.word	0x00bb8000
 800502c:	007a1200 	.word	0x007a1200
 8005030:	00f42400 	.word	0x00f42400

08005034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e07b      	b.n	800513e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	2b00      	cmp	r3, #0
 800504c:	d108      	bne.n	8005060 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005056:	d009      	beq.n	800506c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	61da      	str	r2, [r3, #28]
 800505e:	e005      	b.n	800506c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fb fe74 	bl	8000d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f0:	ea42 0103 	orr.w	r1, r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	0c1b      	lsrs	r3, r3, #16
 800510a:	f003 0104 	and.w	r1, r3, #4
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005112:	f003 0210 	and.w	r2, r3, #16
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800512c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e041      	b.n	80051dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fb fe49 	bl	8000e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3304      	adds	r3, #4
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f000 fac1 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e041      	b.n	800527a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f839 	bl	8005282 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f000 fa72 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <HAL_TIM_PWM_Start+0x24>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e022      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d109      	bne.n	80052d6 <HAL_TIM_PWM_Start+0x3e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	bf14      	ite	ne
 80052ce:	2301      	movne	r3, #1
 80052d0:	2300      	moveq	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	e015      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d109      	bne.n	80052f0 <HAL_TIM_PWM_Start+0x58>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e008      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e068      	b.n	80053dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <HAL_TIM_PWM_Start+0x82>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005318:	e013      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Start+0x92>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005328:	e00b      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d104      	bne.n	800533a <HAL_TIM_PWM_Start+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005338:	e003      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2201      	movs	r2, #1
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fc8a 	bl	8005c64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a23      	ldr	r2, [pc, #140]	@ (80053e4 <HAL_TIM_PWM_Start+0x14c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d107      	bne.n	800536a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005368:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1d      	ldr	r2, [pc, #116]	@ (80053e4 <HAL_TIM_PWM_Start+0x14c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d018      	beq.n	80053a6 <HAL_TIM_PWM_Start+0x10e>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800537c:	d013      	beq.n	80053a6 <HAL_TIM_PWM_Start+0x10e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a19      	ldr	r2, [pc, #100]	@ (80053e8 <HAL_TIM_PWM_Start+0x150>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00e      	beq.n	80053a6 <HAL_TIM_PWM_Start+0x10e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a17      	ldr	r2, [pc, #92]	@ (80053ec <HAL_TIM_PWM_Start+0x154>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d009      	beq.n	80053a6 <HAL_TIM_PWM_Start+0x10e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a16      	ldr	r2, [pc, #88]	@ (80053f0 <HAL_TIM_PWM_Start+0x158>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d004      	beq.n	80053a6 <HAL_TIM_PWM_Start+0x10e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a14      	ldr	r2, [pc, #80]	@ (80053f4 <HAL_TIM_PWM_Start+0x15c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d111      	bne.n	80053ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d010      	beq.n	80053da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c8:	e007      	b.n	80053da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40014000 	.word	0x40014000

080053f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005412:	2302      	movs	r3, #2
 8005414:	e0ae      	b.n	8005574 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b0c      	cmp	r3, #12
 8005422:	f200 809f 	bhi.w	8005564 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	08005461 	.word	0x08005461
 8005430:	08005565 	.word	0x08005565
 8005434:	08005565 	.word	0x08005565
 8005438:	08005565 	.word	0x08005565
 800543c:	080054a1 	.word	0x080054a1
 8005440:	08005565 	.word	0x08005565
 8005444:	08005565 	.word	0x08005565
 8005448:	08005565 	.word	0x08005565
 800544c:	080054e3 	.word	0x080054e3
 8005450:	08005565 	.word	0x08005565
 8005454:	08005565 	.word	0x08005565
 8005458:	08005565 	.word	0x08005565
 800545c:	08005523 	.word	0x08005523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f9d6 	bl	8005818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0208 	orr.w	r2, r2, #8
 800547a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0204 	bic.w	r2, r2, #4
 800548a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6999      	ldr	r1, [r3, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	619a      	str	r2, [r3, #24]
      break;
 800549e:	e064      	b.n	800556a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fa1c 	bl	80058e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6999      	ldr	r1, [r3, #24]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	619a      	str	r2, [r3, #24]
      break;
 80054e0:	e043      	b.n	800556a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fa67 	bl	80059bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0208 	orr.w	r2, r2, #8
 80054fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0204 	bic.w	r2, r2, #4
 800550c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69d9      	ldr	r1, [r3, #28]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	61da      	str	r2, [r3, #28]
      break;
 8005520:	e023      	b.n	800556a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fab1 	bl	8005a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800553c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800554c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69d9      	ldr	r1, [r3, #28]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	021a      	lsls	r2, r3, #8
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	61da      	str	r2, [r3, #28]
      break;
 8005562:	e002      	b.n	800556a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75fb      	strb	r3, [r7, #23]
      break;
 8005568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005572:	7dfb      	ldrb	r3, [r7, #23]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_TIM_ConfigClockSource+0x1c>
 8005594:	2302      	movs	r3, #2
 8005596:	e0b4      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x186>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d0:	d03e      	beq.n	8005650 <HAL_TIM_ConfigClockSource+0xd4>
 80055d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d6:	f200 8087 	bhi.w	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055de:	f000 8086 	beq.w	80056ee <HAL_TIM_ConfigClockSource+0x172>
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e6:	d87f      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b70      	cmp	r3, #112	@ 0x70
 80055ea:	d01a      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0xa6>
 80055ec:	2b70      	cmp	r3, #112	@ 0x70
 80055ee:	d87b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f0:	2b60      	cmp	r3, #96	@ 0x60
 80055f2:	d050      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x11a>
 80055f4:	2b60      	cmp	r3, #96	@ 0x60
 80055f6:	d877      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b50      	cmp	r3, #80	@ 0x50
 80055fa:	d03c      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0xfa>
 80055fc:	2b50      	cmp	r3, #80	@ 0x50
 80055fe:	d873      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b40      	cmp	r3, #64	@ 0x40
 8005602:	d058      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d86f      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b30      	cmp	r3, #48	@ 0x30
 800560a:	d064      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 800560c:	2b30      	cmp	r3, #48	@ 0x30
 800560e:	d86b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b20      	cmp	r3, #32
 8005612:	d060      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005614:	2b20      	cmp	r3, #32
 8005616:	d867      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d05c      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 800561c:	2b10      	cmp	r3, #16
 800561e:	d05a      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005620:	e062      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005632:	f000 faf7 	bl	8005c24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	609a      	str	r2, [r3, #8]
      break;
 800564e:	e04f      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005660:	f000 fae0 	bl	8005c24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005672:	609a      	str	r2, [r3, #8]
      break;
 8005674:	e03c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	461a      	mov	r2, r3
 8005684:	f000 fa54 	bl	8005b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2150      	movs	r1, #80	@ 0x50
 800568e:	4618      	mov	r0, r3
 8005690:	f000 faad 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 8005694:	e02c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 fa73 	bl	8005b8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2160      	movs	r1, #96	@ 0x60
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fa9d 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 80056b4:	e01c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 fa34 	bl	8005b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2140      	movs	r1, #64	@ 0x40
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fa8d 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 80056d4:	e00c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f000 fa84 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 80056e6:	e003      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e000      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a37      	ldr	r2, [pc, #220]	@ (80057fc <TIM_Base_SetConfig+0xf0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00f      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572a:	d00b      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a34      	ldr	r2, [pc, #208]	@ (8005800 <TIM_Base_SetConfig+0xf4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a33      	ldr	r2, [pc, #204]	@ (8005804 <TIM_Base_SetConfig+0xf8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a32      	ldr	r2, [pc, #200]	@ (8005808 <TIM_Base_SetConfig+0xfc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d108      	bne.n	8005756 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a28      	ldr	r2, [pc, #160]	@ (80057fc <TIM_Base_SetConfig+0xf0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01b      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005764:	d017      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a25      	ldr	r2, [pc, #148]	@ (8005800 <TIM_Base_SetConfig+0xf4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a24      	ldr	r2, [pc, #144]	@ (8005804 <TIM_Base_SetConfig+0xf8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00f      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a23      	ldr	r2, [pc, #140]	@ (8005808 <TIM_Base_SetConfig+0xfc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00b      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a22      	ldr	r2, [pc, #136]	@ (800580c <TIM_Base_SetConfig+0x100>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a21      	ldr	r2, [pc, #132]	@ (8005810 <TIM_Base_SetConfig+0x104>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a20      	ldr	r2, [pc, #128]	@ (8005814 <TIM_Base_SetConfig+0x108>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d108      	bne.n	80057a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a0c      	ldr	r2, [pc, #48]	@ (80057fc <TIM_Base_SetConfig+0xf0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d103      	bne.n	80057d6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f043 0204 	orr.w	r2, r3, #4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	601a      	str	r2, [r3, #0]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40010000 	.word	0x40010000
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40000c00 	.word	0x40000c00
 800580c:	40014000 	.word	0x40014000
 8005810:	40014400 	.word	0x40014400
 8005814:	40014800 	.word	0x40014800

08005818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	f023 0201 	bic.w	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f023 0302 	bic.w	r3, r3, #2
 8005860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a1c      	ldr	r2, [pc, #112]	@ (80058e0 <TIM_OC1_SetConfig+0xc8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d10c      	bne.n	800588e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 0308 	bic.w	r3, r3, #8
 800587a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 0304 	bic.w	r3, r3, #4
 800588c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <TIM_OC1_SetConfig+0xc8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d111      	bne.n	80058ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800589c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40010000 	.word	0x40010000

080058e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	f023 0210 	bic.w	r2, r3, #16
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800591a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0320 	bic.w	r3, r3, #32
 800592e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a1e      	ldr	r2, [pc, #120]	@ (80059b8 <TIM_OC2_SetConfig+0xd4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d10d      	bne.n	8005960 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800594a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800595e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a15      	ldr	r2, [pc, #84]	@ (80059b8 <TIM_OC2_SetConfig+0xd4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d113      	bne.n	8005990 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800596e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005976:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4313      	orrs	r3, r2
 8005982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	621a      	str	r2, [r3, #32]
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40010000 	.word	0x40010000

080059bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a1d      	ldr	r2, [pc, #116]	@ (8005a8c <TIM_OC3_SetConfig+0xd0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d10d      	bne.n	8005a36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a14      	ldr	r2, [pc, #80]	@ (8005a8c <TIM_OC3_SetConfig+0xd0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d113      	bne.n	8005a66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	621a      	str	r2, [r3, #32]
}
 8005a80:	bf00      	nop
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	40010000 	.word	0x40010000

08005a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	031b      	lsls	r3, r3, #12
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a10      	ldr	r2, [pc, #64]	@ (8005b2c <TIM_OC4_SetConfig+0x9c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d109      	bne.n	8005b04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005af6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	019b      	lsls	r3, r3, #6
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40010000 	.word	0x40010000

08005b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0201 	bic.w	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 030a 	bic.w	r3, r3, #10
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	621a      	str	r2, [r3, #32]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f023 0210 	bic.w	r2, r3, #16
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f043 0307 	orr.w	r3, r3, #7
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	609a      	str	r2, [r3, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	021a      	lsls	r2, r3, #8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f003 031f 	and.w	r3, r3, #31
 8005c76:	2201      	movs	r2, #1
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	43db      	mvns	r3, r3
 8005c86:	401a      	ands	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a1a      	ldr	r2, [r3, #32]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f003 031f 	and.w	r3, r3, #31
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e050      	b.n	8005d6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1c      	ldr	r2, [pc, #112]	@ (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d018      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d14:	d013      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a18      	ldr	r2, [pc, #96]	@ (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a16      	ldr	r2, [pc, #88]	@ (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a15      	ldr	r2, [pc, #84]	@ (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a13      	ldr	r2, [pc, #76]	@ (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10c      	bne.n	8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00
 8005d88:	40014000 	.word	0x40014000

08005d8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	f107 001c 	add.w	r0, r7, #28
 8005d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d123      	bne.n	8005dee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005dba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d105      	bne.n	8005de2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f9dc 	bl	80061a0 <USB_CoreReset>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e01b      	b.n	8005e26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f9d0 	bl	80061a0 <USB_CoreReset>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e18:	e005      	b.n	8005e26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e26:	7fbb      	ldrb	r3, [r7, #30]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d10b      	bne.n	8005e44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f043 0206 	orr.w	r2, r3, #6
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f043 0220 	orr.w	r2, r3, #32
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e50:	b004      	add	sp, #16
 8005e52:	4770      	bx	lr

08005e54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f043 0201 	orr.w	r2, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f023 0201 	bic.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d115      	bne.n	8005ee6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ec6:	200a      	movs	r0, #10
 8005ec8:	f7fb f916 	bl	80010f8 <HAL_Delay>
      ms += 10U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	330a      	adds	r3, #10
 8005ed0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f956 	bl	8006184 <USB_GetMode>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d01e      	beq.n	8005f1c <USB_SetCurrentMode+0x84>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ee2:	d9f0      	bls.n	8005ec6 <USB_SetCurrentMode+0x2e>
 8005ee4:	e01a      	b.n	8005f1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d115      	bne.n	8005f18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ef8:	200a      	movs	r0, #10
 8005efa:	f7fb f8fd 	bl	80010f8 <HAL_Delay>
      ms += 10U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	330a      	adds	r3, #10
 8005f02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f93d 	bl	8006184 <USB_GetMode>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <USB_SetCurrentMode+0x84>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f14:	d9f0      	bls.n	8005ef8 <USB_SetCurrentMode+0x60>
 8005f16:	e001      	b.n	8005f1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e005      	b.n	8005f28 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005f20:	d101      	bne.n	8005f26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f4a:	d901      	bls.n	8005f50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e01b      	b.n	8005f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	daf2      	bge.n	8005f3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	019b      	lsls	r3, r3, #6
 8005f60:	f043 0220 	orr.w	r2, r3, #32
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f74:	d901      	bls.n	8005f7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e006      	b.n	8005f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d0f0      	beq.n	8005f68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fac:	d901      	bls.n	8005fb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e018      	b.n	8005fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	daf2      	bge.n	8005fa0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2210      	movs	r2, #16
 8005fc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fd0:	d901      	bls.n	8005fd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e006      	b.n	8005fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d0f0      	beq.n	8005fc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	@ 0x24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	460b      	mov	r3, r1
 8006000:	71fb      	strb	r3, [r7, #7]
 8006002:	4613      	mov	r3, r2
 8006004:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800600e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006012:	2b00      	cmp	r3, #0
 8006014:	d123      	bne.n	800605e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006016:	88bb      	ldrh	r3, [r7, #4]
 8006018:	3303      	adds	r3, #3
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800601e:	2300      	movs	r3, #0
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	e018      	b.n	8006056 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	031a      	lsls	r2, r3, #12
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	4413      	add	r3, r2
 800602c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006030:	461a      	mov	r2, r3
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	3301      	adds	r3, #1
 800603c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	3301      	adds	r3, #1
 8006042:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	3301      	adds	r3, #1
 8006048:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	3301      	adds	r3, #1
 800604e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	3301      	adds	r3, #1
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	429a      	cmp	r2, r3
 800605c:	d3e2      	bcc.n	8006024 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3724      	adds	r7, #36	@ 0x24
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800606c:	b480      	push	{r7}
 800606e:	b08b      	sub	sp, #44	@ 0x2c
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	089b      	lsrs	r3, r3, #2
 8006086:	b29b      	uxth	r3, r3
 8006088:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006092:	2300      	movs	r3, #0
 8006094:	623b      	str	r3, [r7, #32]
 8006096:	e014      	b.n	80060c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a6:	3301      	adds	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	3301      	adds	r3, #1
 80060ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b2:	3301      	adds	r3, #1
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	3301      	adds	r3, #1
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	3301      	adds	r3, #1
 80060c0:	623b      	str	r3, [r7, #32]
 80060c2:	6a3a      	ldr	r2, [r7, #32]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d3e6      	bcc.n	8006098 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060ca:	8bfb      	ldrh	r3, [r7, #30]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01e      	beq.n	800610e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060da:	461a      	mov	r2, r3
 80060dc:	f107 0310 	add.w	r3, r7, #16
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	701a      	strb	r2, [r3, #0]
      i++;
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	3301      	adds	r3, #1
 80060fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	3301      	adds	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006102:	8bfb      	ldrh	r3, [r7, #30]
 8006104:	3b01      	subs	r3, #1
 8006106:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006108:	8bfb      	ldrh	r3, [r7, #30]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1ea      	bne.n	80060e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006110:	4618      	mov	r0, r3
 8006112:	372c      	adds	r7, #44	@ 0x2c
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006176:	68bb      	ldr	r3, [r7, #8]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f003 0301 	and.w	r3, r3, #1
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3301      	adds	r3, #1
 80061b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061b8:	d901      	bls.n	80061be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e022      	b.n	8006204 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	daf2      	bge.n	80061ac <USB_CoreReset+0xc>

  count = 10U;
 80061c6:	230a      	movs	r3, #10
 80061c8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80061ca:	e002      	b.n	80061d2 <USB_CoreReset+0x32>
  {
    count--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1f9      	bne.n	80061cc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f043 0201 	orr.w	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061f0:	d901      	bls.n	80061f6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e006      	b.n	8006204 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d0f0      	beq.n	80061e4 <USB_CoreReset+0x44>

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006210:	b084      	sub	sp, #16
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800621e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006230:	461a      	mov	r2, r3
 8006232:	2300      	movs	r3, #0
 8006234:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006246:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006252:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d119      	bne.n	800629a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006266:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800626a:	2b01      	cmp	r3, #1
 800626c:	d10a      	bne.n	8006284 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800627c:	f043 0304 	orr.w	r3, r3, #4
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e014      	b.n	80062ae <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006292:	f023 0304 	bic.w	r3, r3, #4
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	e009      	b.n	80062ae <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80062a8:	f023 0304 	bic.w	r3, r3, #4
 80062ac:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062ae:	2110      	movs	r1, #16
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fe3d 	bl	8005f30 <USB_FlushTxFifo>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff fe67 	bl	8005f94 <USB_FlushRxFifo>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80062d0:	2300      	movs	r3, #0
 80062d2:	613b      	str	r3, [r7, #16]
 80062d4:	e015      	b.n	8006302 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e2:	461a      	mov	r2, r3
 80062e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062e8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062f6:	461a      	mov	r2, r3
 80062f8:	2300      	movs	r3, #0
 80062fa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	3301      	adds	r3, #1
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006306:	461a      	mov	r2, r3
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	4293      	cmp	r3, r2
 800630c:	d3e3      	bcc.n	80062d6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800631a:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2280      	movs	r2, #128	@ 0x80
 8006320:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a0e      	ldr	r2, [pc, #56]	@ (8006360 <USB_HostInit+0x150>)
 8006326:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a0e      	ldr	r2, [pc, #56]	@ (8006364 <USB_HostInit+0x154>)
 800632c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006330:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006334:	2b00      	cmp	r3, #0
 8006336:	d105      	bne.n	8006344 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f043 0210 	orr.w	r2, r3, #16
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699a      	ldr	r2, [r3, #24]
 8006348:	4b07      	ldr	r3, [pc, #28]	@ (8006368 <USB_HostInit+0x158>)
 800634a:	4313      	orrs	r3, r2
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800635c:	b004      	add	sp, #16
 800635e:	4770      	bx	lr
 8006360:	00600080 	.word	0x00600080
 8006364:	004000e0 	.word	0x004000e0
 8006368:	a3200008 	.word	0xa3200008

0800636c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80063a4:	4313      	orrs	r3, r2
 80063a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d107      	bne.n	80063be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063b4:	461a      	mov	r2, r3
 80063b6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80063ba:	6053      	str	r3, [r2, #4]
 80063bc:	e00c      	b.n	80063d8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d107      	bne.n	80063d4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063ca:	461a      	mov	r2, r3
 80063cc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80063d0:	6053      	str	r3, [r2, #4]
 80063d2:	e001      	b.n	80063d8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006406:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006414:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006416:	2064      	movs	r0, #100	@ 0x64
 8006418:	f7fa fe6e 	bl	80010f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006428:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800642a:	200a      	movs	r0, #10
 800642c:	f7fa fe64 	bl	80010f8 <HAL_Delay>

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800645e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <USB_DriveVbus+0x44>
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006478:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800647c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006488:	d109      	bne.n	800649e <USB_DriveVbus+0x64>
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d106      	bne.n	800649e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800649c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	0c5b      	lsrs	r3, r3, #17
 80064ca:	f003 0303 	and.w	r3, r3, #3
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	b29b      	uxth	r3, r3
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	4603      	mov	r3, r0
 800650c:	70fb      	strb	r3, [r7, #3]
 800650e:	460b      	mov	r3, r1
 8006510:	70bb      	strb	r3, [r7, #2]
 8006512:	4613      	mov	r3, r2
 8006514:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800652a:	461a      	mov	r2, r3
 800652c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006530:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006532:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006536:	2b03      	cmp	r3, #3
 8006538:	d867      	bhi.n	800660a <USB_HC_Init+0x10e>
 800653a:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <USB_HC_Init+0x44>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006551 	.word	0x08006551
 8006544:	080065cd 	.word	0x080065cd
 8006548:	08006551 	.word	0x08006551
 800654c:	0800658f 	.word	0x0800658f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4413      	add	r3, r2
 8006558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800655c:	461a      	mov	r2, r3
 800655e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006562:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006564:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006568:	2b00      	cmp	r3, #0
 800656a:	da51      	bge.n	8006610 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	440a      	add	r2, r1
 8006582:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800658a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800658c:	e040      	b.n	8006610 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800659a:	461a      	mov	r2, r3
 800659c:	f240 639d 	movw	r3, #1693	@ 0x69d
 80065a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da34      	bge.n	8006614 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	78fa      	ldrb	r2, [r7, #3]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c8:	60d3      	str	r3, [r2, #12]
      }

      break;
 80065ca:	e023      	b.n	8006614 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d8:	461a      	mov	r2, r3
 80065da:	f240 2325 	movw	r3, #549	@ 0x225
 80065de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da17      	bge.n	8006618 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	78fa      	ldrb	r2, [r7, #3]
 80065f8:	0151      	lsls	r1, r2, #5
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	440a      	add	r2, r1
 80065fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006602:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006606:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006608:	e006      	b.n	8006618 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	77fb      	strb	r3, [r7, #31]
      break;
 800660e:	e004      	b.n	800661a <USB_HC_Init+0x11e>
      break;
 8006610:	bf00      	nop
 8006612:	e002      	b.n	800661a <USB_HC_Init+0x11e>
      break;
 8006614:	bf00      	nop
 8006616:	e000      	b.n	800661a <USB_HC_Init+0x11e>
      break;
 8006618:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	78fa      	ldrb	r2, [r7, #3]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	440a      	add	r2, r1
 8006642:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006646:	f043 0302 	orr.w	r3, r3, #2
 800664a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006652:	699a      	ldr	r2, [r3, #24]
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	2101      	movs	r1, #1
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	6939      	ldr	r1, [r7, #16]
 8006662:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006666:	4313      	orrs	r3, r2
 8006668:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006676:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800667a:	2b00      	cmp	r3, #0
 800667c:	da03      	bge.n	8006686 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800667e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e001      	b.n	800668a <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ff0e 	bl	80064ac <USB_GetHostSpeed>
 8006690:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006692:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006696:	2b02      	cmp	r3, #2
 8006698:	d106      	bne.n	80066a8 <USB_HC_Init+0x1ac>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d003      	beq.n	80066a8 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80066a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e001      	b.n	80066ac <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066ac:	787b      	ldrb	r3, [r7, #1]
 80066ae:	059b      	lsls	r3, r3, #22
 80066b0:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066b4:	78bb      	ldrb	r3, [r7, #2]
 80066b6:	02db      	lsls	r3, r3, #11
 80066b8:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80066c2:	049b      	lsls	r3, r3, #18
 80066c4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80066ca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80066cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066d0:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	431a      	orrs	r2, r3
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066da:	78fa      	ldrb	r2, [r7, #3]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80066e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066ea:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80066ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d003      	beq.n	80066fc <USB_HC_Init+0x200>
 80066f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d10f      	bne.n	800671c <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	78fa      	ldrb	r2, [r7, #3]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	440a      	add	r2, r1
 8006712:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006716:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800671a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800671c:	7ffb      	ldrb	r3, [r7, #31]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3720      	adds	r7, #32
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop

08006728 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08c      	sub	sp, #48	@ 0x30
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4613      	mov	r3, r2
 8006734:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006740:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006744:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	799b      	ldrb	r3, [r3, #6]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d158      	bne.n	8006800 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800674e:	2301      	movs	r3, #1
 8006750:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	78db      	ldrb	r3, [r3, #3]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800675a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	8a92      	ldrh	r2, [r2, #20]
 8006760:	fb03 f202 	mul.w	r2, r3, r2
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	61da      	str	r2, [r3, #28]
 8006768:	e079      	b.n	800685e <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	7c9b      	ldrb	r3, [r3, #18]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d130      	bne.n	80067d4 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	2bbc      	cmp	r3, #188	@ 0xbc
 8006778:	d918      	bls.n	80067ac <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	8a9b      	ldrh	r3, [r3, #20]
 800677e:	461a      	mov	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d003      	beq.n	800679c <USB_HC_StartXfer+0x74>
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d103      	bne.n	80067a4 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2202      	movs	r2, #2
 80067a0:	60da      	str	r2, [r3, #12]
 80067a2:	e05c      	b.n	800685e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2201      	movs	r2, #1
 80067a8:	60da      	str	r2, [r3, #12]
 80067aa:	e058      	b.n	800685e <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	6a1a      	ldr	r2, [r3, #32]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d007      	beq.n	80067cc <USB_HC_StartXfer+0xa4>
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d003      	beq.n	80067cc <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2204      	movs	r2, #4
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	e048      	b.n	800685e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2203      	movs	r2, #3
 80067d0:	60da      	str	r2, [r3, #12]
 80067d2:	e044      	b.n	800685e <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80067d4:	79fb      	ldrb	r3, [r7, #7]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d10d      	bne.n	80067f6 <USB_HC_StartXfer+0xce>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	8a92      	ldrh	r2, [r2, #20]
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d907      	bls.n	80067f6 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	8a92      	ldrh	r2, [r2, #20]
 80067ec:	fb03 f202 	mul.w	r2, r3, r2
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	61da      	str	r2, [r3, #28]
 80067f4:	e033      	b.n	800685e <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6a1a      	ldr	r2, [r3, #32]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	61da      	str	r2, [r3, #28]
 80067fe:	e02e      	b.n	800685e <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d018      	beq.n	800683a <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	8a92      	ldrh	r2, [r2, #20]
 8006810:	4413      	add	r3, r2
 8006812:	3b01      	subs	r3, #1
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	8a92      	ldrh	r2, [r2, #20]
 8006818:	fbb3 f3f2 	udiv	r3, r3, r2
 800681c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800681e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006820:	8b7b      	ldrh	r3, [r7, #26]
 8006822:	429a      	cmp	r2, r3
 8006824:	d90b      	bls.n	800683e <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8006826:	8b7b      	ldrh	r3, [r7, #26]
 8006828:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800682a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	8a92      	ldrh	r2, [r2, #20]
 8006830:	fb03 f202 	mul.w	r2, r3, r2
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	61da      	str	r2, [r3, #28]
 8006838:	e001      	b.n	800683e <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800683a:	2301      	movs	r3, #1
 800683c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	78db      	ldrb	r3, [r3, #3]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006846:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	8a92      	ldrh	r2, [r2, #20]
 800684c:	fb03 f202 	mul.w	r2, r3, r2
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	61da      	str	r2, [r3, #28]
 8006854:	e003      	b.n	800685e <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6a1a      	ldr	r2, [r3, #32]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006866:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006868:	04d9      	lsls	r1, r3, #19
 800686a:	4ba4      	ldr	r3, [pc, #656]	@ (8006afc <USB_HC_StartXfer+0x3d4>)
 800686c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800686e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	7d9b      	ldrb	r3, [r3, #22]
 8006874:	075b      	lsls	r3, r3, #29
 8006876:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800687a:	69f9      	ldr	r1, [r7, #28]
 800687c:	0148      	lsls	r0, r1, #5
 800687e:	6a39      	ldr	r1, [r7, #32]
 8006880:	4401      	add	r1, r0
 8006882:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006886:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006888:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d009      	beq.n	80068a4 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6999      	ldr	r1, [r3, #24]
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	4413      	add	r3, r2
 800689c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a0:	460a      	mov	r2, r1
 80068a2:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	bf0c      	ite	eq
 80068b4:	2301      	moveq	r3, #1
 80068b6:	2300      	movne	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	6a3a      	ldr	r2, [r7, #32]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80068da:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	7e7b      	ldrb	r3, [r7, #25]
 80068ec:	075b      	lsls	r3, r3, #29
 80068ee:	69f9      	ldr	r1, [r7, #28]
 80068f0:	0148      	lsls	r0, r1, #5
 80068f2:	6a39      	ldr	r1, [r7, #32]
 80068f4:	4401      	add	r1, r0
 80068f6:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80068fa:	4313      	orrs	r3, r2
 80068fc:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	799b      	ldrb	r3, [r3, #6]
 8006902:	2b01      	cmp	r3, #1
 8006904:	f040 80c4 	bne.w	8006a90 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	7c5b      	ldrb	r3, [r3, #17]
 800690c:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006912:	4313      	orrs	r3, r2
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	0151      	lsls	r1, r2, #5
 8006918:	6a3a      	ldr	r2, [r7, #32]
 800691a:	440a      	add	r2, r1
 800691c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006920:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006924:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	4413      	add	r3, r2
 800692e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	0151      	lsls	r1, r2, #5
 8006938:	6a3a      	ldr	r2, [r7, #32]
 800693a:	440a      	add	r2, r1
 800693c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006940:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006944:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	79db      	ldrb	r3, [r3, #7]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d123      	bne.n	8006996 <USB_HC_StartXfer+0x26e>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	78db      	ldrb	r3, [r3, #3]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d11f      	bne.n	8006996 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	6a3a      	ldr	r2, [r7, #32]
 800696a:	440a      	add	r2, r1
 800696c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006974:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	6a3a      	ldr	r2, [r7, #32]
 800698a:	440a      	add	r2, r1
 800698c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006994:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	7c9b      	ldrb	r3, [r3, #18]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d003      	beq.n	80069a6 <USB_HC_StartXfer+0x27e>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	7c9b      	ldrb	r3, [r3, #18]
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d117      	bne.n	80069d6 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d113      	bne.n	80069d6 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	78db      	ldrb	r3, [r3, #3]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d10f      	bne.n	80069d6 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	6a3a      	ldr	r2, [r7, #32]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069d4:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	7c9b      	ldrb	r3, [r3, #18]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d163      	bne.n	8006aa6 <USB_HC_StartXfer+0x37e>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	78db      	ldrb	r3, [r3, #3]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d15f      	bne.n	8006aa6 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d859      	bhi.n	8006aa4 <USB_HC_StartXfer+0x37c>
 80069f0:	a201      	add	r2, pc, #4	@ (adr r2, 80069f8 <USB_HC_StartXfer+0x2d0>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a09 	.word	0x08006a09
 80069fc:	08006a2b 	.word	0x08006a2b
 8006a00:	08006a4d 	.word	0x08006a4d
 8006a04:	08006a6f 	.word	0x08006a6f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a26:	6053      	str	r3, [r2, #4]
          break;
 8006a28:	e03d      	b.n	8006aa6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	6a3a      	ldr	r2, [r7, #32]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a44:	f043 030e 	orr.w	r3, r3, #14
 8006a48:	6053      	str	r3, [r2, #4]
          break;
 8006a4a:	e02c      	b.n	8006aa6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	6a3a      	ldr	r2, [r7, #32]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a6a:	6053      	str	r3, [r2, #4]
          break;
 8006a6c:	e01b      	b.n	8006aa6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a8c:	6053      	str	r3, [r2, #4]
          break;
 8006a8e:	e00a      	b.n	8006aa6 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	6053      	str	r3, [r2, #4]
 8006aa2:	e000      	b.n	8006aa6 <USB_HC_StartXfer+0x37e>
          break;
 8006aa4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006abc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	78db      	ldrb	r3, [r3, #3]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	e003      	b.n	8006ad8 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ad6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ade:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aec:	461a      	mov	r2, r3
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e055      	b.n	8006ba8 <USB_HC_StartXfer+0x480>
 8006afc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	78db      	ldrb	r3, [r3, #3]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d14e      	bne.n	8006ba6 <USB_HC_StartXfer+0x47e>
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d04a      	beq.n	8006ba6 <USB_HC_StartXfer+0x47e>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	79db      	ldrb	r3, [r3, #7]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d146      	bne.n	8006ba6 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	7c9b      	ldrb	r3, [r3, #18]
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d831      	bhi.n	8006b84 <USB_HC_StartXfer+0x45c>
 8006b20:	a201      	add	r2, pc, #4	@ (adr r2, 8006b28 <USB_HC_StartXfer+0x400>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b39 	.word	0x08006b39
 8006b2c:	08006b5d 	.word	0x08006b5d
 8006b30:	08006b39 	.word	0x08006b39
 8006b34:	08006b5d 	.word	0x08006b5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	3303      	adds	r3, #3
 8006b3e:	089b      	lsrs	r3, r3, #2
 8006b40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b42:	8afa      	ldrh	r2, [r7, #22]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d91c      	bls.n	8006b88 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f043 0220 	orr.w	r2, r3, #32
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b5a:	e015      	b.n	8006b88 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	3303      	adds	r3, #3
 8006b62:	089b      	lsrs	r3, r3, #2
 8006b64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006b66:	8afa      	ldrh	r2, [r7, #22]
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d90a      	bls.n	8006b8c <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b82:	e003      	b.n	8006b8c <USB_HC_StartXfer+0x464>

      default:
        break;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <USB_HC_StartXfer+0x466>
        break;
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <USB_HC_StartXfer+0x466>
        break;
 8006b8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6999      	ldr	r1, [r3, #24]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	785a      	ldrb	r2, [r3, #1]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	9000      	str	r0, [sp, #0]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff fa25 	bl	8005ff0 <USB_WritePacket>
  }

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3728      	adds	r7, #40	@ 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	b29b      	uxth	r3, r3
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b089      	sub	sp, #36	@ 0x24
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	0c9b      	lsrs	r3, r3, #18
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	0fdb      	lsrs	r3, r3, #31
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	0fdb      	lsrs	r3, r3, #31
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d10d      	bne.n	8006c54 <USB_HC_Halt+0x82>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <USB_HC_Halt+0x82>
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d002      	beq.n	8006c50 <USB_HC_Halt+0x7e>
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d101      	bne.n	8006c54 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e0d8      	b.n	8006e06 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <USB_HC_Halt+0x8e>
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d173      	bne.n	8006d48 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	0151      	lsls	r1, r2, #5
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	440a      	add	r2, r1
 8006c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c7e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d14a      	bne.n	8006d22 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d133      	bne.n	8006d00 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	69fa      	ldr	r2, [r7, #28]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cb6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cd6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ce4:	d82e      	bhi.n	8006d44 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cfc:	d0ec      	beq.n	8006cd8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cfe:	e081      	b.n	8006e04 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d1e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d20:	e070      	b.n	8006e04 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d42:	e05f      	b.n	8006e04 <USB_HC_Halt+0x232>
            break;
 8006d44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d46:	e05d      	b.n	8006e04 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d133      	bne.n	8006de0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006db2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006db6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dc4:	d81d      	bhi.n	8006e02 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ddc:	d0ec      	beq.n	8006db8 <USB_HC_Halt+0x1e6>
 8006dde:	e011      	b.n	8006e04 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dfa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	e000      	b.n	8006e04 <USB_HC_Halt+0x232>
          break;
 8006e02:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3724      	adds	r7, #36	@ 0x24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b088      	sub	sp, #32
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff f825 	bl	8005e76 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e2c:	2110      	movs	r1, #16
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff f87e 	bl	8005f30 <USB_FlushTxFifo>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff f8a8 	bl	8005f94 <USB_FlushRxFifo>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	e01f      	b.n	8006e94 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e6a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e72:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e7a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e88:	461a      	mov	r2, r3
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	3301      	adds	r3, #1
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b0f      	cmp	r3, #15
 8006e98:	d9dc      	bls.n	8006e54 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	e034      	b.n	8006f0a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006eb6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ebe:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ec6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ee6:	d80c      	bhi.n	8006f02 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006efe:	d0ec      	beq.n	8006eda <USB_StopHost+0xc8>
 8006f00:	e000      	b.n	8006f04 <USB_StopHost+0xf2>
        break;
 8006f02:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	3301      	adds	r3, #1
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b0f      	cmp	r3, #15
 8006f0e:	d9c7      	bls.n	8006ea0 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f16:	461a      	mov	r2, r3
 8006f18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f1c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f24:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fe ff94 	bl	8005e54 <USB_EnableGlobalInt>

  return ret;
 8006f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3720      	adds	r7, #32
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006f36:	b590      	push	{r4, r7, lr}
 8006f38:	b089      	sub	sp, #36	@ 0x24
 8006f3a:	af04      	add	r7, sp, #16
 8006f3c:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006f3e:	2301      	movs	r3, #1
 8006f40:	2202      	movs	r2, #2
 8006f42:	2102      	movs	r1, #2
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fc84 	bl	8007852 <USBH_FindInterface>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	2bff      	cmp	r3, #255	@ 0xff
 8006f52:	d002      	beq.n	8006f5a <USBH_CDC_InterfaceInit+0x24>
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d901      	bls.n	8006f5e <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e13d      	b.n	80071da <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fc59 	bl	800781a <USBH_SelectInterface>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006f72:	2302      	movs	r3, #2
 8006f74:	e131      	b.n	80071da <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006f7c:	2050      	movs	r0, #80	@ 0x50
 8006f7e:	f002 fb59 	bl	8009634 <malloc>
 8006f82:	4603      	mov	r3, r0
 8006f84:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006f96:	2302      	movs	r3, #2
 8006f98:	e11f      	b.n	80071da <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006f9a:	2250      	movs	r2, #80	@ 0x50
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	68b8      	ldr	r0, [r7, #8]
 8006fa0:	f002 fc06 	bl	80097b0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	211a      	movs	r1, #26
 8006faa:	fb01 f303 	mul.w	r3, r1, r3
 8006fae:	4413      	add	r3, r2
 8006fb0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	b25b      	sxtb	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	da15      	bge.n	8006fe8 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	211a      	movs	r1, #26
 8006fc2:	fb01 f303 	mul.w	r3, r1, r3
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006fcc:	781a      	ldrb	r2, [r3, #0]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	211a      	movs	r1, #26
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006fe2:	881a      	ldrh	r2, [r3, #0]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 ffc5 	bl	8008f7e <USBH_AllocPipe>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	7819      	ldrb	r1, [r3, #0]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	7858      	ldrb	r0, [r3, #1]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	8952      	ldrh	r2, [r2, #10]
 8007014:	9202      	str	r2, [sp, #8]
 8007016:	2203      	movs	r2, #3
 8007018:	9201      	str	r2, [sp, #4]
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	4623      	mov	r3, r4
 800701e:	4602      	mov	r2, r0
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f001 ff7d 	bl	8008f20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2200      	movs	r2, #0
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f002 fa7a 	bl	8009528 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007034:	2300      	movs	r3, #0
 8007036:	2200      	movs	r2, #0
 8007038:	210a      	movs	r1, #10
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fc09 	bl	8007852 <USBH_FindInterface>
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	2bff      	cmp	r3, #255	@ 0xff
 8007048:	d002      	beq.n	8007050 <USBH_CDC_InterfaceInit+0x11a>
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d901      	bls.n	8007054 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007050:	2302      	movs	r3, #2
 8007052:	e0c2      	b.n	80071da <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	211a      	movs	r1, #26
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	4413      	add	r3, r2
 8007060:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	b25b      	sxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	da16      	bge.n	800709a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	211a      	movs	r1, #26
 8007072:	fb01 f303 	mul.w	r3, r1, r3
 8007076:	4413      	add	r3, r2
 8007078:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	211a      	movs	r1, #26
 8007088:	fb01 f303 	mul.w	r3, r1, r3
 800708c:	4413      	add	r3, r2
 800708e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007092:	881a      	ldrh	r2, [r3, #0]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	835a      	strh	r2, [r3, #26]
 8007098:	e015      	b.n	80070c6 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	211a      	movs	r1, #26
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	4413      	add	r3, r2
 80070a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80070aa:	781a      	ldrb	r2, [r3, #0]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	211a      	movs	r1, #26
 80070b6:	fb01 f303 	mul.w	r3, r1, r3
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80070c0:	881a      	ldrh	r2, [r3, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	211a      	movs	r1, #26
 80070cc:	fb01 f303 	mul.w	r3, r1, r3
 80070d0:	4413      	add	r3, r2
 80070d2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	b25b      	sxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da16      	bge.n	800710c <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	211a      	movs	r1, #26
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	4413      	add	r3, r2
 80070ea:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	211a      	movs	r1, #26
 80070fa:	fb01 f303 	mul.w	r3, r1, r3
 80070fe:	4413      	add	r3, r2
 8007100:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007104:	881a      	ldrh	r2, [r3, #0]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	835a      	strh	r2, [r3, #26]
 800710a:	e015      	b.n	8007138 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	211a      	movs	r1, #26
 8007112:	fb01 f303 	mul.w	r3, r1, r3
 8007116:	4413      	add	r3, r2
 8007118:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800711c:	781a      	ldrb	r2, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	211a      	movs	r1, #26
 8007128:	fb01 f303 	mul.w	r3, r1, r3
 800712c:	4413      	add	r3, r2
 800712e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007132:	881a      	ldrh	r2, [r3, #0]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	7b9b      	ldrb	r3, [r3, #14]
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 ff1d 	bl	8008f7e <USBH_AllocPipe>
 8007144:	4603      	mov	r3, r0
 8007146:	461a      	mov	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	7bdb      	ldrb	r3, [r3, #15]
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 ff13 	bl	8008f7e <USBH_AllocPipe>
 8007158:	4603      	mov	r3, r0
 800715a:	461a      	mov	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	7b59      	ldrb	r1, [r3, #13]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	7b98      	ldrb	r0, [r3, #14]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	8b12      	ldrh	r2, [r2, #24]
 8007178:	9202      	str	r2, [sp, #8]
 800717a:	2202      	movs	r2, #2
 800717c:	9201      	str	r2, [sp, #4]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4623      	mov	r3, r4
 8007182:	4602      	mov	r2, r0
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 fecb 	bl	8008f20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	7b19      	ldrb	r1, [r3, #12]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	7bd8      	ldrb	r0, [r3, #15]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	8b52      	ldrh	r2, [r2, #26]
 80071a2:	9202      	str	r2, [sp, #8]
 80071a4:	2202      	movs	r2, #2
 80071a6:	9201      	str	r2, [sp, #4]
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	4623      	mov	r3, r4
 80071ac:	4602      	mov	r2, r0
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 feb6 	bl	8008f20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	7b5b      	ldrb	r3, [r3, #13]
 80071c0:	2200      	movs	r2, #0
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f002 f9af 	bl	8009528 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	7b1b      	ldrb	r3, [r3, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f002 f9a8 	bl	8009528 <USBH_LL_SetToggle>

  return USBH_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd90      	pop	{r4, r7, pc}

080071e2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00e      	beq.n	800721a <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 feab 	bl	8008f5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fed6 	bl	8008fc0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	7b1b      	ldrb	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00e      	beq.n	8007240 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	7b1b      	ldrb	r3, [r3, #12]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fe98 	bl	8008f5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	7b1b      	ldrb	r3, [r3, #12]
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fec3 	bl	8008fc0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	7b5b      	ldrb	r3, [r3, #13]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00e      	beq.n	8007266 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	7b5b      	ldrb	r3, [r3, #13]
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 fe85 	bl	8008f5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	7b5b      	ldrb	r3, [r3, #13]
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 feb0 	bl	8008fc0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	4618      	mov	r0, r3
 800727c:	f002 f9e2 	bl	8009644 <free>
    phost->pActiveClass->pData = 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007286:	2200      	movs	r2, #0
 8007288:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3340      	adds	r3, #64	@ 0x40
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f8b2 	bl	8007416 <GetLineCoding>
 80072b2:	4603      	mov	r3, r0
 80072b4:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d105      	bne.n	80072c8 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80072c2:	2102      	movs	r1, #2
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80072c8:	7afb      	ldrb	r3, [r7, #11]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d877      	bhi.n	80073e8 <USBH_CDC_Process+0x114>
 80072f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007300 <USBH_CDC_Process+0x2c>)
 80072fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fe:	bf00      	nop
 8007300:	08007315 	.word	0x08007315
 8007304:	0800731b 	.word	0x0800731b
 8007308:	0800734b 	.word	0x0800734b
 800730c:	080073bf 	.word	0x080073bf
 8007310:	080073cd 	.word	0x080073cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
      break;
 8007318:	e06d      	b.n	80073f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f897 	bl	8007454 <SetLineCoding>
 8007326:	4603      	mov	r3, r0
 8007328:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d104      	bne.n	800733a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007338:	e058      	b.n	80073ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d055      	beq.n	80073ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2204      	movs	r2, #4
 8007344:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007348:	e050      	b.n	80073ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	3340      	adds	r3, #64	@ 0x40
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f860 	bl	8007416 <GetLineCoding>
 8007356:	4603      	mov	r3, r0
 8007358:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d126      	bne.n	80073ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007372:	791b      	ldrb	r3, [r3, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d13b      	bne.n	80073f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007382:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007384:	429a      	cmp	r2, r3
 8007386:	d133      	bne.n	80073f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007392:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007394:	429a      	cmp	r2, r3
 8007396:	d12b      	bne.n	80073f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d124      	bne.n	80073f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f958 	bl	800765c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80073ac:	e020      	b.n	80073f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d01d      	beq.n	80073f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2204      	movs	r2, #4
 80073b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80073bc:	e018      	b.n	80073f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f867 	bl	8007492 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f8da 	bl	800757e <CDC_ProcessReception>
      break;
 80073ca:	e014      	b.n	80073f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80073cc:	2100      	movs	r1, #0
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f001 f81e 	bl	8008410 <USBH_ClrFeature>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80073e6:	e005      	b.n	80073f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80073e8:	bf00      	nop
 80073ea:	e004      	b.n	80073f6 <USBH_CDC_Process+0x122>
      break;
 80073ec:	bf00      	nop
 80073ee:	e002      	b.n	80073f6 <USBH_CDC_Process+0x122>
      break;
 80073f0:	bf00      	nop
 80073f2:	e000      	b.n	80073f6 <USBH_CDC_Process+0x122>
      break;
 80073f4:	bf00      	nop

  }

  return status;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	22a1      	movs	r2, #161	@ 0xa1
 8007424:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2221      	movs	r2, #33	@ 0x21
 800742a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2207      	movs	r2, #7
 800743c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2207      	movs	r2, #7
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 fb17 	bl	8008a78 <USBH_CtlReq>
 800744a:	4603      	mov	r3, r0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2221      	movs	r2, #33	@ 0x21
 8007462:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2207      	movs	r2, #7
 800747a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2207      	movs	r2, #7
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 faf8 	bl	8008a78 <USBH_CtlReq>
 8007488:	4603      	mov	r3, r0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af02      	add	r7, sp, #8
 8007498:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d002      	beq.n	80074b8 <CDC_ProcessTransmission+0x26>
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d023      	beq.n	80074fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80074b6:	e05e      	b.n	8007576 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	8b12      	ldrh	r2, [r2, #24]
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d90b      	bls.n	80074dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	69d9      	ldr	r1, [r3, #28]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8b1a      	ldrh	r2, [r3, #24]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	7b5b      	ldrb	r3, [r3, #13]
 80074d0:	2001      	movs	r0, #1
 80074d2:	9000      	str	r0, [sp, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 fce0 	bl	8008e9a <USBH_BulkSendData>
 80074da:	e00b      	b.n	80074f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	7b5b      	ldrb	r3, [r3, #13]
 80074ea:	2001      	movs	r0, #1
 80074ec:	9000      	str	r0, [sp, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 fcd3 	bl	8008e9a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80074fc:	e03b      	b.n	8007576 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	7b5b      	ldrb	r3, [r3, #13]
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 ffe5 	bl	80094d4 <USBH_LL_GetURBState>
 800750a:	4603      	mov	r3, r0
 800750c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800750e:	7afb      	ldrb	r3, [r7, #11]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d128      	bne.n	8007566 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	8b12      	ldrh	r2, [r2, #24]
 800751c:	4293      	cmp	r3, r2
 800751e:	d90e      	bls.n	800753e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	8b12      	ldrh	r2, [r2, #24]
 8007528:	1a9a      	subs	r2, r3, r2
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	8b12      	ldrh	r2, [r2, #24]
 8007536:	441a      	add	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	61da      	str	r2, [r3, #28]
 800753c:	e002      	b.n	8007544 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007548:	2b00      	cmp	r3, #0
 800754a:	d004      	beq.n	8007556 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007554:	e00e      	b.n	8007574 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f868 	bl	8007634 <USBH_CDC_TransmitCallback>
      break;
 8007564:	e006      	b.n	8007574 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007566:	7afb      	ldrb	r3, [r7, #11]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d103      	bne.n	8007574 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007574:	bf00      	nop
  }
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007590:	2300      	movs	r3, #0
 8007592:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800759a:	2b03      	cmp	r3, #3
 800759c:	d002      	beq.n	80075a4 <CDC_ProcessReception+0x26>
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d00e      	beq.n	80075c0 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80075a2:	e043      	b.n	800762c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	6a19      	ldr	r1, [r3, #32]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	8b5a      	ldrh	r2, [r3, #26]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	7b1b      	ldrb	r3, [r3, #12]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 fc97 	bl	8008ee4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2204      	movs	r2, #4
 80075ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80075be:	e035      	b.n	800762c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	7b1b      	ldrb	r3, [r3, #12]
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 ff84 	bl	80094d4 <USBH_LL_GetURBState>
 80075cc:	4603      	mov	r3, r0
 80075ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80075d0:	7cfb      	ldrb	r3, [r7, #19]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d129      	bne.n	800762a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	7b1b      	ldrb	r3, [r3, #12]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fef9 	bl	80093d4 <USBH_LL_GetLastXferSize>
 80075e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d016      	beq.n	800761c <CDC_ProcessReception+0x9e>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	8b5b      	ldrh	r3, [r3, #26]
 80075f2:	461a      	mov	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d110      	bne.n	800761c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1ad2      	subs	r2, r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	6a1a      	ldr	r2, [r3, #32]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	441a      	add	r2, r3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2203      	movs	r2, #3
 8007616:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800761a:	e006      	b.n	800762a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f80f 	bl	8007648 <USBH_CDC_ReceiveCallback>
      break;
 800762a:	bf00      	nop
  }
}
 800762c:	bf00      	nop
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007684:	2302      	movs	r3, #2
 8007686:	e029      	b.n	80076dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	79fa      	ldrb	r2, [r7, #7]
 800768c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f81f 	bl	80076e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f001 fdc9 	bl	800926c <USBH_LL_Init>

  return USBH_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e009      	b.n	8007706 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	33e0      	adds	r3, #224	@ 0xe0
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	2200      	movs	r2, #0
 80076fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3301      	adds	r3, #1
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b0f      	cmp	r3, #15
 800770a:	d9f2      	bls.n	80076f2 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e009      	b.n	8007726 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800771c:	2200      	movs	r2, #0
 800771e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3301      	adds	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800772c:	d3f1      	bcc.n	8007712 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2240      	movs	r2, #64	@ 0x40
 8007752:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	331c      	adds	r3, #28
 800777e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007782:	2100      	movs	r1, #0
 8007784:	4618      	mov	r0, r3
 8007786:	f002 f813 	bl	80097b0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f002 f80a 	bl	80097b0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80077a2:	2212      	movs	r2, #18
 80077a4:	2100      	movs	r1, #0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f002 f802 	bl	80097b0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80077b2:	223e      	movs	r2, #62	@ 0x3e
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 fffa 	bl	80097b0 <memset>

  return USBH_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d016      	beq.n	8007808 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10e      	bne.n	8007802 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80077ea:	1c59      	adds	r1, r3, #1
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	33de      	adds	r3, #222	@ 0xde
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	73fb      	strb	r3, [r7, #15]
 8007800:	e004      	b.n	800780c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007802:	2302      	movs	r3, #2
 8007804:	73fb      	strb	r3, [r7, #15]
 8007806:	e001      	b.n	800780c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007808:	2302      	movs	r3, #2
 800780a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800780c:	7bfb      	ldrb	r3, [r7, #15]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	460b      	mov	r3, r1
 8007824:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007830:	78fa      	ldrb	r2, [r7, #3]
 8007832:	429a      	cmp	r2, r3
 8007834:	d204      	bcs.n	8007840 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	78fa      	ldrb	r2, [r7, #3]
 800783a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800783e:	e001      	b.n	8007844 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007840:	2302      	movs	r3, #2
 8007842:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007852:	b480      	push	{r7}
 8007854:	b087      	sub	sp, #28
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	4608      	mov	r0, r1
 800785c:	4611      	mov	r1, r2
 800785e:	461a      	mov	r2, r3
 8007860:	4603      	mov	r3, r0
 8007862:	70fb      	strb	r3, [r7, #3]
 8007864:	460b      	mov	r3, r1
 8007866:	70bb      	strb	r3, [r7, #2]
 8007868:	4613      	mov	r3, r2
 800786a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007870:	2300      	movs	r3, #0
 8007872:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800787a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800787c:	e025      	b.n	80078ca <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	221a      	movs	r2, #26
 8007882:	fb02 f303 	mul.w	r3, r2, r3
 8007886:	3308      	adds	r3, #8
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	3302      	adds	r3, #2
 800788e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	795b      	ldrb	r3, [r3, #5]
 8007894:	78fa      	ldrb	r2, [r7, #3]
 8007896:	429a      	cmp	r2, r3
 8007898:	d002      	beq.n	80078a0 <USBH_FindInterface+0x4e>
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	2bff      	cmp	r3, #255	@ 0xff
 800789e:	d111      	bne.n	80078c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078a4:	78ba      	ldrb	r2, [r7, #2]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d002      	beq.n	80078b0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078aa:	78bb      	ldrb	r3, [r7, #2]
 80078ac:	2bff      	cmp	r3, #255	@ 0xff
 80078ae:	d109      	bne.n	80078c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078b4:	787a      	ldrb	r2, [r7, #1]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d002      	beq.n	80078c0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078ba:	787b      	ldrb	r3, [r7, #1]
 80078bc:	2bff      	cmp	r3, #255	@ 0xff
 80078be:	d101      	bne.n	80078c4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	e006      	b.n	80078d2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	3301      	adds	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d9d6      	bls.n	800787e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80078d0:	23ff      	movs	r3, #255	@ 0xff
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	371c      	adds	r7, #28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 fcfc 	bl	80092e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80078ec:	2101      	movs	r1, #1
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f001 fe03 	bl	80094fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af04      	add	r7, sp, #16
 8007906:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007908:	2302      	movs	r3, #2
 800790a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b01      	cmp	r3, #1
 800791a:	d102      	bne.n	8007922 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2203      	movs	r2, #3
 8007920:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b0b      	cmp	r3, #11
 800792a:	f200 81bc 	bhi.w	8007ca6 <USBH_Process+0x3a6>
 800792e:	a201      	add	r2, pc, #4	@ (adr r2, 8007934 <USBH_Process+0x34>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	08007965 	.word	0x08007965
 8007938:	08007997 	.word	0x08007997
 800793c:	08007a01 	.word	0x08007a01
 8007940:	08007c41 	.word	0x08007c41
 8007944:	08007ca7 	.word	0x08007ca7
 8007948:	08007aa1 	.word	0x08007aa1
 800794c:	08007be7 	.word	0x08007be7
 8007950:	08007ad7 	.word	0x08007ad7
 8007954:	08007af7 	.word	0x08007af7
 8007958:	08007b15 	.word	0x08007b15
 800795c:	08007b59 	.word	0x08007b59
 8007960:	08007c29 	.word	0x08007c29
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 819c 	beq.w	8007caa <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007978:	20c8      	movs	r0, #200	@ 0xc8
 800797a:	f001 fe08 	bl	800958e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 fd0d 	bl	800939e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007994:	e189      	b.n	8007caa <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d107      	bne.n	80079b2 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2202      	movs	r2, #2
 80079ae:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80079b0:	e18a      	b.n	8007cc8 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80079b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079bc:	d914      	bls.n	80079e8 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80079c4:	3301      	adds	r3, #1
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d903      	bls.n	80079e0 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	220d      	movs	r2, #13
 80079dc:	701a      	strb	r2, [r3, #0]
      break;
 80079de:	e173      	b.n	8007cc8 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
      break;
 80079e6:	e16f      	b.n	8007cc8 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80079ee:	f103 020a 	add.w	r2, r3, #10
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80079f8:	200a      	movs	r0, #10
 80079fa:	f001 fdc8 	bl	800958e <USBH_Delay>
      break;
 80079fe:	e163      	b.n	8007cc8 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a10:	2104      	movs	r1, #4
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007a16:	2064      	movs	r0, #100	@ 0x64
 8007a18:	f001 fdb9 	bl	800958e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fc97 	bl	8009350 <USBH_LL_GetSpeed>
 8007a22:	4603      	mov	r3, r0
 8007a24:	461a      	mov	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2205      	movs	r2, #5
 8007a30:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007a32:	2100      	movs	r1, #0
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 faa2 	bl	8008f7e <USBH_AllocPipe>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007a42:	2180      	movs	r1, #128	@ 0x80
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 fa9a 	bl	8008f7e <USBH_AllocPipe>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7919      	ldrb	r1, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a66:	9202      	str	r2, [sp, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	9201      	str	r2, [sp, #4]
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2280      	movs	r2, #128	@ 0x80
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fa54 	bl	8008f20 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	7959      	ldrb	r1, [r3, #5]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007a8c:	9202      	str	r2, [sp, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	9201      	str	r2, [sp, #4]
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4603      	mov	r3, r0
 8007a96:	2200      	movs	r2, #0
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 fa41 	bl	8008f20 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007a9e:	e113      	b.n	8007cc8 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f917 	bl	8007cd4 <USBH_HandleEnum>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f040 80fd 	bne.w	8007cae <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d103      	bne.n	8007ace <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2208      	movs	r2, #8
 8007aca:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007acc:	e0ef      	b.n	8007cae <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	701a      	strb	r2, [r3, #0]
      break;
 8007ad4:	e0eb      	b.n	8007cae <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 80e8 	beq.w	8007cb2 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ae8:	2101      	movs	r1, #1
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2208      	movs	r2, #8
 8007af2:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007af4:	e0dd      	b.n	8007cb2 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fc3f 	bl	8008382 <USBH_SetCfg>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 80d5 	bne.w	8007cb6 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2209      	movs	r2, #9
 8007b10:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007b12:	e0d0      	b.n	8007cb6 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d016      	beq.n	8007b50 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007b22:	2101      	movs	r1, #1
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc4f 	bl	80083c8 <USBH_SetFeature>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d103      	bne.n	8007b3e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	220a      	movs	r2, #10
 8007b3a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007b3c:	e0bd      	b.n	8007cba <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	f040 80b9 	bne.w	8007cba <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	220a      	movs	r2, #10
 8007b4c:	701a      	strb	r2, [r3, #0]
      break;
 8007b4e:	e0b4      	b.n	8007cba <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	220a      	movs	r2, #10
 8007b54:	701a      	strb	r2, [r3, #0]
      break;
 8007b56:	e0b0      	b.n	8007cba <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 80ad 	beq.w	8007cbe <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
 8007b70:	e016      	b.n	8007ba0 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007b72:	7bfa      	ldrb	r2, [r7, #15]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	32de      	adds	r2, #222	@ 0xde
 8007b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7c:	791a      	ldrb	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d108      	bne.n	8007b9a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007b88:	7bfa      	ldrb	r2, [r7, #15]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32de      	adds	r2, #222	@ 0xde
 8007b8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007b98:	e005      	b.n	8007ba6 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	73fb      	strb	r3, [r7, #15]
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0e5      	beq.n	8007b72 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d016      	beq.n	8007bde <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d109      	bne.n	8007bd6 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2206      	movs	r2, #6
 8007bc6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007bce:	2103      	movs	r1, #3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007bd4:	e073      	b.n	8007cbe <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	220d      	movs	r2, #13
 8007bda:	701a      	strb	r2, [r3, #0]
      break;
 8007bdc:	e06f      	b.n	8007cbe <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	220d      	movs	r2, #13
 8007be2:	701a      	strb	r2, [r3, #0]
      break;
 8007be4:	e06b      	b.n	8007cbe <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d017      	beq.n	8007c20 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	4798      	blx	r3
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	220b      	movs	r2, #11
 8007c0c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007c0e:	e058      	b.n	8007cc2 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d154      	bne.n	8007cc2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	220d      	movs	r2, #13
 8007c1c:	701a      	strb	r2, [r3, #0]
      break;
 8007c1e:	e050      	b.n	8007cc2 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	220d      	movs	r2, #13
 8007c24:	701a      	strb	r2, [r3, #0]
      break;
 8007c26:	e04c      	b.n	8007cc2 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d049      	beq.n	8007cc6 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	4798      	blx	r3
      }
      break;
 8007c3e:	e042      	b.n	8007cc6 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff fd4b 	bl	80076e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d009      	beq.n	8007c6c <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c7c:	2105      	movs	r1, #5
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d107      	bne.n	8007c9e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff fe21 	bl	80078de <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007c9c:	e014      	b.n	8007cc8 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 fb20 	bl	80092e4 <USBH_LL_Start>
      break;
 8007ca4:	e010      	b.n	8007cc8 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007ca6:	bf00      	nop
 8007ca8:	e00e      	b.n	8007cc8 <USBH_Process+0x3c8>
      break;
 8007caa:	bf00      	nop
 8007cac:	e00c      	b.n	8007cc8 <USBH_Process+0x3c8>
      break;
 8007cae:	bf00      	nop
 8007cb0:	e00a      	b.n	8007cc8 <USBH_Process+0x3c8>
    break;
 8007cb2:	bf00      	nop
 8007cb4:	e008      	b.n	8007cc8 <USBH_Process+0x3c8>
      break;
 8007cb6:	bf00      	nop
 8007cb8:	e006      	b.n	8007cc8 <USBH_Process+0x3c8>
      break;
 8007cba:	bf00      	nop
 8007cbc:	e004      	b.n	8007cc8 <USBH_Process+0x3c8>
      break;
 8007cbe:	bf00      	nop
 8007cc0:	e002      	b.n	8007cc8 <USBH_Process+0x3c8>
      break;
 8007cc2:	bf00      	nop
 8007cc4:	e000      	b.n	8007cc8 <USBH_Process+0x3c8>
      break;
 8007cc6:	bf00      	nop
  }
  return USBH_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop

08007cd4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af04      	add	r7, sp, #16
 8007cda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	2b07      	cmp	r3, #7
 8007cea:	f200 81bd 	bhi.w	8008068 <USBH_HandleEnum+0x394>
 8007cee:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <USBH_HandleEnum+0x20>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d15 	.word	0x08007d15
 8007cf8:	08007dcf 	.word	0x08007dcf
 8007cfc:	08007e39 	.word	0x08007e39
 8007d00:	08007ec3 	.word	0x08007ec3
 8007d04:	08007f2d 	.word	0x08007f2d
 8007d08:	08007f9d 	.word	0x08007f9d
 8007d0c:	08007fe3 	.word	0x08007fe3
 8007d10:	08008029 	.word	0x08008029
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007d14:	2108      	movs	r1, #8
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa50 	bl	80081bc <USBH_Get_DevDesc>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d12e      	bne.n	8007d84 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7919      	ldrb	r1, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d4a:	9202      	str	r2, [sp, #8]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	9201      	str	r2, [sp, #4]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4603      	mov	r3, r0
 8007d54:	2280      	movs	r2, #128	@ 0x80
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 f8e2 	bl	8008f20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7959      	ldrb	r1, [r3, #5]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d70:	9202      	str	r2, [sp, #8]
 8007d72:	2200      	movs	r2, #0
 8007d74:	9201      	str	r2, [sp, #4]
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 f8cf 	bl	8008f20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d82:	e173      	b.n	800806c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	f040 8170 	bne.w	800806c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d92:	3301      	adds	r3, #1
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d903      	bls.n	8007dae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	220d      	movs	r2, #13
 8007daa:	701a      	strb	r2, [r3, #0]
      break;
 8007dac:	e15e      	b.n	800806c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	795b      	ldrb	r3, [r3, #5]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f001 f903 	bl	8008fc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	791b      	ldrb	r3, [r3, #4]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 f8fd 	bl	8008fc0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	701a      	strb	r2, [r3, #0]
      break;
 8007dcc:	e14e      	b.n	800806c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007dce:	2112      	movs	r1, #18
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f9f3 	bl	80081bc <USBH_Get_DevDesc>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007de6:	e143      	b.n	8008070 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	f040 8140 	bne.w	8008070 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007df6:	3301      	adds	r3, #1
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d903      	bls.n	8007e12 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	220d      	movs	r2, #13
 8007e0e:	701a      	strb	r2, [r3, #0]
      break;
 8007e10:	e12e      	b.n	8008070 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	795b      	ldrb	r3, [r3, #5]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 f8d1 	bl	8008fc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	791b      	ldrb	r3, [r3, #4]
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 f8cb 	bl	8008fc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
      break;
 8007e36:	e11b      	b.n	8008070 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007e38:	2101      	movs	r1, #1
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa7d 	bl	800833a <USBH_SetAddress>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d130      	bne.n	8007eac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007e4a:	2002      	movs	r0, #2
 8007e4c:	f001 fb9f 	bl	800958e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	7919      	ldrb	r1, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e72:	9202      	str	r2, [sp, #8]
 8007e74:	2200      	movs	r2, #0
 8007e76:	9201      	str	r2, [sp, #4]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2280      	movs	r2, #128	@ 0x80
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 f84e 	bl	8008f20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7959      	ldrb	r1, [r3, #5]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e98:	9202      	str	r2, [sp, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	9201      	str	r2, [sp, #4]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 f83b 	bl	8008f20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007eaa:	e0e3      	b.n	8008074 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	f040 80e0 	bne.w	8008074 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	220d      	movs	r2, #13
 8007eb8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	705a      	strb	r2, [r3, #1]
      break;
 8007ec0:	e0d8      	b.n	8008074 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007ec2:	2109      	movs	r1, #9
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9a5 	bl	8008214 <USBH_Get_CfgDesc>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d103      	bne.n	8007edc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007eda:	e0cd      	b.n	8008078 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	f040 80ca 	bne.w	8008078 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007eea:	3301      	adds	r3, #1
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d903      	bls.n	8007f06 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	220d      	movs	r2, #13
 8007f02:	701a      	strb	r2, [r3, #0]
      break;
 8007f04:	e0b8      	b.n	8008078 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	795b      	ldrb	r3, [r3, #5]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 f857 	bl	8008fc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	791b      	ldrb	r3, [r3, #4]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 f851 	bl	8008fc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	701a      	strb	r2, [r3, #0]
      break;
 8007f2a:	e0a5      	b.n	8008078 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f96d 	bl	8008214 <USBH_Get_CfgDesc>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d103      	bne.n	8007f4c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2205      	movs	r2, #5
 8007f48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f4a:	e097      	b.n	800807c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	f040 8094 	bne.w	800807c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d903      	bls.n	8007f76 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	220d      	movs	r2, #13
 8007f72:	701a      	strb	r2, [r3, #0]
      break;
 8007f74:	e082      	b.n	800807c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	795b      	ldrb	r3, [r3, #5]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 f81f 	bl	8008fc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	791b      	ldrb	r3, [r3, #4]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 f819 	bl	8008fc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
      break;
 8007f9a:	e06f      	b.n	800807c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d019      	beq.n	8007fda <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007fb2:	23ff      	movs	r3, #255	@ 0xff
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f957 	bl	8008268 <USBH_Get_StringDesc>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d103      	bne.n	8007fcc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2206      	movs	r2, #6
 8007fc8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007fca:	e059      	b.n	8008080 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d156      	bne.n	8008080 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2206      	movs	r2, #6
 8007fd6:	705a      	strb	r2, [r3, #1]
      break;
 8007fd8:	e052      	b.n	8008080 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2206      	movs	r2, #6
 8007fde:	705a      	strb	r2, [r3, #1]
      break;
 8007fe0:	e04e      	b.n	8008080 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d019      	beq.n	8008020 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ff8:	23ff      	movs	r3, #255	@ 0xff
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f934 	bl	8008268 <USBH_Get_StringDesc>
 8008000:	4603      	mov	r3, r0
 8008002:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d103      	bne.n	8008012 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2207      	movs	r2, #7
 800800e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008010:	e038      	b.n	8008084 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008012:	7bbb      	ldrb	r3, [r7, #14]
 8008014:	2b03      	cmp	r3, #3
 8008016:	d135      	bne.n	8008084 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2207      	movs	r2, #7
 800801c:	705a      	strb	r2, [r3, #1]
      break;
 800801e:	e031      	b.n	8008084 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2207      	movs	r2, #7
 8008024:	705a      	strb	r2, [r3, #1]
      break;
 8008026:	e02d      	b.n	8008084 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800802e:	2b00      	cmp	r3, #0
 8008030:	d017      	beq.n	8008062 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800803e:	23ff      	movs	r3, #255	@ 0xff
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f911 	bl	8008268 <USBH_Get_StringDesc>
 8008046:	4603      	mov	r3, r0
 8008048:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008054:	e018      	b.n	8008088 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b03      	cmp	r3, #3
 800805a:	d115      	bne.n	8008088 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
      break;
 8008060:	e012      	b.n	8008088 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
      break;
 8008066:	e00f      	b.n	8008088 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008068:	bf00      	nop
 800806a:	e00e      	b.n	800808a <USBH_HandleEnum+0x3b6>
      break;
 800806c:	bf00      	nop
 800806e:	e00c      	b.n	800808a <USBH_HandleEnum+0x3b6>
      break;
 8008070:	bf00      	nop
 8008072:	e00a      	b.n	800808a <USBH_HandleEnum+0x3b6>
      break;
 8008074:	bf00      	nop
 8008076:	e008      	b.n	800808a <USBH_HandleEnum+0x3b6>
      break;
 8008078:	bf00      	nop
 800807a:	e006      	b.n	800808a <USBH_HandleEnum+0x3b6>
      break;
 800807c:	bf00      	nop
 800807e:	e004      	b.n	800808a <USBH_HandleEnum+0x3b6>
      break;
 8008080:	bf00      	nop
 8008082:	e002      	b.n	800808a <USBH_HandleEnum+0x3b6>
      break;
 8008084:	bf00      	nop
 8008086:	e000      	b.n	800808a <USBH_HandleEnum+0x3b6>
      break;
 8008088:	bf00      	nop
  }
  return Status;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f804 	bl	80080d6 <USBH_HandleSof>
}
 80080ce:	bf00      	nop
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b0b      	cmp	r3, #11
 80080e6:	d10a      	bne.n	80080fe <USBH_HandleSof+0x28>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
  }
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8008116:	bf00      	nop
}
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800813a:	bf00      	nop
}
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 f8c0 	bl	800931a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	791b      	ldrb	r3, [r3, #4]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 ff0d 	bl	8008fc0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	795b      	ldrb	r3, [r3, #5]
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 ff07 	bl	8008fc0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af02      	add	r7, sp, #8
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80081c8:	887b      	ldrh	r3, [r7, #2]
 80081ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ce:	d901      	bls.n	80081d4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e01b      	b.n	800820c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80081da:	887b      	ldrh	r3, [r7, #2]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	4613      	mov	r3, r2
 80081e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081e4:	2100      	movs	r1, #0
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f872 	bl	80082d0 <USBH_GetDescriptor>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80081fc:	887a      	ldrh	r2, [r7, #2]
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f929 	bl	8008458 <USBH_ParseDevDesc>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800820a:	7bfb      	ldrb	r3, [r7, #15]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af02      	add	r7, sp, #8
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	331c      	adds	r3, #28
 8008224:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008226:	887b      	ldrh	r3, [r7, #2]
 8008228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800822c:	d901      	bls.n	8008232 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800822e:	2303      	movs	r3, #3
 8008230:	e016      	b.n	8008260 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008232:	887b      	ldrh	r3, [r7, #2]
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f846 	bl	80082d0 <USBH_GetDescriptor>
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d107      	bne.n	800825e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800824e:	887b      	ldrh	r3, [r7, #2]
 8008250:	461a      	mov	r2, r3
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f9af 	bl	80085b8 <USBH_ParseCfgDesc>
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	607a      	str	r2, [r7, #4]
 8008272:	461a      	mov	r2, r3
 8008274:	460b      	mov	r3, r1
 8008276:	72fb      	strb	r3, [r7, #11]
 8008278:	4613      	mov	r3, r2
 800827a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800827c:	893b      	ldrh	r3, [r7, #8]
 800827e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008282:	d802      	bhi.n	800828a <USBH_Get_StringDesc+0x22>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800828a:	2303      	movs	r3, #3
 800828c:	e01c      	b.n	80082c8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	b29b      	uxth	r3, r3
 8008292:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008296:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800829e:	893b      	ldrh	r3, [r7, #8]
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	460b      	mov	r3, r1
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f812 	bl	80082d0 <USBH_GetDescriptor>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d107      	bne.n	80082c6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80082bc:	893a      	ldrh	r2, [r7, #8]
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fb8c 	bl	80089de <USBH_ParseStringDesc>
  }

  return status;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	607b      	str	r3, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	72fb      	strb	r3, [r7, #11]
 80082de:	4613      	mov	r3, r2
 80082e0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	789b      	ldrb	r3, [r3, #2]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d11c      	bne.n	8008324 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2206      	movs	r2, #6
 80082fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	893a      	ldrh	r2, [r7, #8]
 8008300:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008302:	893b      	ldrh	r3, [r7, #8]
 8008304:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008308:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800830c:	d104      	bne.n	8008318 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f240 4209 	movw	r2, #1033	@ 0x409
 8008314:	829a      	strh	r2, [r3, #20]
 8008316:	e002      	b.n	800831e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	8b3a      	ldrh	r2, [r7, #24]
 8008322:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008324:	8b3b      	ldrh	r3, [r7, #24]
 8008326:	461a      	mov	r2, r3
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fba4 	bl	8008a78 <USBH_CtlReq>
 8008330:	4603      	mov	r3, r0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	789b      	ldrb	r3, [r3, #2]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d10f      	bne.n	800836e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2205      	movs	r2, #5
 8008358:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	b29a      	uxth	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800836e:	2200      	movs	r2, #0
 8008370:	2100      	movs	r1, #0
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fb80 	bl	8008a78 <USBH_CtlReq>
 8008378:	4603      	mov	r3, r0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	789b      	ldrb	r3, [r3, #2]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d10e      	bne.n	80083b4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2209      	movs	r2, #9
 80083a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	887a      	ldrh	r2, [r7, #2]
 80083a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80083b4:	2200      	movs	r2, #0
 80083b6:	2100      	movs	r1, #0
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fb5d 	bl	8008a78 <USBH_CtlReq>
 80083be:	4603      	mov	r3, r0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	789b      	ldrb	r3, [r3, #2]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d10f      	bne.n	80083fc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2203      	movs	r2, #3
 80083e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80083fc:	2200      	movs	r2, #0
 80083fe:	2100      	movs	r1, #0
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fb39 	bl	8008a78 <USBH_CtlReq>
 8008406:	4603      	mov	r3, r0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	789b      	ldrb	r3, [r3, #2]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d10f      	bne.n	8008444 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	b29a      	uxth	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008444:	2200      	movs	r2, #0
 8008446:	2100      	movs	r1, #0
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fb15 	bl	8008a78 <USBH_CtlReq>
 800844e:	4603      	mov	r3, r0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800846c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008478:	2302      	movs	r3, #2
 800847a:	e094      	b.n	80085a6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	781a      	ldrb	r2, [r3, #0]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	785a      	ldrb	r2, [r3, #1]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	3302      	adds	r3, #2
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	3303      	adds	r3, #3
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	b29b      	uxth	r3, r3
 800849e:	4313      	orrs	r3, r2
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	791a      	ldrb	r2, [r3, #4]
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	795a      	ldrb	r2, [r3, #5]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	799a      	ldrb	r2, [r3, #6]
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	79da      	ldrb	r2, [r3, #7]
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d11b      	bne.n	8008512 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	79db      	ldrb	r3, [r3, #7]
 80084de:	2b20      	cmp	r3, #32
 80084e0:	dc0f      	bgt.n	8008502 <USBH_ParseDevDesc+0xaa>
 80084e2:	2b08      	cmp	r3, #8
 80084e4:	db0f      	blt.n	8008506 <USBH_ParseDevDesc+0xae>
 80084e6:	3b08      	subs	r3, #8
 80084e8:	4a32      	ldr	r2, [pc, #200]	@ (80085b4 <USBH_ParseDevDesc+0x15c>)
 80084ea:	fa22 f303 	lsr.w	r3, r2, r3
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bf14      	ite	ne
 80084f6:	2301      	movne	r3, #1
 80084f8:	2300      	moveq	r3, #0
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d106      	bne.n	800850e <USBH_ParseDevDesc+0xb6>
 8008500:	e001      	b.n	8008506 <USBH_ParseDevDesc+0xae>
 8008502:	2b40      	cmp	r3, #64	@ 0x40
 8008504:	d003      	beq.n	800850e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	2208      	movs	r2, #8
 800850a:	71da      	strb	r2, [r3, #7]
        break;
 800850c:	e000      	b.n	8008510 <USBH_ParseDevDesc+0xb8>
        break;
 800850e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008510:	e00e      	b.n	8008530 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008518:	2b02      	cmp	r3, #2
 800851a:	d107      	bne.n	800852c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	79db      	ldrb	r3, [r3, #7]
 8008520:	2b08      	cmp	r3, #8
 8008522:	d005      	beq.n	8008530 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2208      	movs	r2, #8
 8008528:	71da      	strb	r2, [r3, #7]
 800852a:	e001      	b.n	8008530 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800852c:	2303      	movs	r3, #3
 800852e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008530:	88fb      	ldrh	r3, [r7, #6]
 8008532:	2b08      	cmp	r3, #8
 8008534:	d936      	bls.n	80085a4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	3308      	adds	r3, #8
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	3309      	adds	r3, #9
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	b29b      	uxth	r3, r3
 8008548:	4313      	orrs	r3, r2
 800854a:	b29a      	uxth	r2, r3
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	330a      	adds	r3, #10
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	330b      	adds	r3, #11
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	021b      	lsls	r3, r3, #8
 8008560:	b29b      	uxth	r3, r3
 8008562:	4313      	orrs	r3, r2
 8008564:	b29a      	uxth	r2, r3
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	330c      	adds	r3, #12
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	330d      	adds	r3, #13
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	b29b      	uxth	r3, r3
 800857c:	4313      	orrs	r3, r2
 800857e:	b29a      	uxth	r2, r3
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	7b9a      	ldrb	r2, [r3, #14]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	7bda      	ldrb	r2, [r3, #15]
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	7c1a      	ldrb	r2, [r3, #16]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	7c5a      	ldrb	r2, [r3, #17]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	371c      	adds	r7, #28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	01000101 	.word	0x01000101

080085b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08c      	sub	sp, #48	@ 0x30
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80085cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80085e6:	2302      	movs	r3, #2
 80085e8:	e0de      	b.n	80087a8 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80085ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b09      	cmp	r3, #9
 80085f4:	d002      	beq.n	80085fc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80085f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f8:	2209      	movs	r2, #9
 80085fa:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	781a      	ldrb	r2, [r3, #0]
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	785a      	ldrb	r2, [r3, #1]
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	3302      	adds	r3, #2
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	3303      	adds	r3, #3
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	021b      	lsls	r3, r3, #8
 800861c:	b29b      	uxth	r3, r3
 800861e:	4313      	orrs	r3, r2
 8008620:	b29b      	uxth	r3, r3
 8008622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008626:	bf28      	it	cs
 8008628:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800862c:	b29a      	uxth	r2, r3
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	791a      	ldrb	r2, [r3, #4]
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	795a      	ldrb	r2, [r3, #5]
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	799a      	ldrb	r2, [r3, #6]
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	79da      	ldrb	r2, [r3, #7]
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	7a1a      	ldrb	r2, [r3, #8]
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800865a:	88fb      	ldrh	r3, [r7, #6]
 800865c:	2b09      	cmp	r3, #9
 800865e:	f240 80a1 	bls.w	80087a4 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8008662:	2309      	movs	r3, #9
 8008664:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008666:	2300      	movs	r3, #0
 8008668:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800866a:	e085      	b.n	8008778 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800866c:	f107 0316 	add.w	r3, r7, #22
 8008670:	4619      	mov	r1, r3
 8008672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008674:	f000 f9e6 	bl	8008a44 <USBH_GetNextDesc>
 8008678:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800867a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867c:	785b      	ldrb	r3, [r3, #1]
 800867e:	2b04      	cmp	r3, #4
 8008680:	d17a      	bne.n	8008778 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b09      	cmp	r3, #9
 8008688:	d002      	beq.n	8008690 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800868a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868c:	2209      	movs	r2, #9
 800868e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008694:	221a      	movs	r2, #26
 8008696:	fb02 f303 	mul.w	r3, r2, r3
 800869a:	3308      	adds	r3, #8
 800869c:	6a3a      	ldr	r2, [r7, #32]
 800869e:	4413      	add	r3, r2
 80086a0:	3302      	adds	r3, #2
 80086a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80086a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086a6:	69f8      	ldr	r0, [r7, #28]
 80086a8:	f000 f882 	bl	80087b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80086b6:	e043      	b.n	8008740 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80086b8:	f107 0316 	add.w	r3, r7, #22
 80086bc:	4619      	mov	r1, r3
 80086be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086c0:	f000 f9c0 	bl	8008a44 <USBH_GetNextDesc>
 80086c4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80086c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	2b05      	cmp	r3, #5
 80086cc:	d138      	bne.n	8008740 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	795b      	ldrb	r3, [r3, #5]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d113      	bne.n	80086fe <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d003      	beq.n	80086e6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	799b      	ldrb	r3, [r3, #6]
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d10b      	bne.n	80086fe <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	79db      	ldrb	r3, [r3, #7]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10b      	bne.n	8008706 <USBH_ParseCfgDesc+0x14e>
 80086ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b09      	cmp	r3, #9
 80086f4:	d007      	beq.n	8008706 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80086f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f8:	2209      	movs	r2, #9
 80086fa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80086fc:	e003      	b.n	8008706 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80086fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008700:	2207      	movs	r2, #7
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	e000      	b.n	8008708 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008706:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800870c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008710:	3201      	adds	r2, #1
 8008712:	00d2      	lsls	r2, r2, #3
 8008714:	211a      	movs	r1, #26
 8008716:	fb01 f303 	mul.w	r3, r1, r3
 800871a:	4413      	add	r3, r2
 800871c:	3308      	adds	r3, #8
 800871e:	6a3a      	ldr	r2, [r7, #32]
 8008720:	4413      	add	r3, r2
 8008722:	3304      	adds	r3, #4
 8008724:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008728:	69b9      	ldr	r1, [r7, #24]
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 f86f 	bl	800880e <USBH_ParseEPDesc>
 8008730:	4603      	mov	r3, r0
 8008732:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008736:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800873a:	3301      	adds	r3, #1
 800873c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008740:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008744:	2b01      	cmp	r3, #1
 8008746:	d80a      	bhi.n	800875e <USBH_ParseCfgDesc+0x1a6>
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	791b      	ldrb	r3, [r3, #4]
 800874c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008750:	429a      	cmp	r2, r3
 8008752:	d204      	bcs.n	800875e <USBH_ParseCfgDesc+0x1a6>
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	885a      	ldrh	r2, [r3, #2]
 8008758:	8afb      	ldrh	r3, [r7, #22]
 800875a:	429a      	cmp	r2, r3
 800875c:	d8ac      	bhi.n	80086b8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	791b      	ldrb	r3, [r3, #4]
 8008762:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008766:	429a      	cmp	r2, r3
 8008768:	d201      	bcs.n	800876e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800876a:	2303      	movs	r3, #3
 800876c:	e01c      	b.n	80087a8 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800876e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008772:	3301      	adds	r3, #1
 8008774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800877c:	2b01      	cmp	r3, #1
 800877e:	d805      	bhi.n	800878c <USBH_ParseCfgDesc+0x1d4>
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	885a      	ldrh	r2, [r3, #2]
 8008784:	8afb      	ldrh	r3, [r7, #22]
 8008786:	429a      	cmp	r2, r3
 8008788:	f63f af70 	bhi.w	800866c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	791b      	ldrb	r3, [r3, #4]
 8008790:	2b02      	cmp	r3, #2
 8008792:	bf28      	it	cs
 8008794:	2302      	movcs	r3, #2
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800879c:	429a      	cmp	r2, r3
 800879e:	d201      	bcs.n	80087a4 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e001      	b.n	80087a8 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80087a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3730      	adds	r7, #48	@ 0x30
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781a      	ldrb	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	785a      	ldrb	r2, [r3, #1]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	789a      	ldrb	r2, [r3, #2]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	78da      	ldrb	r2, [r3, #3]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	791a      	ldrb	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	795a      	ldrb	r2, [r3, #5]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	799a      	ldrb	r2, [r3, #6]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	79da      	ldrb	r2, [r3, #7]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	7a1a      	ldrb	r2, [r3, #8]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	721a      	strb	r2, [r3, #8]
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800880e:	b480      	push	{r7}
 8008810:	b087      	sub	sp, #28
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	785a      	ldrb	r2, [r3, #1]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	789a      	ldrb	r2, [r3, #2]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	78da      	ldrb	r2, [r3, #3]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3304      	adds	r3, #4
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	461a      	mov	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3305      	adds	r3, #5
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	b29b      	uxth	r3, r3
 8008850:	4313      	orrs	r3, r2
 8008852:	b29a      	uxth	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	799a      	ldrb	r2, [r3, #6]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	889b      	ldrh	r3, [r3, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d009      	beq.n	800887c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800886c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008870:	d804      	bhi.n	800887c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800887a:	d901      	bls.n	8008880 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800887c:	2303      	movs	r3, #3
 800887e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008886:	2b00      	cmp	r3, #0
 8008888:	d136      	bne.n	80088f8 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	78db      	ldrb	r3, [r3, #3]
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d108      	bne.n	80088a8 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	889b      	ldrh	r3, [r3, #4]
 800889a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800889e:	f240 8097 	bls.w	80089d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80088a2:	2303      	movs	r3, #3
 80088a4:	75fb      	strb	r3, [r7, #23]
 80088a6:	e093      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	78db      	ldrb	r3, [r3, #3]
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d107      	bne.n	80088c4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	889b      	ldrh	r3, [r3, #4]
 80088b8:	2b40      	cmp	r3, #64	@ 0x40
 80088ba:	f240 8089 	bls.w	80089d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80088be:	2303      	movs	r3, #3
 80088c0:	75fb      	strb	r3, [r7, #23]
 80088c2:	e085      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	78db      	ldrb	r3, [r3, #3]
 80088c8:	f003 0303 	and.w	r3, r3, #3
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d005      	beq.n	80088dc <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	78db      	ldrb	r3, [r3, #3]
 80088d4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d10a      	bne.n	80088f2 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	799b      	ldrb	r3, [r3, #6]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <USBH_ParseEPDesc+0xde>
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	799b      	ldrb	r3, [r3, #6]
 80088e8:	2b10      	cmp	r3, #16
 80088ea:	d970      	bls.n	80089ce <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80088ec:	2303      	movs	r3, #3
 80088ee:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088f0:	e06d      	b.n	80089ce <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80088f2:	2303      	movs	r3, #3
 80088f4:	75fb      	strb	r3, [r7, #23]
 80088f6:	e06b      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d13c      	bne.n	800897c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	78db      	ldrb	r3, [r3, #3]
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d005      	beq.n	800891a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	78db      	ldrb	r3, [r3, #3]
 8008912:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008916:	2b00      	cmp	r3, #0
 8008918:	d106      	bne.n	8008928 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	889b      	ldrh	r3, [r3, #4]
 800891e:	2b40      	cmp	r3, #64	@ 0x40
 8008920:	d956      	bls.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008922:	2303      	movs	r3, #3
 8008924:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008926:	e053      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	78db      	ldrb	r3, [r3, #3]
 800892c:	f003 0303 	and.w	r3, r3, #3
 8008930:	2b01      	cmp	r3, #1
 8008932:	d10e      	bne.n	8008952 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	799b      	ldrb	r3, [r3, #6]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008940:	2b10      	cmp	r3, #16
 8008942:	d803      	bhi.n	800894c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008948:	2b40      	cmp	r3, #64	@ 0x40
 800894a:	d941      	bls.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800894c:	2303      	movs	r3, #3
 800894e:	75fb      	strb	r3, [r7, #23]
 8008950:	e03e      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	78db      	ldrb	r3, [r3, #3]
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	2b03      	cmp	r3, #3
 800895c:	d10b      	bne.n	8008976 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	799b      	ldrb	r3, [r3, #6]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <USBH_ParseEPDesc+0x162>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	889b      	ldrh	r3, [r3, #4]
 800896a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800896e:	d32f      	bcc.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008970:	2303      	movs	r3, #3
 8008972:	75fb      	strb	r3, [r7, #23]
 8008974:	e02c      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008976:	2303      	movs	r3, #3
 8008978:	75fb      	strb	r3, [r7, #23]
 800897a:	e029      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008982:	2b02      	cmp	r3, #2
 8008984:	d120      	bne.n	80089c8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	78db      	ldrb	r3, [r3, #3]
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d106      	bne.n	80089a0 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	889b      	ldrh	r3, [r3, #4]
 8008996:	2b08      	cmp	r3, #8
 8008998:	d01a      	beq.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800899a:	2303      	movs	r3, #3
 800899c:	75fb      	strb	r3, [r7, #23]
 800899e:	e017      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	78db      	ldrb	r3, [r3, #3]
 80089a4:	f003 0303 	and.w	r3, r3, #3
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d10a      	bne.n	80089c2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	799b      	ldrb	r3, [r3, #6]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <USBH_ParseEPDesc+0x1ae>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	889b      	ldrh	r3, [r3, #4]
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d909      	bls.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80089bc:	2303      	movs	r3, #3
 80089be:	75fb      	strb	r3, [r7, #23]
 80089c0:	e006      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80089c2:	2303      	movs	r3, #3
 80089c4:	75fb      	strb	r3, [r7, #23]
 80089c6:	e003      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80089c8:	2303      	movs	r3, #3
 80089ca:	75fb      	strb	r3, [r7, #23]
 80089cc:	e000      	b.n	80089d0 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80089ce:	bf00      	nop
  }

  return status;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80089de:	b480      	push	{r7}
 80089e0:	b087      	sub	sp, #28
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	4613      	mov	r3, r2
 80089ea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3301      	adds	r3, #1
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d120      	bne.n	8008a38 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	1e9a      	subs	r2, r3, #2
 80089fc:	88fb      	ldrh	r3, [r7, #6]
 80089fe:	4293      	cmp	r3, r2
 8008a00:	bf28      	it	cs
 8008a02:	4613      	movcs	r3, r2
 8008a04:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3302      	adds	r3, #2
 8008a0a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	82fb      	strh	r3, [r7, #22]
 8008a10:	e00b      	b.n	8008a2a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008a12:	8afb      	ldrh	r3, [r7, #22]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4413      	add	r3, r2
 8008a18:	781a      	ldrb	r2, [r3, #0]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	3301      	adds	r3, #1
 8008a22:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008a24:	8afb      	ldrh	r3, [r7, #22]
 8008a26:	3302      	adds	r3, #2
 8008a28:	82fb      	strh	r3, [r7, #22]
 8008a2a:	8afa      	ldrh	r2, [r7, #22]
 8008a2c:	8abb      	ldrh	r3, [r7, #20]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d3ef      	bcc.n	8008a12 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]
  }
}
 8008a38:	bf00      	nop
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	7812      	ldrb	r2, [r2, #0]
 8008a56:	4413      	add	r3, r2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4413      	add	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	4613      	mov	r3, r2
 8008a84:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008a86:	2301      	movs	r3, #1
 8008a88:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	789b      	ldrb	r3, [r3, #2]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d002      	beq.n	8008a98 <USBH_CtlReq+0x20>
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d00f      	beq.n	8008ab6 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8008a96:	e027      	b.n	8008ae8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	88fa      	ldrh	r2, [r7, #6]
 8008aa2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2202      	movs	r2, #2
 8008aae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ab4:	e018      	b.n	8008ae8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 f81c 	bl	8008af4 <USBH_HandleControl>
 8008abc:	4603      	mov	r3, r0
 8008abe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <USBH_CtlReq+0x54>
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d106      	bne.n	8008ada <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	761a      	strb	r2, [r3, #24]
      break;
 8008ad8:	e005      	b.n	8008ae6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d102      	bne.n	8008ae6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	709a      	strb	r2, [r3, #2]
      break;
 8008ae6:	bf00      	nop
  }
  return status;
 8008ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008afc:	2301      	movs	r3, #1
 8008afe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	7e1b      	ldrb	r3, [r3, #24]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	2b0a      	cmp	r3, #10
 8008b0c:	f200 8157 	bhi.w	8008dbe <USBH_HandleControl+0x2ca>
 8008b10:	a201      	add	r2, pc, #4	@ (adr r2, 8008b18 <USBH_HandleControl+0x24>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b45 	.word	0x08008b45
 8008b1c:	08008b5f 	.word	0x08008b5f
 8008b20:	08008bc9 	.word	0x08008bc9
 8008b24:	08008bef 	.word	0x08008bef
 8008b28:	08008c29 	.word	0x08008c29
 8008b2c:	08008c53 	.word	0x08008c53
 8008b30:	08008ca5 	.word	0x08008ca5
 8008b34:	08008cc7 	.word	0x08008cc7
 8008b38:	08008d03 	.word	0x08008d03
 8008b3c:	08008d29 	.word	0x08008d29
 8008b40:	08008d67 	.word	0x08008d67
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f103 0110 	add.w	r1, r3, #16
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	795b      	ldrb	r3, [r3, #5]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f945 	bl	8008de0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2202      	movs	r2, #2
 8008b5a:	761a      	strb	r2, [r3, #24]
      break;
 8008b5c:	e13a      	b.n	8008dd4 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	795b      	ldrb	r3, [r3, #5]
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fcb5 	bl	80094d4 <USBH_LL_GetURBState>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d11e      	bne.n	8008bb2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7c1b      	ldrb	r3, [r3, #16]
 8008b78:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b7c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	8adb      	ldrh	r3, [r3, #22]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008b86:	7b7b      	ldrb	r3, [r7, #13]
 8008b88:	2b80      	cmp	r3, #128	@ 0x80
 8008b8a:	d103      	bne.n	8008b94 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2203      	movs	r2, #3
 8008b90:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008b92:	e116      	b.n	8008dc2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2205      	movs	r2, #5
 8008b98:	761a      	strb	r2, [r3, #24]
      break;
 8008b9a:	e112      	b.n	8008dc2 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8008b9c:	7b7b      	ldrb	r3, [r7, #13]
 8008b9e:	2b80      	cmp	r3, #128	@ 0x80
 8008ba0:	d103      	bne.n	8008baa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2209      	movs	r2, #9
 8008ba6:	761a      	strb	r2, [r3, #24]
      break;
 8008ba8:	e10b      	b.n	8008dc2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2207      	movs	r2, #7
 8008bae:	761a      	strb	r2, [r3, #24]
      break;
 8008bb0:	e107      	b.n	8008dc2 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d003      	beq.n	8008bc0 <USBH_HandleControl+0xcc>
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	f040 8101 	bne.w	8008dc2 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	220b      	movs	r2, #11
 8008bc4:	761a      	strb	r2, [r3, #24]
      break;
 8008bc6:	e0fc      	b.n	8008dc2 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6899      	ldr	r1, [r3, #8]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	899a      	ldrh	r2, [r3, #12]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	791b      	ldrb	r3, [r3, #4]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f93c 	bl	8008e5e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2204      	movs	r2, #4
 8008bea:	761a      	strb	r2, [r3, #24]
      break;
 8008bec:	e0f2      	b.n	8008dd4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	791b      	ldrb	r3, [r3, #4]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fc6d 	bl	80094d4 <USBH_LL_GetURBState>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d103      	bne.n	8008c0c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2209      	movs	r2, #9
 8008c08:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008c0a:	e0dc      	b.n	8008dc6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2b05      	cmp	r3, #5
 8008c10:	d102      	bne.n	8008c18 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8008c12:	2303      	movs	r3, #3
 8008c14:	73fb      	strb	r3, [r7, #15]
      break;
 8008c16:	e0d6      	b.n	8008dc6 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	f040 80d3 	bne.w	8008dc6 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	220b      	movs	r2, #11
 8008c24:	761a      	strb	r2, [r3, #24]
      break;
 8008c26:	e0ce      	b.n	8008dc6 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6899      	ldr	r1, [r3, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	899a      	ldrh	r2, [r3, #12]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	795b      	ldrb	r3, [r3, #5]
 8008c34:	2001      	movs	r0, #1
 8008c36:	9000      	str	r0, [sp, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f8eb 	bl	8008e14 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2206      	movs	r2, #6
 8008c4e:	761a      	strb	r2, [r3, #24]
      break;
 8008c50:	e0c0      	b.n	8008dd4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	795b      	ldrb	r3, [r3, #5]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fc3b 	bl	80094d4 <USBH_LL_GetURBState>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d103      	bne.n	8008c70 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2207      	movs	r2, #7
 8008c6c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008c6e:	e0ac      	b.n	8008dca <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	2b05      	cmp	r3, #5
 8008c74:	d105      	bne.n	8008c82 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	220c      	movs	r2, #12
 8008c7a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c80:	e0a3      	b.n	8008dca <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d103      	bne.n	8008c90 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	761a      	strb	r2, [r3, #24]
      break;
 8008c8e:	e09c      	b.n	8008dca <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	f040 8099 	bne.w	8008dca <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	220b      	movs	r2, #11
 8008c9c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca2:	e092      	b.n	8008dca <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	791b      	ldrb	r3, [r3, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2100      	movs	r1, #0
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f8d6 	bl	8008e5e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2208      	movs	r2, #8
 8008cc2:	761a      	strb	r2, [r3, #24]

      break;
 8008cc4:	e086      	b.n	8008dd4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	791b      	ldrb	r3, [r3, #4]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fc01 	bl	80094d4 <USBH_LL_GetURBState>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d105      	bne.n	8008ce8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	220d      	movs	r2, #13
 8008ce0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008ce6:	e072      	b.n	8008dce <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d103      	bne.n	8008cf6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	220b      	movs	r2, #11
 8008cf2:	761a      	strb	r2, [r3, #24]
      break;
 8008cf4:	e06b      	b.n	8008dce <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	2b05      	cmp	r3, #5
 8008cfa:	d168      	bne.n	8008dce <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8008d00:	e065      	b.n	8008dce <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	795b      	ldrb	r3, [r3, #5]
 8008d06:	2201      	movs	r2, #1
 8008d08:	9200      	str	r2, [sp, #0]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f880 	bl	8008e14 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	220a      	movs	r2, #10
 8008d24:	761a      	strb	r2, [r3, #24]
      break;
 8008d26:	e055      	b.n	8008dd4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	795b      	ldrb	r3, [r3, #5]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fbd0 	bl	80094d4 <USBH_LL_GetURBState>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d105      	bne.n	8008d4a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	220d      	movs	r2, #13
 8008d46:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008d48:	e043      	b.n	8008dd2 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d103      	bne.n	8008d58 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2209      	movs	r2, #9
 8008d54:	761a      	strb	r2, [r3, #24]
      break;
 8008d56:	e03c      	b.n	8008dd2 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	d139      	bne.n	8008dd2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	220b      	movs	r2, #11
 8008d62:	761a      	strb	r2, [r3, #24]
      break;
 8008d64:	e035      	b.n	8008dd2 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7e5b      	ldrb	r3, [r3, #25]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	765a      	strb	r2, [r3, #25]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	7e5b      	ldrb	r3, [r3, #25]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d806      	bhi.n	8008d88 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008d86:	e025      	b.n	8008dd4 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d8e:	2106      	movs	r1, #6
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	795b      	ldrb	r3, [r3, #5]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f90d 	bl	8008fc0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	791b      	ldrb	r3, [r3, #4]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f907 	bl	8008fc0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008db8:	2302      	movs	r3, #2
 8008dba:	73fb      	strb	r3, [r7, #15]
      break;
 8008dbc:	e00a      	b.n	8008dd4 <USBH_HandleControl+0x2e0>

    default:
      break;
 8008dbe:	bf00      	nop
 8008dc0:	e008      	b.n	8008dd4 <USBH_HandleControl+0x2e0>
      break;
 8008dc2:	bf00      	nop
 8008dc4:	e006      	b.n	8008dd4 <USBH_HandleControl+0x2e0>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e004      	b.n	8008dd4 <USBH_HandleControl+0x2e0>
      break;
 8008dca:	bf00      	nop
 8008dcc:	e002      	b.n	8008dd4 <USBH_HandleControl+0x2e0>
      break;
 8008dce:	bf00      	nop
 8008dd0:	e000      	b.n	8008dd4 <USBH_HandleControl+0x2e0>
      break;
 8008dd2:	bf00      	nop
  }

  return status;
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop

08008de0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af04      	add	r7, sp, #16
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dee:	79f9      	ldrb	r1, [r7, #7]
 8008df0:	2300      	movs	r3, #0
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	2308      	movs	r3, #8
 8008df6:	9302      	str	r3, [sp, #8]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	9301      	str	r3, [sp, #4]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	2300      	movs	r3, #0
 8008e02:	2200      	movs	r2, #0
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 fb34 	bl	8009472 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af04      	add	r7, sp, #16
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4611      	mov	r1, r2
 8008e20:	461a      	mov	r2, r3
 8008e22:	460b      	mov	r3, r1
 8008e24:	80fb      	strh	r3, [r7, #6]
 8008e26:	4613      	mov	r3, r2
 8008e28:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e38:	7979      	ldrb	r1, [r7, #5]
 8008e3a:	7e3b      	ldrb	r3, [r7, #24]
 8008e3c:	9303      	str	r3, [sp, #12]
 8008e3e:	88fb      	ldrh	r3, [r7, #6]
 8008e40:	9302      	str	r3, [sp, #8]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	9301      	str	r3, [sp, #4]
 8008e46:	2301      	movs	r3, #1
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 fb0f 	bl	8009472 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b088      	sub	sp, #32
 8008e62:	af04      	add	r7, sp, #16
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	4611      	mov	r1, r2
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	80fb      	strh	r3, [r7, #6]
 8008e70:	4613      	mov	r3, r2
 8008e72:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e74:	7979      	ldrb	r1, [r7, #5]
 8008e76:	2300      	movs	r3, #0
 8008e78:	9303      	str	r3, [sp, #12]
 8008e7a:	88fb      	ldrh	r3, [r7, #6]
 8008e7c:	9302      	str	r3, [sp, #8]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	2301      	movs	r3, #1
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	2300      	movs	r3, #0
 8008e88:	2201      	movs	r2, #1
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 faf1 	bl	8009472 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e90:	2300      	movs	r3, #0

}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b088      	sub	sp, #32
 8008e9e:	af04      	add	r7, sp, #16
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	60b9      	str	r1, [r7, #8]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	80fb      	strh	r3, [r7, #6]
 8008eac:	4613      	mov	r3, r2
 8008eae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ebe:	7979      	ldrb	r1, [r7, #5]
 8008ec0:	7e3b      	ldrb	r3, [r7, #24]
 8008ec2:	9303      	str	r3, [sp, #12]
 8008ec4:	88fb      	ldrh	r3, [r7, #6]
 8008ec6:	9302      	str	r3, [sp, #8]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	2301      	movs	r3, #1
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 facc 	bl	8009472 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af04      	add	r7, sp, #16
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	4611      	mov	r1, r2
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	80fb      	strh	r3, [r7, #6]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008efa:	7979      	ldrb	r1, [r7, #5]
 8008efc:	2300      	movs	r3, #0
 8008efe:	9303      	str	r3, [sp, #12]
 8008f00:	88fb      	ldrh	r3, [r7, #6]
 8008f02:	9302      	str	r3, [sp, #8]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	2301      	movs	r3, #1
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	2201      	movs	r2, #1
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 faae 	bl	8009472 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af04      	add	r7, sp, #16
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	4608      	mov	r0, r1
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4603      	mov	r3, r0
 8008f30:	70fb      	strb	r3, [r7, #3]
 8008f32:	460b      	mov	r3, r1
 8008f34:	70bb      	strb	r3, [r7, #2]
 8008f36:	4613      	mov	r3, r2
 8008f38:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008f3a:	7878      	ldrb	r0, [r7, #1]
 8008f3c:	78ba      	ldrb	r2, [r7, #2]
 8008f3e:	78f9      	ldrb	r1, [r7, #3]
 8008f40:	8b3b      	ldrh	r3, [r7, #24]
 8008f42:	9302      	str	r3, [sp, #8]
 8008f44:	7d3b      	ldrb	r3, [r7, #20]
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	7c3b      	ldrb	r3, [r7, #16]
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fa53 	bl	80093fa <USBH_LL_OpenPipe>

  return USBH_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fa72 	bl	8009458 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	460b      	mov	r3, r1
 8008f88:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f836 	bl	8008ffc <USBH_GetFreePipe>
 8008f90:	4603      	mov	r3, r0
 8008f92:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008f94:	89fb      	ldrh	r3, [r7, #14]
 8008f96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d00a      	beq.n	8008fb4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	89fb      	ldrh	r3, [r7, #14]
 8008fa2:	f003 030f 	and.w	r3, r3, #15
 8008fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	33e0      	adds	r3, #224	@ 0xe0
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008fb4:	89fb      	ldrh	r3, [r7, #14]
 8008fb6:	b2db      	uxtb	r3, r3
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	2b0f      	cmp	r3, #15
 8008fd0:	d80d      	bhi.n	8008fee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	33e0      	adds	r3, #224	@ 0xe0
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	78fb      	ldrb	r3, [r7, #3]
 8008fe0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	33e0      	adds	r3, #224	@ 0xe0
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	440b      	add	r3, r1
 8008fec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009008:	2300      	movs	r3, #0
 800900a:	73fb      	strb	r3, [r7, #15]
 800900c:	e00f      	b.n	800902e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	33e0      	adds	r3, #224	@ 0xe0
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d102      	bne.n	8009028 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	b29b      	uxth	r3, r3
 8009026:	e007      	b.n	8009038 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	3301      	adds	r3, #1
 800902c:	73fb      	strb	r3, [r7, #15]
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	2b0f      	cmp	r3, #15
 8009032:	d9ec      	bls.n	800900e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009034:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009048:	2201      	movs	r2, #1
 800904a:	490e      	ldr	r1, [pc, #56]	@ (8009084 <MX_USB_HOST_Init+0x40>)
 800904c:	480e      	ldr	r0, [pc, #56]	@ (8009088 <MX_USB_HOST_Init+0x44>)
 800904e:	f7fe fb0f 	bl	8007670 <USBH_Init>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009058:	f7f7 fd48 	bl	8000aec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800905c:	490b      	ldr	r1, [pc, #44]	@ (800908c <MX_USB_HOST_Init+0x48>)
 800905e:	480a      	ldr	r0, [pc, #40]	@ (8009088 <MX_USB_HOST_Init+0x44>)
 8009060:	f7fe fbb1 	bl	80077c6 <USBH_RegisterClass>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800906a:	f7f7 fd3f 	bl	8000aec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800906e:	4806      	ldr	r0, [pc, #24]	@ (8009088 <MX_USB_HOST_Init+0x44>)
 8009070:	f7fe fc35 	bl	80078de <USBH_Start>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800907a:	f7f7 fd37 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800907e:	bf00      	nop
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	080090a5 	.word	0x080090a5
 8009088:	20000224 	.word	0x20000224
 800908c:	2000000c 	.word	0x2000000c

08009090 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009094:	4802      	ldr	r0, [pc, #8]	@ (80090a0 <MX_USB_HOST_Process+0x10>)
 8009096:	f7fe fc33 	bl	8007900 <USBH_Process>
}
 800909a:	bf00      	nop
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	20000224 	.word	0x20000224

080090a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80090b0:	78fb      	ldrb	r3, [r7, #3]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	d819      	bhi.n	80090ec <USBH_UserProcess+0x48>
 80090b8:	a201      	add	r2, pc, #4	@ (adr r2, 80090c0 <USBH_UserProcess+0x1c>)
 80090ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090be:	bf00      	nop
 80090c0:	080090ed 	.word	0x080090ed
 80090c4:	080090dd 	.word	0x080090dd
 80090c8:	080090ed 	.word	0x080090ed
 80090cc:	080090e5 	.word	0x080090e5
 80090d0:	080090d5 	.word	0x080090d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80090d4:	4b09      	ldr	r3, [pc, #36]	@ (80090fc <USBH_UserProcess+0x58>)
 80090d6:	2203      	movs	r2, #3
 80090d8:	701a      	strb	r2, [r3, #0]
  break;
 80090da:	e008      	b.n	80090ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80090dc:	4b07      	ldr	r3, [pc, #28]	@ (80090fc <USBH_UserProcess+0x58>)
 80090de:	2202      	movs	r2, #2
 80090e0:	701a      	strb	r2, [r3, #0]
  break;
 80090e2:	e004      	b.n	80090ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80090e4:	4b05      	ldr	r3, [pc, #20]	@ (80090fc <USBH_UserProcess+0x58>)
 80090e6:	2201      	movs	r2, #1
 80090e8:	701a      	strb	r2, [r3, #0]
  break;
 80090ea:	e000      	b.n	80090ee <USBH_UserProcess+0x4a>

  default:
  break;
 80090ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	200005fc 	.word	0x200005fc

08009100 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	@ 0x28
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009108:	f107 0314 	add.w	r3, r7, #20
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	605a      	str	r2, [r3, #4]
 8009112:	609a      	str	r2, [r3, #8]
 8009114:	60da      	str	r2, [r3, #12]
 8009116:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009120:	d147      	bne.n	80091b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009122:	2300      	movs	r3, #0
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	4b25      	ldr	r3, [pc, #148]	@ (80091bc <HAL_HCD_MspInit+0xbc>)
 8009128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912a:	4a24      	ldr	r2, [pc, #144]	@ (80091bc <HAL_HCD_MspInit+0xbc>)
 800912c:	f043 0301 	orr.w	r3, r3, #1
 8009130:	6313      	str	r3, [r2, #48]	@ 0x30
 8009132:	4b22      	ldr	r3, [pc, #136]	@ (80091bc <HAL_HCD_MspInit+0xbc>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	613b      	str	r3, [r7, #16]
 800913c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800913e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009144:	2300      	movs	r3, #0
 8009146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009148:	2300      	movs	r3, #0
 800914a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800914c:	f107 0314 	add.w	r3, r7, #20
 8009150:	4619      	mov	r1, r3
 8009152:	481b      	ldr	r0, [pc, #108]	@ (80091c0 <HAL_HCD_MspInit+0xc0>)
 8009154:	f7f8 f906 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009158:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800915c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800915e:	2302      	movs	r3, #2
 8009160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009162:	2300      	movs	r3, #0
 8009164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009166:	2303      	movs	r3, #3
 8009168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800916a:	230a      	movs	r3, #10
 800916c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800916e:	f107 0314 	add.w	r3, r7, #20
 8009172:	4619      	mov	r1, r3
 8009174:	4812      	ldr	r0, [pc, #72]	@ (80091c0 <HAL_HCD_MspInit+0xc0>)
 8009176:	f7f8 f8f5 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800917a:	4b10      	ldr	r3, [pc, #64]	@ (80091bc <HAL_HCD_MspInit+0xbc>)
 800917c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800917e:	4a0f      	ldr	r2, [pc, #60]	@ (80091bc <HAL_HCD_MspInit+0xbc>)
 8009180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009184:	6353      	str	r3, [r2, #52]	@ 0x34
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	4b0c      	ldr	r3, [pc, #48]	@ (80091bc <HAL_HCD_MspInit+0xbc>)
 800918c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918e:	4a0b      	ldr	r2, [pc, #44]	@ (80091bc <HAL_HCD_MspInit+0xbc>)
 8009190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009194:	6453      	str	r3, [r2, #68]	@ 0x44
 8009196:	4b09      	ldr	r3, [pc, #36]	@ (80091bc <HAL_HCD_MspInit+0xbc>)
 8009198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800919a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091a2:	2200      	movs	r2, #0
 80091a4:	2100      	movs	r1, #0
 80091a6:	2043      	movs	r0, #67	@ 0x43
 80091a8:	f7f8 f8a5 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091ac:	2043      	movs	r0, #67	@ 0x43
 80091ae:	f7f8 f8be 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091b2:	bf00      	nop
 80091b4:	3728      	adds	r7, #40	@ 0x28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	40023800 	.word	0x40023800
 80091c0:	40020000 	.word	0x40020000

080091c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe ff6d 	bl	80080b2 <USBH_LL_IncTimer>
}
 80091d8:	bf00      	nop
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe ffa9 	bl	8008146 <USBH_LL_Connect>
}
 80091f4:	bf00      	nop
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe ffb2 	bl	8008174 <USBH_LL_Disconnect>
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
 8009224:	4613      	mov	r3, r2
 8009226:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe ff5f 	bl	8008106 <USBH_LL_PortEnabled>
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe ff5f 	bl	8008122 <USBH_LL_PortDisabled>
}
 8009264:	bf00      	nop
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800927a:	2b01      	cmp	r3, #1
 800927c:	d12a      	bne.n	80092d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800927e:	4a18      	ldr	r2, [pc, #96]	@ (80092e0 <USBH_LL_Init+0x74>)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a15      	ldr	r2, [pc, #84]	@ (80092e0 <USBH_LL_Init+0x74>)
 800928a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800928e:	4b14      	ldr	r3, [pc, #80]	@ (80092e0 <USBH_LL_Init+0x74>)
 8009290:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009294:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009296:	4b12      	ldr	r3, [pc, #72]	@ (80092e0 <USBH_LL_Init+0x74>)
 8009298:	2208      	movs	r2, #8
 800929a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800929c:	4b10      	ldr	r3, [pc, #64]	@ (80092e0 <USBH_LL_Init+0x74>)
 800929e:	2201      	movs	r2, #1
 80092a0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092a2:	4b0f      	ldr	r3, [pc, #60]	@ (80092e0 <USBH_LL_Init+0x74>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80092a8:	4b0d      	ldr	r3, [pc, #52]	@ (80092e0 <USBH_LL_Init+0x74>)
 80092aa:	2202      	movs	r2, #2
 80092ac:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092ae:	4b0c      	ldr	r3, [pc, #48]	@ (80092e0 <USBH_LL_Init+0x74>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80092b4:	480a      	ldr	r0, [pc, #40]	@ (80092e0 <USBH_LL_Init+0x74>)
 80092b6:	f7f8 f9f2 	bl	800169e <HAL_HCD_Init>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80092c0:	f7f7 fc14 	bl	8000aec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80092c4:	4806      	ldr	r0, [pc, #24]	@ (80092e0 <USBH_LL_Init+0x74>)
 80092c6:	f7f8 fe2f 	bl	8001f28 <HAL_HCD_GetCurrentFrame>
 80092ca:	4603      	mov	r3, r0
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7fe fee0 	bl	8008094 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20000600 	.word	0x20000600

080092e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7f8 fd9c 	bl	8001e38 <HAL_HCD_Start>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009304:	7bfb      	ldrb	r3, [r7, #15]
 8009306:	4618      	mov	r0, r3
 8009308:	f000 f94c 	bl	80095a4 <USBH_Get_USB_Status>
 800930c:	4603      	mov	r3, r0
 800930e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009310:	7bbb      	ldrb	r3, [r7, #14]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009330:	4618      	mov	r0, r3
 8009332:	f7f8 fda4 	bl	8001e7e <HAL_HCD_Stop>
 8009336:	4603      	mov	r3, r0
 8009338:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	4618      	mov	r0, r3
 800933e:	f000 f931 	bl	80095a4 <USBH_Get_USB_Status>
 8009342:	4603      	mov	r3, r0
 8009344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009346:	7bbb      	ldrb	r3, [r7, #14]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009358:	2301      	movs	r3, #1
 800935a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009362:	4618      	mov	r0, r3
 8009364:	f7f8 fdee 	bl	8001f44 <HAL_HCD_GetCurrentSpeed>
 8009368:	4603      	mov	r3, r0
 800936a:	2b02      	cmp	r3, #2
 800936c:	d00c      	beq.n	8009388 <USBH_LL_GetSpeed+0x38>
 800936e:	2b02      	cmp	r3, #2
 8009370:	d80d      	bhi.n	800938e <USBH_LL_GetSpeed+0x3e>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <USBH_LL_GetSpeed+0x2c>
 8009376:	2b01      	cmp	r3, #1
 8009378:	d003      	beq.n	8009382 <USBH_LL_GetSpeed+0x32>
 800937a:	e008      	b.n	800938e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800937c:	2300      	movs	r3, #0
 800937e:	73fb      	strb	r3, [r7, #15]
    break;
 8009380:	e008      	b.n	8009394 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009382:	2301      	movs	r3, #1
 8009384:	73fb      	strb	r3, [r7, #15]
    break;
 8009386:	e005      	b.n	8009394 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009388:	2302      	movs	r3, #2
 800938a:	73fb      	strb	r3, [r7, #15]
    break;
 800938c:	e002      	b.n	8009394 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800938e:	2301      	movs	r3, #1
 8009390:	73fb      	strb	r3, [r7, #15]
    break;
 8009392:	bf00      	nop
  }
  return  speed;
 8009394:	7bfb      	ldrb	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7f8 fd7f 	bl	8001eb8 <HAL_HCD_ResetPort>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 f8ef 	bl	80095a4 <USBH_Get_USB_Status>
 80093c6:	4603      	mov	r3, r0
 80093c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7f8 fd87 	bl	8001efe <HAL_HCD_HC_GetXferCount>
 80093f0:	4603      	mov	r3, r0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 80093fa:	b590      	push	{r4, r7, lr}
 80093fc:	b089      	sub	sp, #36	@ 0x24
 80093fe:	af04      	add	r7, sp, #16
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	4608      	mov	r0, r1
 8009404:	4611      	mov	r1, r2
 8009406:	461a      	mov	r2, r3
 8009408:	4603      	mov	r3, r0
 800940a:	70fb      	strb	r3, [r7, #3]
 800940c:	460b      	mov	r3, r1
 800940e:	70bb      	strb	r3, [r7, #2]
 8009410:	4613      	mov	r3, r2
 8009412:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009422:	787c      	ldrb	r4, [r7, #1]
 8009424:	78ba      	ldrb	r2, [r7, #2]
 8009426:	78f9      	ldrb	r1, [r7, #3]
 8009428:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800942a:	9302      	str	r3, [sp, #8]
 800942c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	4623      	mov	r3, r4
 800943a:	f7f8 f997 	bl	800176c <HAL_HCD_HC_Init>
 800943e:	4603      	mov	r3, r0
 8009440:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 f8ad 	bl	80095a4 <USBH_Get_USB_Status>
 800944a:	4603      	mov	r3, r0
 800944c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800944e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	bd90      	pop	{r4, r7, pc}

08009458 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009472:	b590      	push	{r4, r7, lr}
 8009474:	b089      	sub	sp, #36	@ 0x24
 8009476:	af04      	add	r7, sp, #16
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	4608      	mov	r0, r1
 800947c:	4611      	mov	r1, r2
 800947e:	461a      	mov	r2, r3
 8009480:	4603      	mov	r3, r0
 8009482:	70fb      	strb	r3, [r7, #3]
 8009484:	460b      	mov	r3, r1
 8009486:	70bb      	strb	r3, [r7, #2]
 8009488:	4613      	mov	r3, r2
 800948a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800949a:	787c      	ldrb	r4, [r7, #1]
 800949c:	78ba      	ldrb	r2, [r7, #2]
 800949e:	78f9      	ldrb	r1, [r7, #3]
 80094a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80094a4:	9303      	str	r3, [sp, #12]
 80094a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80094a8:	9302      	str	r3, [sp, #8]
 80094aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ac:	9301      	str	r3, [sp, #4]
 80094ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	4623      	mov	r3, r4
 80094b6:	f7f8 fa11 	bl	80018dc <HAL_HCD_HC_SubmitRequest>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 f86f 	bl	80095a4 <USBH_Get_USB_Status>
 80094c6:	4603      	mov	r3, r0
 80094c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd90      	pop	{r4, r7, pc}

080094d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7f8 fcf2 	bl	8001ed4 <HAL_HCD_HC_GetURBState>
 80094f0:	4603      	mov	r3, r0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b082      	sub	sp, #8
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800950c:	2b01      	cmp	r3, #1
 800950e:	d103      	bne.n	8009518 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	4618      	mov	r0, r3
 8009514:	f000 f872 	bl	80095fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009518:	20c8      	movs	r0, #200	@ 0xc8
 800951a:	f7f7 fded 	bl	80010f8 <HAL_Delay>
  return USBH_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
 8009534:	4613      	mov	r3, r2
 8009536:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800953e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	68f9      	ldr	r1, [r7, #12]
 8009544:	4613      	mov	r3, r2
 8009546:	011b      	lsls	r3, r3, #4
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	440b      	add	r3, r1
 800954e:	3317      	adds	r3, #23
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009556:	78fa      	ldrb	r2, [r7, #3]
 8009558:	68f9      	ldr	r1, [r7, #12]
 800955a:	4613      	mov	r3, r2
 800955c:	011b      	lsls	r3, r3, #4
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	440b      	add	r3, r1
 8009564:	333c      	adds	r3, #60	@ 0x3c
 8009566:	78ba      	ldrb	r2, [r7, #2]
 8009568:	701a      	strb	r2, [r3, #0]
 800956a:	e009      	b.n	8009580 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	68f9      	ldr	r1, [r7, #12]
 8009570:	4613      	mov	r3, r2
 8009572:	011b      	lsls	r3, r3, #4
 8009574:	1a9b      	subs	r3, r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	440b      	add	r3, r1
 800957a:	333d      	adds	r3, #61	@ 0x3d
 800957c:	78ba      	ldrb	r2, [r7, #2]
 800957e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7f7 fdae 	bl	80010f8 <HAL_Delay>
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d817      	bhi.n	80095e8 <USBH_Get_USB_Status+0x44>
 80095b8:	a201      	add	r2, pc, #4	@ (adr r2, 80095c0 <USBH_Get_USB_Status+0x1c>)
 80095ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095be:	bf00      	nop
 80095c0:	080095d1 	.word	0x080095d1
 80095c4:	080095d7 	.word	0x080095d7
 80095c8:	080095dd 	.word	0x080095dd
 80095cc:	080095e3 	.word	0x080095e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]
    break;
 80095d4:	e00b      	b.n	80095ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80095d6:	2302      	movs	r3, #2
 80095d8:	73fb      	strb	r3, [r7, #15]
    break;
 80095da:	e008      	b.n	80095ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80095dc:	2301      	movs	r3, #1
 80095de:	73fb      	strb	r3, [r7, #15]
    break;
 80095e0:	e005      	b.n	80095ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80095e2:	2302      	movs	r3, #2
 80095e4:	73fb      	strb	r3, [r7, #15]
    break;
 80095e6:	e002      	b.n	80095ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80095e8:	2302      	movs	r3, #2
 80095ea:	73fb      	strb	r3, [r7, #15]
    break;
 80095ec:	bf00      	nop
  }
  return usb_status;
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d102      	bne.n	8009616 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
 8009614:	e001      	b.n	800961a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009616:	2301      	movs	r3, #1
 8009618:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	461a      	mov	r2, r3
 800961e:	2101      	movs	r1, #1
 8009620:	4803      	ldr	r0, [pc, #12]	@ (8009630 <MX_DriverVbusFS+0x34>)
 8009622:	f7f8 f823 	bl	800166c <HAL_GPIO_WritePin>
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	40020800 	.word	0x40020800

08009634 <malloc>:
 8009634:	4b02      	ldr	r3, [pc, #8]	@ (8009640 <malloc+0xc>)
 8009636:	4601      	mov	r1, r0
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f000 b82d 	b.w	8009698 <_malloc_r>
 800963e:	bf00      	nop
 8009640:	2000002c 	.word	0x2000002c

08009644 <free>:
 8009644:	4b02      	ldr	r3, [pc, #8]	@ (8009650 <free+0xc>)
 8009646:	4601      	mov	r1, r0
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	f000 b8f5 	b.w	8009838 <_free_r>
 800964e:	bf00      	nop
 8009650:	2000002c 	.word	0x2000002c

08009654 <sbrk_aligned>:
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	4e0f      	ldr	r6, [pc, #60]	@ (8009694 <sbrk_aligned+0x40>)
 8009658:	460c      	mov	r4, r1
 800965a:	6831      	ldr	r1, [r6, #0]
 800965c:	4605      	mov	r5, r0
 800965e:	b911      	cbnz	r1, 8009666 <sbrk_aligned+0x12>
 8009660:	f000 f8ae 	bl	80097c0 <_sbrk_r>
 8009664:	6030      	str	r0, [r6, #0]
 8009666:	4621      	mov	r1, r4
 8009668:	4628      	mov	r0, r5
 800966a:	f000 f8a9 	bl	80097c0 <_sbrk_r>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d103      	bne.n	800967a <sbrk_aligned+0x26>
 8009672:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009676:	4620      	mov	r0, r4
 8009678:	bd70      	pop	{r4, r5, r6, pc}
 800967a:	1cc4      	adds	r4, r0, #3
 800967c:	f024 0403 	bic.w	r4, r4, #3
 8009680:	42a0      	cmp	r0, r4
 8009682:	d0f8      	beq.n	8009676 <sbrk_aligned+0x22>
 8009684:	1a21      	subs	r1, r4, r0
 8009686:	4628      	mov	r0, r5
 8009688:	f000 f89a 	bl	80097c0 <_sbrk_r>
 800968c:	3001      	adds	r0, #1
 800968e:	d1f2      	bne.n	8009676 <sbrk_aligned+0x22>
 8009690:	e7ef      	b.n	8009672 <sbrk_aligned+0x1e>
 8009692:	bf00      	nop
 8009694:	200009e0 	.word	0x200009e0

08009698 <_malloc_r>:
 8009698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800969c:	1ccd      	adds	r5, r1, #3
 800969e:	f025 0503 	bic.w	r5, r5, #3
 80096a2:	3508      	adds	r5, #8
 80096a4:	2d0c      	cmp	r5, #12
 80096a6:	bf38      	it	cc
 80096a8:	250c      	movcc	r5, #12
 80096aa:	2d00      	cmp	r5, #0
 80096ac:	4606      	mov	r6, r0
 80096ae:	db01      	blt.n	80096b4 <_malloc_r+0x1c>
 80096b0:	42a9      	cmp	r1, r5
 80096b2:	d904      	bls.n	80096be <_malloc_r+0x26>
 80096b4:	230c      	movs	r3, #12
 80096b6:	6033      	str	r3, [r6, #0]
 80096b8:	2000      	movs	r0, #0
 80096ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009794 <_malloc_r+0xfc>
 80096c2:	f000 f869 	bl	8009798 <__malloc_lock>
 80096c6:	f8d8 3000 	ldr.w	r3, [r8]
 80096ca:	461c      	mov	r4, r3
 80096cc:	bb44      	cbnz	r4, 8009720 <_malloc_r+0x88>
 80096ce:	4629      	mov	r1, r5
 80096d0:	4630      	mov	r0, r6
 80096d2:	f7ff ffbf 	bl	8009654 <sbrk_aligned>
 80096d6:	1c43      	adds	r3, r0, #1
 80096d8:	4604      	mov	r4, r0
 80096da:	d158      	bne.n	800978e <_malloc_r+0xf6>
 80096dc:	f8d8 4000 	ldr.w	r4, [r8]
 80096e0:	4627      	mov	r7, r4
 80096e2:	2f00      	cmp	r7, #0
 80096e4:	d143      	bne.n	800976e <_malloc_r+0xd6>
 80096e6:	2c00      	cmp	r4, #0
 80096e8:	d04b      	beq.n	8009782 <_malloc_r+0xea>
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	4639      	mov	r1, r7
 80096ee:	4630      	mov	r0, r6
 80096f0:	eb04 0903 	add.w	r9, r4, r3
 80096f4:	f000 f864 	bl	80097c0 <_sbrk_r>
 80096f8:	4581      	cmp	r9, r0
 80096fa:	d142      	bne.n	8009782 <_malloc_r+0xea>
 80096fc:	6821      	ldr	r1, [r4, #0]
 80096fe:	1a6d      	subs	r5, r5, r1
 8009700:	4629      	mov	r1, r5
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff ffa6 	bl	8009654 <sbrk_aligned>
 8009708:	3001      	adds	r0, #1
 800970a:	d03a      	beq.n	8009782 <_malloc_r+0xea>
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	442b      	add	r3, r5
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	f8d8 3000 	ldr.w	r3, [r8]
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	bb62      	cbnz	r2, 8009774 <_malloc_r+0xdc>
 800971a:	f8c8 7000 	str.w	r7, [r8]
 800971e:	e00f      	b.n	8009740 <_malloc_r+0xa8>
 8009720:	6822      	ldr	r2, [r4, #0]
 8009722:	1b52      	subs	r2, r2, r5
 8009724:	d420      	bmi.n	8009768 <_malloc_r+0xd0>
 8009726:	2a0b      	cmp	r2, #11
 8009728:	d917      	bls.n	800975a <_malloc_r+0xc2>
 800972a:	1961      	adds	r1, r4, r5
 800972c:	42a3      	cmp	r3, r4
 800972e:	6025      	str	r5, [r4, #0]
 8009730:	bf18      	it	ne
 8009732:	6059      	strne	r1, [r3, #4]
 8009734:	6863      	ldr	r3, [r4, #4]
 8009736:	bf08      	it	eq
 8009738:	f8c8 1000 	streq.w	r1, [r8]
 800973c:	5162      	str	r2, [r4, r5]
 800973e:	604b      	str	r3, [r1, #4]
 8009740:	4630      	mov	r0, r6
 8009742:	f000 f82f 	bl	80097a4 <__malloc_unlock>
 8009746:	f104 000b 	add.w	r0, r4, #11
 800974a:	1d23      	adds	r3, r4, #4
 800974c:	f020 0007 	bic.w	r0, r0, #7
 8009750:	1ac2      	subs	r2, r0, r3
 8009752:	bf1c      	itt	ne
 8009754:	1a1b      	subne	r3, r3, r0
 8009756:	50a3      	strne	r3, [r4, r2]
 8009758:	e7af      	b.n	80096ba <_malloc_r+0x22>
 800975a:	6862      	ldr	r2, [r4, #4]
 800975c:	42a3      	cmp	r3, r4
 800975e:	bf0c      	ite	eq
 8009760:	f8c8 2000 	streq.w	r2, [r8]
 8009764:	605a      	strne	r2, [r3, #4]
 8009766:	e7eb      	b.n	8009740 <_malloc_r+0xa8>
 8009768:	4623      	mov	r3, r4
 800976a:	6864      	ldr	r4, [r4, #4]
 800976c:	e7ae      	b.n	80096cc <_malloc_r+0x34>
 800976e:	463c      	mov	r4, r7
 8009770:	687f      	ldr	r7, [r7, #4]
 8009772:	e7b6      	b.n	80096e2 <_malloc_r+0x4a>
 8009774:	461a      	mov	r2, r3
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	42a3      	cmp	r3, r4
 800977a:	d1fb      	bne.n	8009774 <_malloc_r+0xdc>
 800977c:	2300      	movs	r3, #0
 800977e:	6053      	str	r3, [r2, #4]
 8009780:	e7de      	b.n	8009740 <_malloc_r+0xa8>
 8009782:	230c      	movs	r3, #12
 8009784:	6033      	str	r3, [r6, #0]
 8009786:	4630      	mov	r0, r6
 8009788:	f000 f80c 	bl	80097a4 <__malloc_unlock>
 800978c:	e794      	b.n	80096b8 <_malloc_r+0x20>
 800978e:	6005      	str	r5, [r0, #0]
 8009790:	e7d6      	b.n	8009740 <_malloc_r+0xa8>
 8009792:	bf00      	nop
 8009794:	200009e4 	.word	0x200009e4

08009798 <__malloc_lock>:
 8009798:	4801      	ldr	r0, [pc, #4]	@ (80097a0 <__malloc_lock+0x8>)
 800979a:	f000 b84b 	b.w	8009834 <__retarget_lock_acquire_recursive>
 800979e:	bf00      	nop
 80097a0:	20000b24 	.word	0x20000b24

080097a4 <__malloc_unlock>:
 80097a4:	4801      	ldr	r0, [pc, #4]	@ (80097ac <__malloc_unlock+0x8>)
 80097a6:	f000 b846 	b.w	8009836 <__retarget_lock_release_recursive>
 80097aa:	bf00      	nop
 80097ac:	20000b24 	.word	0x20000b24

080097b0 <memset>:
 80097b0:	4402      	add	r2, r0
 80097b2:	4603      	mov	r3, r0
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d100      	bne.n	80097ba <memset+0xa>
 80097b8:	4770      	bx	lr
 80097ba:	f803 1b01 	strb.w	r1, [r3], #1
 80097be:	e7f9      	b.n	80097b4 <memset+0x4>

080097c0 <_sbrk_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d06      	ldr	r5, [pc, #24]	@ (80097dc <_sbrk_r+0x1c>)
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	f7f7 fbb0 	bl	8000f30 <_sbrk>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_sbrk_r+0x1a>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_sbrk_r+0x1a>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	20000b20 	.word	0x20000b20

080097e0 <__errno>:
 80097e0:	4b01      	ldr	r3, [pc, #4]	@ (80097e8 <__errno+0x8>)
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	2000002c 	.word	0x2000002c

080097ec <__libc_init_array>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009824 <__libc_init_array+0x38>)
 80097f0:	4c0d      	ldr	r4, [pc, #52]	@ (8009828 <__libc_init_array+0x3c>)
 80097f2:	1b64      	subs	r4, r4, r5
 80097f4:	10a4      	asrs	r4, r4, #2
 80097f6:	2600      	movs	r6, #0
 80097f8:	42a6      	cmp	r6, r4
 80097fa:	d109      	bne.n	8009810 <__libc_init_array+0x24>
 80097fc:	4d0b      	ldr	r5, [pc, #44]	@ (800982c <__libc_init_array+0x40>)
 80097fe:	4c0c      	ldr	r4, [pc, #48]	@ (8009830 <__libc_init_array+0x44>)
 8009800:	f000 f864 	bl	80098cc <_init>
 8009804:	1b64      	subs	r4, r4, r5
 8009806:	10a4      	asrs	r4, r4, #2
 8009808:	2600      	movs	r6, #0
 800980a:	42a6      	cmp	r6, r4
 800980c:	d105      	bne.n	800981a <__libc_init_array+0x2e>
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	f855 3b04 	ldr.w	r3, [r5], #4
 8009814:	4798      	blx	r3
 8009816:	3601      	adds	r6, #1
 8009818:	e7ee      	b.n	80097f8 <__libc_init_array+0xc>
 800981a:	f855 3b04 	ldr.w	r3, [r5], #4
 800981e:	4798      	blx	r3
 8009820:	3601      	adds	r6, #1
 8009822:	e7f2      	b.n	800980a <__libc_init_array+0x1e>
 8009824:	08009908 	.word	0x08009908
 8009828:	08009908 	.word	0x08009908
 800982c:	08009908 	.word	0x08009908
 8009830:	0800990c 	.word	0x0800990c

08009834 <__retarget_lock_acquire_recursive>:
 8009834:	4770      	bx	lr

08009836 <__retarget_lock_release_recursive>:
 8009836:	4770      	bx	lr

08009838 <_free_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4605      	mov	r5, r0
 800983c:	2900      	cmp	r1, #0
 800983e:	d041      	beq.n	80098c4 <_free_r+0x8c>
 8009840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009844:	1f0c      	subs	r4, r1, #4
 8009846:	2b00      	cmp	r3, #0
 8009848:	bfb8      	it	lt
 800984a:	18e4      	addlt	r4, r4, r3
 800984c:	f7ff ffa4 	bl	8009798 <__malloc_lock>
 8009850:	4a1d      	ldr	r2, [pc, #116]	@ (80098c8 <_free_r+0x90>)
 8009852:	6813      	ldr	r3, [r2, #0]
 8009854:	b933      	cbnz	r3, 8009864 <_free_r+0x2c>
 8009856:	6063      	str	r3, [r4, #4]
 8009858:	6014      	str	r4, [r2, #0]
 800985a:	4628      	mov	r0, r5
 800985c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009860:	f7ff bfa0 	b.w	80097a4 <__malloc_unlock>
 8009864:	42a3      	cmp	r3, r4
 8009866:	d908      	bls.n	800987a <_free_r+0x42>
 8009868:	6820      	ldr	r0, [r4, #0]
 800986a:	1821      	adds	r1, r4, r0
 800986c:	428b      	cmp	r3, r1
 800986e:	bf01      	itttt	eq
 8009870:	6819      	ldreq	r1, [r3, #0]
 8009872:	685b      	ldreq	r3, [r3, #4]
 8009874:	1809      	addeq	r1, r1, r0
 8009876:	6021      	streq	r1, [r4, #0]
 8009878:	e7ed      	b.n	8009856 <_free_r+0x1e>
 800987a:	461a      	mov	r2, r3
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	b10b      	cbz	r3, 8009884 <_free_r+0x4c>
 8009880:	42a3      	cmp	r3, r4
 8009882:	d9fa      	bls.n	800987a <_free_r+0x42>
 8009884:	6811      	ldr	r1, [r2, #0]
 8009886:	1850      	adds	r0, r2, r1
 8009888:	42a0      	cmp	r0, r4
 800988a:	d10b      	bne.n	80098a4 <_free_r+0x6c>
 800988c:	6820      	ldr	r0, [r4, #0]
 800988e:	4401      	add	r1, r0
 8009890:	1850      	adds	r0, r2, r1
 8009892:	4283      	cmp	r3, r0
 8009894:	6011      	str	r1, [r2, #0]
 8009896:	d1e0      	bne.n	800985a <_free_r+0x22>
 8009898:	6818      	ldr	r0, [r3, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	6053      	str	r3, [r2, #4]
 800989e:	4408      	add	r0, r1
 80098a0:	6010      	str	r0, [r2, #0]
 80098a2:	e7da      	b.n	800985a <_free_r+0x22>
 80098a4:	d902      	bls.n	80098ac <_free_r+0x74>
 80098a6:	230c      	movs	r3, #12
 80098a8:	602b      	str	r3, [r5, #0]
 80098aa:	e7d6      	b.n	800985a <_free_r+0x22>
 80098ac:	6820      	ldr	r0, [r4, #0]
 80098ae:	1821      	adds	r1, r4, r0
 80098b0:	428b      	cmp	r3, r1
 80098b2:	bf04      	itt	eq
 80098b4:	6819      	ldreq	r1, [r3, #0]
 80098b6:	685b      	ldreq	r3, [r3, #4]
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	bf04      	itt	eq
 80098bc:	1809      	addeq	r1, r1, r0
 80098be:	6021      	streq	r1, [r4, #0]
 80098c0:	6054      	str	r4, [r2, #4]
 80098c2:	e7ca      	b.n	800985a <_free_r+0x22>
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
 80098c6:	bf00      	nop
 80098c8:	200009e4 	.word	0x200009e4

080098cc <_init>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	bf00      	nop
 80098d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d2:	bc08      	pop	{r3}
 80098d4:	469e      	mov	lr, r3
 80098d6:	4770      	bx	lr

080098d8 <_fini>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	bf00      	nop
 80098dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098de:	bc08      	pop	{r3}
 80098e0:	469e      	mov	lr, r3
 80098e2:	4770      	bx	lr
