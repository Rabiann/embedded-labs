
lab1_task_hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008964  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008afc  08008afc  00009afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b18  08008b18  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008b18  08008b18  00009b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b20  08008b20  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b20  08008b20  00009b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b24  08008b24  00009b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008b28  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a64  2000007c  08008ba4  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  08008ba4  0000aae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a7d  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a4  00000000  00000000  0001eb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  000223d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d39  00000000  00000000  00023530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a46  00000000  00000000  00024269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f9a  00000000  00000000  0003ccaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecaf  00000000  00000000  00053c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e28f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b58  00000000  00000000  000e293c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e7494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008ae4 	.word	0x08008ae4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08008ae4 	.word	0x08008ae4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fcb2 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f854 	bl	80005b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000510:	f000 f8ba 	bl	8000688 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f99a 	bl	800084c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000518:	f000 f8d6 	bl	80006c8 <MX_I2C1_Init>
  MX_I2S2_Init();
 800051c:	f000 f902 	bl	8000724 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000520:	f000 f92e 	bl	8000780 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000524:	f000 f95c 	bl	80007e0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000528:	f007 fe98 	bl	800825c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800052c:	f007 febc 	bl	80082a8 <MX_USB_HOST_Process>


    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000536:	481f      	ldr	r0, [pc, #124]	@ (80005b4 <main+0xb0>)
 8000538:	f000 ffc6 	bl	80014c8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800053c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000540:	f000 fd08 	bl	8000f54 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800054a:	481a      	ldr	r0, [pc, #104]	@ (80005b4 <main+0xb0>)
 800054c:	f000 ffbc 	bl	80014c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000556:	4817      	ldr	r0, [pc, #92]	@ (80005b4 <main+0xb0>)
 8000558:	f000 ffb6 	bl	80014c8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800055c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000560:	f000 fcf8 	bl	8000f54 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800056a:	4812      	ldr	r0, [pc, #72]	@ (80005b4 <main+0xb0>)
 800056c:	f000 ffac 	bl	80014c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000576:	480f      	ldr	r0, [pc, #60]	@ (80005b4 <main+0xb0>)
 8000578:	f000 ffa6 	bl	80014c8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800057c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000580:	f000 fce8 	bl	8000f54 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058a:	480a      	ldr	r0, [pc, #40]	@ (80005b4 <main+0xb0>)
 800058c:	f000 ff9c 	bl	80014c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000596:	4807      	ldr	r0, [pc, #28]	@ (80005b4 <main+0xb0>)
 8000598:	f000 ff96 	bl	80014c8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800059c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a0:	f000 fcd8 	bl	8000f54 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005aa:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <main+0xb0>)
 80005ac:	f000 ff8c 	bl	80014c8 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80005b0:	bf00      	nop
 80005b2:	e7bb      	b.n	800052c <main+0x28>
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	@ 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f008 f9fe 	bl	80089c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	4a26      	ldr	r2, [pc, #152]	@ (8000680 <SystemClock_Config+0xc8>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ec:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b21      	ldr	r3, [pc, #132]	@ (8000684 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a20      	ldr	r2, [pc, #128]	@ (8000684 <SystemClock_Config+0xcc>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800062c:	2348      	movs	r3, #72	@ 0x48
 800062e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000634:	2303      	movs	r3, #3
 8000636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fe51 	bl	80042e4 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 f9da 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2102      	movs	r1, #2
 8000668:	4618      	mov	r0, r3
 800066a:	f004 f8b3 	bl	80047d4 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 f9c4 	bl	8000a00 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	@ 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
 800069c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800069e:	2301      	movs	r3, #1
 80006a0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006a2:	23c8      	movs	r3, #200	@ 0xc8
 80006a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80006a6:	2308      	movs	r3, #8
 80006a8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fa9b 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80006bc:	f000 f9a0 	bl	8000a00 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	@ (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f003 f809 	bl	800371c <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f976 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000098 	.word	0x20000098
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2S2_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <MX_I2S2_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_I2S2_Init+0x50>)
 8000730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000734:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2S2_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <MX_I2S2_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_I2S2_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_I2S2_Init+0x50>)
 800074a:	4a0c      	ldr	r2, [pc, #48]	@ (800077c <MX_I2S2_Init+0x58>)
 800074c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_I2S2_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_I2S2_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_I2S2_Init+0x50>)
 800075c:	2201      	movs	r2, #1
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_I2S2_Init+0x50>)
 8000762:	f003 f91f 	bl	80039a4 <HAL_I2S_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f948 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000ec 	.word	0x200000ec
 8000778:	40003800 	.word	0x40003800
 800077c:	00017700 	.word	0x00017700

08000780 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_I2S3_Init+0x54>)
 8000786:	4a14      	ldr	r2, [pc, #80]	@ (80007d8 <MX_I2S3_Init+0x58>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800078a:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_I2S3_Init+0x54>)
 800078c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000790:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_I2S3_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000798:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_I2S3_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800079e:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <MX_I2S3_Init+0x54>)
 80007a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <MX_I2S3_Init+0x54>)
 80007a8:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <MX_I2S3_Init+0x5c>)
 80007aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_I2S3_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_I2S3_Init+0x54>)
 80007c0:	f003 f8f0 	bl	80039a4 <HAL_I2S_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ca:	f000 f919 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000134 	.word	0x20000134
 80007d8:	40003c00 	.word	0x40003c00
 80007dc:	00017700 	.word	0x00017700

080007e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e4:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <MX_SPI1_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_SPI1_Init+0x64>)
 800080c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000810:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_SPI1_Init+0x64>)
 800082c:	220a      	movs	r2, #10
 800082e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000832:	f004 fb2d 	bl	8004e90 <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800083c:	f000 f8e0 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000017c 	.word	0x2000017c
 8000848:	40013000 	.word	0x40013000

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	4b61      	ldr	r3, [pc, #388]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a60      	ldr	r2, [pc, #384]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b5e      	ldr	r3, [pc, #376]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	4b5a      	ldr	r3, [pc, #360]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a59      	ldr	r2, [pc, #356]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b57      	ldr	r3, [pc, #348]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b53      	ldr	r3, [pc, #332]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a52      	ldr	r2, [pc, #328]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b50      	ldr	r3, [pc, #320]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b4c      	ldr	r3, [pc, #304]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a4b      	ldr	r2, [pc, #300]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b49      	ldr	r3, [pc, #292]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b45      	ldr	r3, [pc, #276]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a44      	ldr	r2, [pc, #272]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b42      	ldr	r3, [pc, #264]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b3e      	ldr	r3, [pc, #248]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a3d      	ldr	r2, [pc, #244]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b3b      	ldr	r3, [pc, #236]	@ (80009ec <MX_GPIO_Init+0x1a0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2108      	movs	r1, #8
 800090e:	4838      	ldr	r0, [pc, #224]	@ (80009f0 <MX_GPIO_Init+0x1a4>)
 8000910:	f000 fdda 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4836      	ldr	r0, [pc, #216]	@ (80009f4 <MX_GPIO_Init+0x1a8>)
 800091a:	f000 fdd5 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091e:	2200      	movs	r2, #0
 8000920:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000924:	4834      	ldr	r0, [pc, #208]	@ (80009f8 <MX_GPIO_Init+0x1ac>)
 8000926:	f000 fdcf 	bl	80014c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800092a:	2304      	movs	r3, #4
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	482c      	ldr	r0, [pc, #176]	@ (80009f0 <MX_GPIO_Init+0x1a4>)
 800093e:	f000 fc3f 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000942:	2308      	movs	r3, #8
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4825      	ldr	r0, [pc, #148]	@ (80009f0 <MX_GPIO_Init+0x1a4>)
 800095a:	f000 fc31 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800095e:	2332      	movs	r3, #50	@ 0x32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000962:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	481f      	ldr	r0, [pc, #124]	@ (80009f0 <MX_GPIO_Init+0x1a4>)
 8000974:	f000 fc24 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000978:	2301      	movs	r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4819      	ldr	r0, [pc, #100]	@ (80009f4 <MX_GPIO_Init+0x1a8>)
 8000990:	f000 fc16 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000998:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4814      	ldr	r0, [pc, #80]	@ (80009fc <MX_GPIO_Init+0x1b0>)
 80009aa:	f000 fc09 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ae:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <MX_GPIO_Init+0x1ac>)
 80009c8:	f000 fbfa 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009cc:	2320      	movs	r3, #32
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <MX_GPIO_Init+0x1ac>)
 80009e0:	f000 fbee 	bl	80011c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e4:	bf00      	nop
 80009e6:	3730      	adds	r7, #48	@ 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	40020000 	.word	0x40020000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 fb76 	bl	800113c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	@ (8000ae0 <HAL_I2C_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12c      	bne.n	8000ad8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a17      	ldr	r2, [pc, #92]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a9a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa0:	2312      	movs	r3, #18
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aac:	2304      	movs	r3, #4
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <HAL_I2C_MspInit+0x8c>)
 8000ab8:	f000 fb82 	bl	80011c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	@ 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	@ 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a59      	ldr	r2, [pc, #356]	@ (8000c70 <HAL_I2S_MspInit+0x184>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d15b      	bne.n	8000bc6 <HAL_I2S_MspInit+0xda>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
 8000b12:	4b58      	ldr	r3, [pc, #352]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a57      	ldr	r2, [pc, #348]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b55      	ldr	r3, [pc, #340]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b26:	623b      	str	r3, [r7, #32]
 8000b28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	4b51      	ldr	r3, [pc, #324]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a50      	ldr	r2, [pc, #320]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a49      	ldr	r2, [pc, #292]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b47      	ldr	r3, [pc, #284]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b62:	2304      	movs	r3, #4
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b72:	2306      	movs	r3, #6
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	483e      	ldr	r0, [pc, #248]	@ (8000c78 <HAL_I2S_MspInit+0x18c>)
 8000b7e:	f000 fb1f 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b82:	2308      	movs	r3, #8
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b92:	2305      	movs	r3, #5
 8000b94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4836      	ldr	r0, [pc, #216]	@ (8000c78 <HAL_I2S_MspInit+0x18c>)
 8000b9e:	f000 fb0f 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ba2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	482f      	ldr	r0, [pc, #188]	@ (8000c7c <HAL_I2S_MspInit+0x190>)
 8000bc0:	f000 fafe 	bl	80011c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bc4:	e04f      	b.n	8000c66 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a2d      	ldr	r2, [pc, #180]	@ (8000c80 <HAL_I2S_MspInit+0x194>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d14a      	bne.n	8000c66 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	4a26      	ldr	r2, [pc, #152]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be0:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c10:	4a18      	ldr	r2, [pc, #96]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <HAL_I2S_MspInit+0x188>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c24:	2310      	movs	r3, #16
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c34:	2306      	movs	r3, #6
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4811      	ldr	r0, [pc, #68]	@ (8000c84 <HAL_I2S_MspInit+0x198>)
 8000c40:	f000 fabe 	bl	80011c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c44:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c56:	2306      	movs	r3, #6
 8000c58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <HAL_I2S_MspInit+0x18c>)
 8000c62:	f000 faad 	bl	80011c0 <HAL_GPIO_Init>
}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	@ 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40003800 	.word	0x40003800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40003c00 	.word	0x40003c00
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	@ 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	@ (8000d0c <HAL_SPI_MspInit+0x84>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d12b      	bne.n	8000d02 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <HAL_SPI_MspInit+0x88>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	4a17      	ldr	r2, [pc, #92]	@ (8000d10 <HAL_SPI_MspInit+0x88>)
 8000cb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <HAL_SPI_MspInit+0x88>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <HAL_SPI_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a10      	ldr	r2, [pc, #64]	@ (8000d10 <HAL_SPI_MspInit+0x88>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_SPI_MspInit+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ce2:	23e0      	movs	r3, #224	@ 0xe0
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <HAL_SPI_MspInit+0x8c>)
 8000cfe:	f000 fa5f 	bl	80011c0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	@ 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40013000 	.word	0x40013000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <NMI_Handler+0x4>

08000d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <MemManage_Handler+0x4>

08000d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6e:	f000 f8d1 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <OTG_FS_IRQHandler+0x10>)
 8000d7e:	f000 fe79 	bl	8001a74 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200005b8 	.word	0x200005b8

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f007 fe1c 	bl	80089f8 <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20020000 	.word	0x20020000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	200001d4 	.word	0x200001d4
 8000df4:	20000ae0 	.word	0x20000ae0

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e20:	f7ff ffea 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f007 fddb 	bl	8008a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fb59 	bl	8000504 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e60:	08008b28 	.word	0x08008b28
  ldr r2, =_sbss
 8000e64:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e68:	20000ae0 	.word	0x20000ae0

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	@ (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f94f 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fdb2 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f967 	bl	80011a6 <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef0:	f000 f92f 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	200001d8 	.word	0x200001d8

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	@ (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200001d8 	.word	0x200001d8

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db0b      	blt.n	800102a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	4907      	ldr	r1, [pc, #28]	@ (8001038 <__NVIC_EnableIRQ+0x38>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	@ (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	@ (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	@ 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	@ 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800111c:	f7ff ff8e 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff29 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff3e 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff8e 	bl	8001090 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5d 	bl	800103c <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff31 	bl	8001000 <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffa2 	bl	80010f8 <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	@ 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	e159      	b.n	8001490 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011dc:	2201      	movs	r2, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	f040 8148 	bne.w	800148a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d005      	beq.n	8001212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	2b02      	cmp	r3, #2
 8001210:	d130      	bne.n	8001274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001248:	2201      	movs	r2, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 0201 	and.w	r2, r3, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b03      	cmp	r3, #3
 800127e:	d017      	beq.n	80012b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d123      	bne.n	8001304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	69b9      	ldr	r1, [r7, #24]
 8001300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0203 	and.w	r2, r3, #3
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80a2 	beq.w	800148a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b57      	ldr	r3, [pc, #348]	@ (80014a8 <HAL_GPIO_Init+0x2e8>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	4a56      	ldr	r2, [pc, #344]	@ (80014a8 <HAL_GPIO_Init+0x2e8>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001354:	6453      	str	r3, [r2, #68]	@ 0x44
 8001356:	4b54      	ldr	r3, [pc, #336]	@ (80014a8 <HAL_GPIO_Init+0x2e8>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001362:	4a52      	ldr	r2, [pc, #328]	@ (80014ac <HAL_GPIO_Init+0x2ec>)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a49      	ldr	r2, [pc, #292]	@ (80014b0 <HAL_GPIO_Init+0x2f0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d019      	beq.n	80013c2 <HAL_GPIO_Init+0x202>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a48      	ldr	r2, [pc, #288]	@ (80014b4 <HAL_GPIO_Init+0x2f4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x1fe>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a47      	ldr	r2, [pc, #284]	@ (80014b8 <HAL_GPIO_Init+0x2f8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x1fa>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a46      	ldr	r2, [pc, #280]	@ (80014bc <HAL_GPIO_Init+0x2fc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x1f6>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a45      	ldr	r2, [pc, #276]	@ (80014c0 <HAL_GPIO_Init+0x300>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x1f2>
 80013ae:	2304      	movs	r3, #4
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x204>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x204>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x204>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x204>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x204>
 80013c2:	2300      	movs	r3, #0
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	@ (80014ac <HAL_GPIO_Init+0x2ec>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b38      	ldr	r3, [pc, #224]	@ (80014c4 <HAL_GPIO_Init+0x304>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a2f      	ldr	r2, [pc, #188]	@ (80014c4 <HAL_GPIO_Init+0x304>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b2d      	ldr	r3, [pc, #180]	@ (80014c4 <HAL_GPIO_Init+0x304>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a24      	ldr	r2, [pc, #144]	@ (80014c4 <HAL_GPIO_Init+0x304>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001436:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <HAL_GPIO_Init+0x304>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145a:	4a1a      	ldr	r2, [pc, #104]	@ (80014c4 <HAL_GPIO_Init+0x304>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_GPIO_Init+0x304>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001484:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <HAL_GPIO_Init+0x304>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f aea2 	bls.w	80011dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3724      	adds	r7, #36	@ 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af02      	add	r7, sp, #8
 8001500:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e059      	b.n	80015c0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f006 fef6 	bl	8008318 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2203      	movs	r2, #3
 8001530:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800153a:	d102      	bne.n	8001542 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f003 fda0 	bl	800508c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7c1a      	ldrb	r2, [r3, #16]
 8001554:	f88d 2000 	strb.w	r2, [sp]
 8001558:	3304      	adds	r3, #4
 800155a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800155c:	f003 fd21 	bl	8004fa2 <USB_CoreInit>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2202      	movs	r2, #2
 800156a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e026      	b.n	80015c0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2101      	movs	r1, #1
 8001578:	4618      	mov	r0, r3
 800157a:	f003 fd98 	bl	80050ae <USB_SetCurrentMode>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2202      	movs	r2, #2
 8001588:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e017      	b.n	80015c0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7c1a      	ldrb	r2, [r3, #16]
 8001598:	f88d 2000 	strb.w	r2, [sp]
 800159c:	3304      	adds	r3, #4
 800159e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a0:	f003 ff42 	bl	8005428 <USB_HostInit>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e004      	b.n	80015c0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b08b      	sub	sp, #44	@ 0x2c
 80015cc:	af04      	add	r7, sp, #16
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	4608      	mov	r0, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	70fb      	strb	r3, [r7, #3]
 80015da:	460b      	mov	r3, r1
 80015dc:	70bb      	strb	r3, [r7, #2]
 80015de:	4613      	mov	r3, r2
 80015e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015e2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015e4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_HCD_HC_Init+0x2c>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e09d      	b.n	8001730 <HAL_HCD_HC_Init+0x168>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3319      	adds	r3, #25
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	3314      	adds	r3, #20
 8001620:	787a      	ldrb	r2, [r7, #1]
 8001622:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3315      	adds	r3, #21
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3326      	adds	r3, #38	@ 0x26
 8001648:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800164c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800164e:	78fa      	ldrb	r2, [r7, #3]
 8001650:	78bb      	ldrb	r3, [r7, #2]
 8001652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001656:	b2d8      	uxtb	r0, r3
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3316      	adds	r3, #22
 8001666:	4602      	mov	r2, r0
 8001668:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	4619      	mov	r1, r3
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fba4 	bl	8001dbc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001674:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001678:	2b00      	cmp	r3, #0
 800167a:	da0a      	bge.n	8001692 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	3317      	adds	r3, #23
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	e009      	b.n	80016a6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001692:	78fa      	ldrb	r2, [r7, #3]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	3317      	adds	r3, #23
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 f80a 	bl	80056c4 <USB_GetHostSpeed>
 80016b0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d10b      	bne.n	80016d2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d107      	bne.n	80016d2 <HAL_HCD_HC_Init+0x10a>
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d104      	bne.n	80016d2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2bbc      	cmp	r3, #188	@ 0xbc
 80016cc:	d901      	bls.n	80016d2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016ce:	23bc      	movs	r3, #188	@ 0xbc
 80016d0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	3318      	adds	r3, #24
 80016e2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	b298      	uxth	r0, r3
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	3328      	adds	r3, #40	@ 0x28
 80016fc:	4602      	mov	r2, r0
 80016fe:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	b29b      	uxth	r3, r3
 8001708:	787c      	ldrb	r4, [r7, #1]
 800170a:	78ba      	ldrb	r2, [r7, #2]
 800170c:	78f9      	ldrb	r1, [r7, #3]
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4623      	mov	r3, r4
 800171e:	f003 fff9 	bl	8005714 <USB_HC_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}

08001738 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4603      	mov	r3, r0
 8001748:	70fb      	strb	r3, [r7, #3]
 800174a:	460b      	mov	r3, r1
 800174c:	70bb      	strb	r3, [r7, #2]
 800174e:	4613      	mov	r3, r2
 8001750:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	1a9b      	subs	r3, r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	3317      	adds	r3, #23
 8001762:	78ba      	ldrb	r2, [r7, #2]
 8001764:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	3326      	adds	r3, #38	@ 0x26
 8001776:	787a      	ldrb	r2, [r7, #1]
 8001778:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800177a:	7c3b      	ldrb	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d114      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	332a      	adds	r3, #42	@ 0x2a
 8001790:	2203      	movs	r2, #3
 8001792:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3319      	adds	r3, #25
 80017a4:	7f3a      	ldrb	r2, [r7, #28]
 80017a6:	701a      	strb	r2, [r3, #0]
 80017a8:	e009      	b.n	80017be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	332a      	adds	r3, #42	@ 0x2a
 80017ba:	2202      	movs	r2, #2
 80017bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017be:	787b      	ldrb	r3, [r7, #1]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	f200 8102 	bhi.w	80019ca <HAL_HCD_HC_SubmitRequest+0x292>
 80017c6:	a201      	add	r2, pc, #4	@ (adr r2, 80017cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080019b5 	.word	0x080019b5
 80017d4:	080018a1 	.word	0x080018a1
 80017d8:	0800192b 	.word	0x0800192b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017dc:	7c3b      	ldrb	r3, [r7, #16]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f040 80f5 	bne.w	80019ce <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017e4:	78bb      	ldrb	r3, [r7, #2]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d12d      	bne.n	8001846 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017ea:	8b3b      	ldrh	r3, [r7, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	333d      	adds	r3, #61	@ 0x3d
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	333d      	adds	r3, #61	@ 0x3d
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	332a      	adds	r3, #42	@ 0x2a
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800182e:	e0ce      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	332a      	adds	r3, #42	@ 0x2a
 8001840:	2202      	movs	r2, #2
 8001842:	701a      	strb	r2, [r3, #0]
      break;
 8001844:	e0c3      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	331a      	adds	r3, #26
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	f040 80b8 	bne.w	80019ce <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	333c      	adds	r3, #60	@ 0x3c
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10a      	bne.n	800188a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	332a      	adds	r3, #42	@ 0x2a
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
      break;
 8001888:	e0a1      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	332a      	adds	r3, #42	@ 0x2a
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e096      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018a0:	78bb      	ldrb	r3, [r7, #2]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d120      	bne.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	333d      	adds	r3, #61	@ 0x3d
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10a      	bne.n	80018d2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	332a      	adds	r3, #42	@ 0x2a
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018d0:	e07e      	b.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	332a      	adds	r3, #42	@ 0x2a
 80018e2:	2202      	movs	r2, #2
 80018e4:	701a      	strb	r2, [r3, #0]
      break;
 80018e6:	e073      	b.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	333c      	adds	r3, #60	@ 0x3c
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	332a      	adds	r3, #42	@ 0x2a
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
      break;
 8001912:	e05d      	b.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	332a      	adds	r3, #42	@ 0x2a
 8001924:	2202      	movs	r2, #2
 8001926:	701a      	strb	r2, [r3, #0]
      break;
 8001928:	e052      	b.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800192a:	78bb      	ldrb	r3, [r7, #2]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d120      	bne.n	8001972 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	333d      	adds	r3, #61	@ 0x3d
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10a      	bne.n	800195c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	332a      	adds	r3, #42	@ 0x2a
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800195a:	e039      	b.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	332a      	adds	r3, #42	@ 0x2a
 800196c:	2202      	movs	r2, #2
 800196e:	701a      	strb	r2, [r3, #0]
      break;
 8001970:	e02e      	b.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	333c      	adds	r3, #60	@ 0x3c
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10a      	bne.n	800199e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	332a      	adds	r3, #42	@ 0x2a
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
      break;
 800199c:	e018      	b.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	332a      	adds	r3, #42	@ 0x2a
 80019ae:	2202      	movs	r2, #2
 80019b0:	701a      	strb	r2, [r3, #0]
      break;
 80019b2:	e00d      	b.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	332a      	adds	r3, #42	@ 0x2a
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
      break;
 80019c8:	e002      	b.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019ce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	332c      	adds	r3, #44	@ 0x2c
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	8b39      	ldrh	r1, [r7, #24]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4403      	add	r3, r0
 80019f4:	3334      	adds	r3, #52	@ 0x34
 80019f6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	334c      	adds	r3, #76	@ 0x4c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	3338      	adds	r3, #56	@ 0x38
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3315      	adds	r3, #21
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	334d      	adds	r3, #77	@ 0x4d
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	3310      	adds	r3, #16
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	1d19      	adds	r1, r3, #4
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	799b      	ldrb	r3, [r3, #6]
 8001a62:	461a      	mov	r2, r3
 8001a64:	f003 ff6c 	bl	8005940 <USB_HC_StartXfer>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop

08001a74 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fc85 	bl	800539a <USB_GetMode>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	f040 80fb 	bne.w	8001c8e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 fc48 	bl	8005332 <USB_ReadInterrupts>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80f1 	beq.w	8001c8c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fc3f 	bl	8005332 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001abe:	d104      	bne.n	8001aca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fc2f 	bl	8005332 <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ade:	d104      	bne.n	8001aea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fc1f 	bl	8005332 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001afa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001afe:	d104      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fc0f 	bl	8005332 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d103      	bne.n	8001b26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2202      	movs	r2, #2
 8001b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fc01 	bl	8005332 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b3a:	d120      	bne.n	8001b7e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d113      	bne.n	8001b7e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b56:	2110      	movs	r1, #16
 8001b58:	6938      	ldr	r0, [r7, #16]
 8001b5a:	f003 faf4 	bl	8005146 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b5e:	6938      	ldr	r0, [r7, #16]
 8001b60:	f003 fb23 	bl	80051aa <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7a5b      	ldrb	r3, [r3, #9]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d105      	bne.n	8001b78 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fd06 	bl	8005584 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f006 fc4b 	bl	8008414 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fbd5 	bl	8005332 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b92:	d102      	bne.n	8001b9a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f001 fd4d 	bl	8003634 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fbc7 	bl	8005332 <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d106      	bne.n	8001bbc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f006 fc14 	bl	80083dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2208      	movs	r2, #8
 8001bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fbb6 	bl	8005332 <USB_ReadInterrupts>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bd0:	d139      	bne.n	8001c46 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f004 f8f6 	bl	8005dc8 <USB_HC_ReadInterrupt>
 8001bdc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e025      	b.n	8001c30 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d018      	beq.n	8001c2a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	015a      	lsls	r2, r3, #5
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c0e:	d106      	bne.n	8001c1e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f905 	bl	8001e26 <HCD_HC_IN_IRQHandler>
 8001c1c:	e005      	b.n	8001c2a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 ff67 	bl	8002af8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	795b      	ldrb	r3, [r3, #5]
 8001c34:	461a      	mov	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d3d3      	bcc.n	8001be4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fb71 	bl	8005332 <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d101      	bne.n	8001c5e <HAL_HCD_IRQHandler+0x1ea>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_HCD_IRQHandler+0x1ec>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d014      	beq.n	8001c8e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0210 	bic.w	r2, r2, #16
 8001c72:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f001 fbfe 	bl	8003476 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699a      	ldr	r2, [r3, #24]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0210 	orr.w	r2, r2, #16
 8001c88:	619a      	str	r2, [r3, #24]
 8001c8a:	e000      	b.n	8001c8e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c8c:	bf00      	nop
    }
  }
}
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_HCD_Start+0x16>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e013      	b.n	8001cd2 <HAL_HCD_Start+0x3e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fcca 	bl	8005652 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 f9d1 	bl	800506a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_HCD_Stop+0x16>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e00d      	b.n	8001d0c <HAL_HCD_Stop+0x32>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f004 f994 	bl	800602a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fc6c 	bl	80055fe <USB_ResetPort>
 8001d26:	4603      	mov	r3, r0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	334c      	adds	r3, #76	@ 0x4c
 8001d4c:	781b      	ldrb	r3, [r3, #0]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3338      	adds	r3, #56	@ 0x38
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fcae 	bl	80056f2 <USB_GetCurrentFrame>
 8001d96:	4603      	mov	r3, r0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 fc89 	bl	80056c4 <USB_GetHostSpeed>
 8001db2:	4603      	mov	r3, r0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	331a      	adds	r3, #26
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	331b      	adds	r3, #27
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3325      	adds	r3, #37	@ 0x25
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	3324      	adds	r3, #36	@ 0x24
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 fa87 	bl	8005358 <USB_ReadChInterrupts>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d11a      	bne.n	8001e8a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e60:	461a      	mov	r2, r3
 8001e62:	2304      	movs	r3, #4
 8001e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	334d      	adds	r3, #77	@ 0x4d
 8001e76:	2207      	movs	r2, #7
 8001e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 ffb1 	bl	8005dea <USB_HC_Halt>
 8001e88:	e09e      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fa60 	bl	8005358 <USB_ReadChInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea2:	d11b      	bne.n	8001edc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	334d      	adds	r3, #77	@ 0x4d
 8001ec8:	2208      	movs	r2, #8
 8001eca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 ff88 	bl	8005dea <USB_HC_Halt>
 8001eda:	e075      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fa37 	bl	8005358 <USB_ReadChInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d11a      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	2308      	movs	r3, #8
 8001f04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	334d      	adds	r3, #77	@ 0x4d
 8001f16:	2206      	movs	r2, #6
 8001f18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 ff61 	bl	8005dea <USB_HC_Halt>
 8001f28:	e04e      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 fa10 	bl	8005358 <USB_ReadChInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f42:	d11b      	bne.n	8001f7c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f50:	461a      	mov	r2, r3
 8001f52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	334d      	adds	r3, #77	@ 0x4d
 8001f68:	2209      	movs	r2, #9
 8001f6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 ff38 	bl	8005dea <USB_HC_Halt>
 8001f7a:	e025      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 f9e7 	bl	8005358 <USB_ReadChInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f90:	2b80      	cmp	r3, #128	@ 0x80
 8001f92:	d119      	bne.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2380      	movs	r3, #128	@ 0x80
 8001fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	334d      	adds	r3, #77	@ 0x4d
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 ff11 	bl	8005dea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 f9c1 	bl	8005358 <USB_ReadChInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fe0:	d112      	bne.n	8002008 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 fefd 	bl	8005dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002002:	6093      	str	r3, [r2, #8]
 8002004:	f000 bd75 	b.w	8002af2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f003 f9a1 	bl	8005358 <USB_ReadChInterrupts>
 8002016:	4603      	mov	r3, r0
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	f040 8128 	bne.w	8002272 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800202e:	461a      	mov	r2, r3
 8002030:	2320      	movs	r3, #32
 8002032:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	331b      	adds	r3, #27
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d119      	bne.n	800207e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	331b      	adds	r3, #27
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	0151      	lsls	r1, r2, #5
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	440a      	add	r2, r1
 8002074:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800207c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	799b      	ldrb	r3, [r3, #6]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01b      	beq.n	80020be <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3330      	adds	r3, #48	@ 0x30
 8002096:	6819      	ldr	r1, [r3, #0]
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	1ac9      	subs	r1, r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4403      	add	r3, r0
 80020ba:	3338      	adds	r3, #56	@ 0x38
 80020bc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	334d      	adds	r3, #77	@ 0x4d
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3344      	adds	r3, #68	@ 0x44
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f2:	461a      	mov	r2, r3
 80020f4:	2301      	movs	r3, #1
 80020f6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	3326      	adds	r3, #38	@ 0x26
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3326      	adds	r3, #38	@ 0x26
 800211e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002120:	2b02      	cmp	r3, #2
 8002122:	d110      	bne.n	8002146 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f003 fe5c 	bl	8005dea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800213e:	461a      	mov	r2, r3
 8002140:	2310      	movs	r3, #16
 8002142:	6093      	str	r3, [r2, #8]
 8002144:	e03d      	b.n	80021c2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3326      	adds	r3, #38	@ 0x26
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d00a      	beq.n	8002172 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	3326      	adds	r3, #38	@ 0x26
 800216c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800216e:	2b01      	cmp	r3, #1
 8002170:	d127      	bne.n	80021c2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	0151      	lsls	r1, r2, #5
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	440a      	add	r2, r1
 8002188:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800218c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002190:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	334c      	adds	r3, #76	@ 0x4c
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	334c      	adds	r3, #76	@ 0x4c
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	4619      	mov	r1, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f006 f937 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	799b      	ldrb	r3, [r3, #6]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d13b      	bne.n	8002242 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3338      	adds	r3, #56	@ 0x38
 80021da:	6819      	ldr	r1, [r3, #0]
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4403      	add	r3, r0
 80021ea:	3328      	adds	r3, #40	@ 0x28
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	440b      	add	r3, r1
 80021f0:	1e59      	subs	r1, r3, #1
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4403      	add	r3, r0
 8002200:	3328      	adds	r3, #40	@ 0x28
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	fbb1 f3f3 	udiv	r3, r1, r3
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8470 	beq.w	8002af2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	333c      	adds	r3, #60	@ 0x3c
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	f083 0301 	eor.w	r3, r3, #1
 800222a:	b2d8      	uxtb	r0, r3
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	333c      	adds	r3, #60	@ 0x3c
 800223a:	4602      	mov	r2, r0
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	f000 bc58 	b.w	8002af2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	333c      	adds	r3, #60	@ 0x3c
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2d8      	uxtb	r0, r3
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	333c      	adds	r3, #60	@ 0x3c
 800226a:	4602      	mov	r2, r0
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	f000 bc40 	b.w	8002af2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f003 f86c 	bl	8005358 <USB_ReadChInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b20      	cmp	r3, #32
 8002288:	d131      	bne.n	80022ee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002296:	461a      	mov	r2, r3
 8002298:	2320      	movs	r3, #32
 800229a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	331a      	adds	r3, #26
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	f040 841f 	bne.w	8002af2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	331b      	adds	r3, #27
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	334d      	adds	r3, #77	@ 0x4d
 80022d8:	2203      	movs	r2, #3
 80022da:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 fd80 	bl	8005dea <USB_HC_Halt>
 80022ea:	f000 bc02 	b.w	8002af2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 f82e 	bl	8005358 <USB_ReadChInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	f040 8305 	bne.w	8002912 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002314:	461a      	mov	r2, r3
 8002316:	2302      	movs	r3, #2
 8002318:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	334d      	adds	r3, #77	@ 0x4d
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d114      	bne.n	800235a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	334d      	adds	r3, #77	@ 0x4d
 8002340:	2202      	movs	r2, #2
 8002342:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	334c      	adds	r3, #76	@ 0x4c
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e2cc      	b.n	80028f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	334d      	adds	r3, #77	@ 0x4d
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b06      	cmp	r3, #6
 800236e:	d114      	bne.n	800239a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	334d      	adds	r3, #77	@ 0x4d
 8002380:	2202      	movs	r2, #2
 8002382:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	334c      	adds	r3, #76	@ 0x4c
 8002394:	2205      	movs	r2, #5
 8002396:	701a      	strb	r2, [r3, #0]
 8002398:	e2ac      	b.n	80028f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	334d      	adds	r3, #77	@ 0x4d
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b07      	cmp	r3, #7
 80023ae:	d00b      	beq.n	80023c8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	334d      	adds	r3, #77	@ 0x4d
 80023c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023c2:	2b09      	cmp	r3, #9
 80023c4:	f040 80a6 	bne.w	8002514 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	334d      	adds	r3, #77	@ 0x4d
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3344      	adds	r3, #68	@ 0x44
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1c59      	adds	r1, r3, #1
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4403      	add	r3, r0
 80023fc:	3344      	adds	r3, #68	@ 0x44
 80023fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3344      	adds	r3, #68	@ 0x44
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d943      	bls.n	800249e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	3344      	adds	r3, #68	@ 0x44
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	331a      	adds	r3, #26
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d123      	bne.n	8002488 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	331b      	adds	r3, #27
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	331c      	adds	r3, #28
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	0151      	lsls	r1, r2, #5
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	440a      	add	r2, r1
 800247e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002486:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	334c      	adds	r3, #76	@ 0x4c
 8002498:	2204      	movs	r2, #4
 800249a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800249c:	e229      	b.n	80028f2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	334c      	adds	r3, #76	@ 0x4c
 80024ae:	2202      	movs	r2, #2
 80024b0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	3326      	adds	r3, #38	@ 0x26
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3326      	adds	r3, #38	@ 0x26
 80024d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024da:	2b02      	cmp	r3, #2
 80024dc:	f040 8209 	bne.w	80028f2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80024f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800250c:	461a      	mov	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002512:	e1ee      	b.n	80028f2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	334d      	adds	r3, #77	@ 0x4d
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b05      	cmp	r3, #5
 8002528:	f040 80c8 	bne.w	80026bc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	334d      	adds	r3, #77	@ 0x4d
 800253c:	2202      	movs	r2, #2
 800253e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	331b      	adds	r3, #27
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	f040 81ce 	bne.w	80028f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3326      	adds	r3, #38	@ 0x26
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d16b      	bne.n	8002646 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3348      	adds	r3, #72	@ 0x48
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	1c59      	adds	r1, r3, #1
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4403      	add	r3, r0
 800258e:	3348      	adds	r3, #72	@ 0x48
 8002590:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	3348      	adds	r3, #72	@ 0x48
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d943      	bls.n	8002630 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3348      	adds	r3, #72	@ 0x48
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	331b      	adds	r3, #27
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3344      	adds	r3, #68	@ 0x44
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d809      	bhi.n	80025fa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	331c      	adds	r3, #28
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	0151      	lsls	r1, r2, #5
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	440a      	add	r2, r1
 8002610:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002614:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002618:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	334c      	adds	r3, #76	@ 0x4c
 800262a:	2204      	movs	r2, #4
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e014      	b.n	800265a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	334c      	adds	r3, #76	@ 0x4c
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e009      	b.n	800265a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	334c      	adds	r3, #76	@ 0x4c
 8002656:	2202      	movs	r2, #2
 8002658:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	3326      	adds	r3, #38	@ 0x26
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00b      	beq.n	8002688 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3326      	adds	r3, #38	@ 0x26
 8002680:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002682:	2b02      	cmp	r3, #2
 8002684:	f040 8136 	bne.w	80028f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800269e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b4:	461a      	mov	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e11b      	b.n	80028f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	334d      	adds	r3, #77	@ 0x4d
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	f040 8081 	bne.w	80027d6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	334d      	adds	r3, #77	@ 0x4d
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	331b      	adds	r3, #27
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 80fa 	bne.w	80028f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	334c      	adds	r3, #76	@ 0x4c
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	0151      	lsls	r1, r2, #5
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	440a      	add	r2, r1
 800272a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800272e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002732:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	0151      	lsls	r1, r2, #5
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	440a      	add	r2, r1
 800274a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800274e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002752:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	0151      	lsls	r1, r2, #5
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	440a      	add	r2, r1
 800276a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800276e:	f023 0320 	bic.w	r3, r3, #32
 8002772:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3326      	adds	r3, #38	@ 0x26
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3326      	adds	r3, #38	@ 0x26
 800279a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800279c:	2b02      	cmp	r3, #2
 800279e:	f040 80a9 	bne.w	80028f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e08e      	b.n	80028f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	334d      	adds	r3, #77	@ 0x4d
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d143      	bne.n	8002874 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	334d      	adds	r3, #77	@ 0x4d
 80027fc:	2202      	movs	r2, #2
 80027fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	334c      	adds	r3, #76	@ 0x4c
 8002810:	2202      	movs	r2, #2
 8002812:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3326      	adds	r3, #38	@ 0x26
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3326      	adds	r3, #38	@ 0x26
 800283a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800283c:	2b02      	cmp	r3, #2
 800283e:	d159      	bne.n	80028f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002856:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800285e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286c:	461a      	mov	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e03f      	b.n	80028f4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334d      	adds	r3, #77	@ 0x4d
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b08      	cmp	r3, #8
 8002888:	d126      	bne.n	80028d8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	334d      	adds	r3, #77	@ 0x4d
 800289a:	2202      	movs	r2, #2
 800289c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	3344      	adds	r3, #68	@ 0x44
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1c59      	adds	r1, r3, #1
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4403      	add	r3, r0
 80028be:	3344      	adds	r3, #68	@ 0x44
 80028c0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	334c      	adds	r3, #76	@ 0x4c
 80028d2:	2204      	movs	r2, #4
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e00d      	b.n	80028f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	334d      	adds	r3, #77	@ 0x4d
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	f000 8100 	beq.w	8002af0 <HCD_HC_IN_IRQHandler+0xcca>
 80028f0:	e000      	b.n	80028f4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	334c      	adds	r3, #76	@ 0x4c
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f005 fd90 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002910:	e0ef      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f002 fd1c 	bl	8005358 <USB_ReadChInterrupts>
 8002920:	4603      	mov	r3, r0
 8002922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002926:	2b40      	cmp	r3, #64	@ 0x40
 8002928:	d12f      	bne.n	800298a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002936:	461a      	mov	r2, r3
 8002938:	2340      	movs	r3, #64	@ 0x40
 800293a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	334d      	adds	r3, #77	@ 0x4d
 800294c:	2205      	movs	r2, #5
 800294e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	331a      	adds	r3, #26
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	3344      	adds	r3, #68	@ 0x44
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fa31 	bl	8005dea <USB_HC_Halt>
 8002988:	e0b3      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f002 fce0 	bl	8005358 <USB_ReadChInterrupts>
 8002998:	4603      	mov	r3, r0
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b10      	cmp	r3, #16
 80029a0:	f040 80a7 	bne.w	8002af2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3326      	adds	r3, #38	@ 0x26
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d11b      	bne.n	80029f2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3344      	adds	r3, #68	@ 0x44
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	334d      	adds	r3, #77	@ 0x4d
 80029de:	2204      	movs	r2, #4
 80029e0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 f9fd 	bl	8005dea <USB_HC_Halt>
 80029f0:	e03f      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3326      	adds	r3, #38	@ 0x26
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3326      	adds	r3, #38	@ 0x26
 8002a18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d129      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3344      	adds	r3, #68	@ 0x44
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	799b      	ldrb	r3, [r3, #6]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	331b      	adds	r3, #27
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d110      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334d      	adds	r3, #77	@ 0x4d
 8002a60:	2204      	movs	r2, #4
 8002a62:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 f9bc 	bl	8005dea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	331b      	adds	r3, #27
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d129      	bne.n	8002adc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	331b      	adds	r3, #27
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	0151      	lsls	r1, r2, #5
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	0151      	lsls	r1, r2, #5
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ad6:	f043 0320 	orr.w	r3, r3, #32
 8002ada:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2310      	movs	r3, #16
 8002aec:	6093      	str	r3, [r2, #8]
 8002aee:	e000      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002af0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 fc1e 	bl	8005358 <USB_ReadChInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d11b      	bne.n	8002b5e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b32:	461a      	mov	r2, r3
 8002b34:	2304      	movs	r3, #4
 8002b36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	334d      	adds	r3, #77	@ 0x4d
 8002b48:	2207      	movs	r2, #7
 8002b4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 f948 	bl	8005dea <USB_HC_Halt>
 8002b5a:	f000 bc89 	b.w	8003470 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fbf6 	bl	8005358 <USB_ReadChInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	f040 8082 	bne.w	8002c7c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b84:	461a      	mov	r2, r3
 8002b86:	2320      	movs	r3, #32
 8002b88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3319      	adds	r3, #25
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d124      	bne.n	8002bea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	3319      	adds	r3, #25
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	334c      	adds	r3, #76	@ 0x4c
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	334d      	adds	r3, #77	@ 0x4d
 8002bd8:	2203      	movs	r2, #3
 8002bda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 f900 	bl	8005dea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	331a      	adds	r3, #26
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	f040 8437 	bne.w	8003470 <HCD_HC_OUT_IRQHandler+0x978>
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	331b      	adds	r3, #27
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 842b 	bne.w	8003470 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3326      	adds	r3, #38	@ 0x26
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d009      	beq.n	8002c44 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	331b      	adds	r3, #27
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	334d      	adds	r3, #77	@ 0x4d
 8002c54:	2203      	movs	r2, #3
 8002c56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 f8c2 	bl	8005dea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	3344      	adds	r3, #68	@ 0x44
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e3f9      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f002 fb67 	bl	8005358 <USB_ReadChInterrupts>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c94:	d111      	bne.n	8002cba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ca8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 f899 	bl	8005dea <USB_HC_Halt>
 8002cb8:	e3da      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 fb48 	bl	8005358 <USB_ReadChInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d168      	bne.n	8002da4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3344      	adds	r3, #68	@ 0x44
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f002 fb32 	bl	8005358 <USB_ReadChInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfa:	2b40      	cmp	r3, #64	@ 0x40
 8002cfc:	d112      	bne.n	8002d24 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3319      	adds	r3, #25
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2340      	movs	r3, #64	@ 0x40
 8002d22:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	331b      	adds	r3, #27
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d019      	beq.n	8002d6e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	331b      	adds	r3, #27
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	0151      	lsls	r1, r2, #5
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	440a      	add	r2, r1
 8002d64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	334d      	adds	r3, #77	@ 0x4d
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 f824 	bl	8005dea <USB_HC_Halt>
 8002da2:	e365      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 fad3 	bl	8005358 <USB_ReadChInterrupts>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db8:	2b40      	cmp	r3, #64	@ 0x40
 8002dba:	d139      	bne.n	8002e30 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	334d      	adds	r3, #77	@ 0x4d
 8002dcc:	2205      	movs	r2, #5
 8002dce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	331a      	adds	r3, #26
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	3319      	adds	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	3344      	adds	r3, #68	@ 0x44
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 ffe7 	bl	8005dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2340      	movs	r3, #64	@ 0x40
 8002e2c:	6093      	str	r3, [r2, #8]
 8002e2e:	e31f      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 fa8d 	bl	8005358 <USB_ReadChInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d11a      	bne.n	8002e7e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e54:	461a      	mov	r2, r3
 8002e56:	2308      	movs	r3, #8
 8002e58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	334d      	adds	r3, #77	@ 0x4d
 8002e6a:	2206      	movs	r2, #6
 8002e6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 ffb7 	bl	8005dea <USB_HC_Halt>
 8002e7c:	e2f8      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 fa66 	bl	8005358 <USB_ReadChInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d144      	bne.n	8002f20 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3344      	adds	r3, #68	@ 0x44
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	334d      	adds	r3, #77	@ 0x4d
 8002eba:	2204      	movs	r2, #4
 8002ebc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3319      	adds	r3, #25
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d114      	bne.n	8002efe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3318      	adds	r3, #24
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3319      	adds	r3, #25
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 ff6f 	bl	8005dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	6093      	str	r3, [r2, #8]
 8002f1e:	e2a7      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fa15 	bl	8005358 <USB_ReadChInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f34:	2b80      	cmp	r3, #128	@ 0x80
 8002f36:	f040 8083 	bne.w	8003040 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	799b      	ldrb	r3, [r3, #6]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d111      	bne.n	8002f66 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	334d      	adds	r3, #77	@ 0x4d
 8002f52:	2207      	movs	r2, #7
 8002f54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f002 ff43 	bl	8005dea <USB_HC_Halt>
 8002f64:	e062      	b.n	800302c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3344      	adds	r3, #68	@ 0x44
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	1c59      	adds	r1, r3, #1
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4403      	add	r3, r0
 8002f86:	3344      	adds	r3, #68	@ 0x44
 8002f88:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3344      	adds	r3, #68	@ 0x44
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d922      	bls.n	8002fe6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3344      	adds	r3, #68	@ 0x44
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	334c      	adds	r3, #76	@ 0x4c
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	334c      	adds	r3, #76	@ 0x4c
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f005 fa26 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fe4:	e022      	b.n	800302c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	334c      	adds	r3, #76	@ 0x4c
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003010:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003018:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	2380      	movs	r3, #128	@ 0x80
 800303c:	6093      	str	r3, [r2, #8]
 800303e:	e217      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f002 f985 	bl	8005358 <USB_ReadChInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003058:	d11b      	bne.n	8003092 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	334d      	adds	r3, #77	@ 0x4d
 800306a:	2209      	movs	r2, #9
 800306c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f002 feb7 	bl	8005dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003088:	461a      	mov	r2, r3
 800308a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800308e:	6093      	str	r3, [r2, #8]
 8003090:	e1ee      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f002 f95c 	bl	8005358 <USB_ReadChInterrupts>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	f040 81df 	bne.w	800346a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	2302      	movs	r3, #2
 80030bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	334d      	adds	r3, #77	@ 0x4d
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	f040 8093 	bne.w	80031fc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	334d      	adds	r3, #77	@ 0x4d
 80030e6:	2202      	movs	r2, #2
 80030e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	334c      	adds	r3, #76	@ 0x4c
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	3326      	adds	r3, #38	@ 0x26
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d00b      	beq.n	800312c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3326      	adds	r3, #38	@ 0x26
 8003124:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003126:	2b03      	cmp	r3, #3
 8003128:	f040 8190 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	799b      	ldrb	r3, [r3, #6]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d115      	bne.n	8003160 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	333d      	adds	r3, #61	@ 0x3d
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	f083 0301 	eor.w	r3, r3, #1
 800314c:	b2d8      	uxtb	r0, r3
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	333d      	adds	r3, #61	@ 0x3d
 800315c:	4602      	mov	r2, r0
 800315e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	799b      	ldrb	r3, [r3, #6]
 8003164:	2b01      	cmp	r3, #1
 8003166:	f040 8171 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x954>
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3334      	adds	r3, #52	@ 0x34
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8165 	beq.w	800344c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3334      	adds	r3, #52	@ 0x34
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4403      	add	r3, r0
 80031a2:	3328      	adds	r3, #40	@ 0x28
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	440b      	add	r3, r1
 80031a8:	1e59      	subs	r1, r3, #1
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4403      	add	r3, r0
 80031b8:	3328      	adds	r3, #40	@ 0x28
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 813f 	beq.w	800344c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	333d      	adds	r3, #61	@ 0x3d
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	f083 0301 	eor.w	r3, r3, #1
 80031e6:	b2d8      	uxtb	r0, r3
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	333d      	adds	r3, #61	@ 0x3d
 80031f6:	4602      	mov	r2, r0
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e127      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	334d      	adds	r3, #77	@ 0x4d
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d120      	bne.n	8003254 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	334d      	adds	r3, #77	@ 0x4d
 8003222:	2202      	movs	r2, #2
 8003224:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	331b      	adds	r3, #27
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 8107 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	334c      	adds	r3, #76	@ 0x4c
 800324e:	2202      	movs	r2, #2
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e0fb      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	334d      	adds	r3, #77	@ 0x4d
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d13a      	bne.n	80032e0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	334d      	adds	r3, #77	@ 0x4d
 800327a:	2202      	movs	r2, #2
 800327c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	334c      	adds	r3, #76	@ 0x4c
 800328e:	2202      	movs	r2, #2
 8003290:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	331b      	adds	r3, #27
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	f040 80d1 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	331b      	adds	r3, #27
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	0151      	lsls	r1, r2, #5
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	440a      	add	r2, r1
 80032d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032dc:	6053      	str	r3, [r2, #4]
 80032de:	e0b5      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	334d      	adds	r3, #77	@ 0x4d
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d114      	bne.n	8003320 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	334d      	adds	r3, #77	@ 0x4d
 8003306:	2202      	movs	r2, #2
 8003308:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	334c      	adds	r3, #76	@ 0x4c
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e095      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	334d      	adds	r3, #77	@ 0x4d
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b06      	cmp	r3, #6
 8003334:	d114      	bne.n	8003360 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	334d      	adds	r3, #77	@ 0x4d
 8003346:	2202      	movs	r2, #2
 8003348:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	334c      	adds	r3, #76	@ 0x4c
 800335a:	2205      	movs	r2, #5
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	e075      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	334d      	adds	r3, #77	@ 0x4d
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b07      	cmp	r3, #7
 8003374:	d00a      	beq.n	800338c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	334d      	adds	r3, #77	@ 0x4d
 8003386:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003388:	2b09      	cmp	r3, #9
 800338a:	d170      	bne.n	800346e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	334d      	adds	r3, #77	@ 0x4d
 800339c:	2202      	movs	r2, #2
 800339e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3344      	adds	r3, #68	@ 0x44
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4403      	add	r3, r0
 80033c0:	3344      	adds	r3, #68	@ 0x44
 80033c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3344      	adds	r3, #68	@ 0x44
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d914      	bls.n	8003404 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3344      	adds	r3, #68	@ 0x44
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	334c      	adds	r3, #76	@ 0x4c
 80033fe:	2204      	movs	r2, #4
 8003400:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003402:	e022      	b.n	800344a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334c      	adds	r3, #76	@ 0x4c
 8003414:	2202      	movs	r2, #2
 8003416:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800342e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003436:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800344a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334c      	adds	r3, #76	@ 0x4c
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	4619      	mov	r1, r3
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f004 ffe4 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003468:	e002      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800346a:	bf00      	nop
 800346c:	e000      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800346e:	bf00      	nop
  }
}
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b08a      	sub	sp, #40	@ 0x28
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	0c5b      	lsrs	r3, r3, #17
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d004      	beq.n	80034bc <HCD_RXQLVL_IRQHandler+0x46>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	f000 80b6 	beq.w	8003626 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034ba:	e0b7      	b.n	800362c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80b3 	beq.w	800362a <HCD_RXQLVL_IRQHandler+0x1b4>
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	332c      	adds	r3, #44	@ 0x2c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80a7 	beq.w	800362a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3338      	adds	r3, #56	@ 0x38
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	18d1      	adds	r1, r2, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4403      	add	r3, r0
 8003500:	3334      	adds	r3, #52	@ 0x34
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4299      	cmp	r1, r3
 8003506:	f200 8083 	bhi.w	8003610 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	332c      	adds	r3, #44	@ 0x2c
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	b292      	uxth	r2, r2
 8003524:	4619      	mov	r1, r3
 8003526:	f001 feac 	bl	8005282 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	332c      	adds	r3, #44	@ 0x2c
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	18d1      	adds	r1, r2, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4403      	add	r3, r0
 800354e:	332c      	adds	r3, #44	@ 0x2c
 8003550:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3338      	adds	r3, #56	@ 0x38
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	18d1      	adds	r1, r2, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4403      	add	r3, r0
 8003576:	3338      	adds	r3, #56	@ 0x38
 8003578:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	0cdb      	lsrs	r3, r3, #19
 800358a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800358e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3328      	adds	r3, #40	@ 0x28
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d13f      	bne.n	800362a <HCD_RXQLVL_IRQHandler+0x1b4>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d03c      	beq.n	800362a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	333c      	adds	r3, #60	@ 0x3c
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	f083 0301 	eor.w	r3, r3, #1
 80035f8:	b2d8      	uxtb	r0, r3
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	333c      	adds	r3, #60	@ 0x3c
 800360a:	4602      	mov	r2, r0
 800360c:	701a      	strb	r2, [r3, #0]
      break;
 800360e:	e00c      	b.n	800362a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	334c      	adds	r3, #76	@ 0x4c
 8003620:	2204      	movs	r2, #4
 8003622:	701a      	strb	r2, [r3, #0]
      break;
 8003624:	e001      	b.n	800362a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003626:	bf00      	nop
 8003628:	e000      	b.n	800362c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800362a:	bf00      	nop
  }
}
 800362c:	bf00      	nop
 800362e:	3728      	adds	r7, #40	@ 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003660:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b02      	cmp	r3, #2
 800366a:	d10b      	bne.n	8003684 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d102      	bne.n	800367c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f004 febe 	bl	80083f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f043 0302 	orr.w	r3, r3, #2
 8003682:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b08      	cmp	r3, #8
 800368c:	d132      	bne.n	80036f4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f043 0308 	orr.w	r3, r3, #8
 8003694:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b04      	cmp	r3, #4
 800369e:	d126      	bne.n	80036ee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7a5b      	ldrb	r3, [r3, #9]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d113      	bne.n	80036d0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80036ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036b2:	d106      	bne.n	80036c2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2102      	movs	r1, #2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 ff62 	bl	8005584 <USB_InitFSLSPClkSel>
 80036c0:	e011      	b.n	80036e6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2101      	movs	r1, #1
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 ff5b 	bl	8005584 <USB_InitFSLSPClkSel>
 80036ce:	e00a      	b.n	80036e6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	79db      	ldrb	r3, [r3, #7]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d106      	bne.n	80036e6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036de:	461a      	mov	r2, r3
 80036e0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036e4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f004 feb0 	bl	800844c <HAL_HCD_PortEnabled_Callback>
 80036ec:	e002      	b.n	80036f4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f004 feba 	bl	8008468 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d103      	bne.n	8003706 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f043 0320 	orr.w	r3, r3, #32
 8003704:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800370c:	461a      	mov	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	6013      	str	r3, [r2, #0]
}
 8003712:	bf00      	nop
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e12b      	b.n	8003986 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd f98a 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	@ 0x24
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800376e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800377e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003780:	f001 fa20 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 8003784:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4a81      	ldr	r2, [pc, #516]	@ (8003990 <HAL_I2C_Init+0x274>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d807      	bhi.n	80037a0 <HAL_I2C_Init+0x84>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a80      	ldr	r2, [pc, #512]	@ (8003994 <HAL_I2C_Init+0x278>)
 8003794:	4293      	cmp	r3, r2
 8003796:	bf94      	ite	ls
 8003798:	2301      	movls	r3, #1
 800379a:	2300      	movhi	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e006      	b.n	80037ae <HAL_I2C_Init+0x92>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003998 <HAL_I2C_Init+0x27c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	bf94      	ite	ls
 80037a8:	2301      	movls	r3, #1
 80037aa:	2300      	movhi	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e0e7      	b.n	8003986 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a78      	ldr	r2, [pc, #480]	@ (800399c <HAL_I2C_Init+0x280>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0c9b      	lsrs	r3, r3, #18
 80037c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003990 <HAL_I2C_Init+0x274>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d802      	bhi.n	80037f0 <HAL_I2C_Init+0xd4>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3301      	adds	r3, #1
 80037ee:	e009      	b.n	8003804 <HAL_I2C_Init+0xe8>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	4a69      	ldr	r2, [pc, #420]	@ (80039a0 <HAL_I2C_Init+0x284>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	3301      	adds	r3, #1
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	430b      	orrs	r3, r1
 800380a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003816:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	495c      	ldr	r1, [pc, #368]	@ (8003990 <HAL_I2C_Init+0x274>)
 8003820:	428b      	cmp	r3, r1
 8003822:	d819      	bhi.n	8003858 <HAL_I2C_Init+0x13c>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1e59      	subs	r1, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003832:	1c59      	adds	r1, r3, #1
 8003834:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003838:	400b      	ands	r3, r1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_I2C_Init+0x138>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1e59      	subs	r1, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fbb1 f3f3 	udiv	r3, r1, r3
 800384c:	3301      	adds	r3, #1
 800384e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003852:	e051      	b.n	80038f8 <HAL_I2C_Init+0x1dc>
 8003854:	2304      	movs	r3, #4
 8003856:	e04f      	b.n	80038f8 <HAL_I2C_Init+0x1dc>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d111      	bne.n	8003884 <HAL_I2C_Init+0x168>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e58      	subs	r0, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e012      	b.n	80038aa <HAL_I2C_Init+0x18e>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	0099      	lsls	r1, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Init+0x196>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e022      	b.n	80038f8 <HAL_I2C_Init+0x1dc>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10e      	bne.n	80038d8 <HAL_I2C_Init+0x1bc>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1e58      	subs	r0, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	440b      	add	r3, r1
 80038c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038cc:	3301      	adds	r3, #1
 80038ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038d6:	e00f      	b.n	80038f8 <HAL_I2C_Init+0x1dc>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e58      	subs	r0, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	0099      	lsls	r1, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	6809      	ldr	r1, [r1, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003926:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6911      	ldr	r1, [r2, #16]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68d2      	ldr	r2, [r2, #12]
 8003932:	4311      	orrs	r1, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	430b      	orrs	r3, r1
 800393a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	000186a0 	.word	0x000186a0
 8003994:	001e847f 	.word	0x001e847f
 8003998:	003d08ff 	.word	0x003d08ff
 800399c:	431bde83 	.word	0x431bde83
 80039a0:	10624dd3 	.word	0x10624dd3

080039a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e128      	b.n	8003c08 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a90      	ldr	r2, [pc, #576]	@ (8003c10 <HAL_I2S_Init+0x26c>)
 80039ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fd f88b 	bl	8000aec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039ec:	f023 030f 	bic.w	r3, r3, #15
 80039f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2202      	movs	r2, #2
 80039f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d060      	beq.n	8003ac4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a0a:	2310      	movs	r3, #16
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e001      	b.n	8003a14 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a10:	2320      	movs	r3, #32
 8003a12:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d802      	bhi.n	8003a22 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a22:	2001      	movs	r0, #1
 8003a24:	f001 f9d2 	bl	8004dcc <HAL_RCCEx_GetPeriphCLKFreq>
 8003a28:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a32:	d125      	bne.n	8003a80 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	461a      	mov	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	3305      	adds	r3, #5
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e01f      	b.n	8003a9e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	3305      	adds	r3, #5
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	e00e      	b.n	8003a9e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	461a      	mov	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	3305      	adds	r3, #5
 8003a9c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4a5c      	ldr	r2, [pc, #368]	@ (8003c14 <HAL_I2S_Init+0x270>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	08db      	lsrs	r3, r3, #3
 8003aa8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e003      	b.n	8003acc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d902      	bls.n	8003ad8 <HAL_I2S_Init+0x134>
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	2bff      	cmp	r3, #255	@ 0xff
 8003ad6:	d907      	bls.n	8003ae8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003adc:	f043 0210 	orr.w	r2, r3, #16
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e08f      	b.n	8003c08 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	ea42 0103 	orr.w	r1, r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b06:	f023 030f 	bic.w	r3, r3, #15
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6851      	ldr	r1, [r2, #4]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6892      	ldr	r2, [r2, #8]
 8003b12:	4311      	orrs	r1, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	68d2      	ldr	r2, [r2, #12]
 8003b18:	4311      	orrs	r1, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6992      	ldr	r2, [r2, #24]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d161      	bne.n	8003bf8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a38      	ldr	r2, [pc, #224]	@ (8003c18 <HAL_I2S_Init+0x274>)
 8003b38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a37      	ldr	r2, [pc, #220]	@ (8003c1c <HAL_I2S_Init+0x278>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <HAL_I2S_Init+0x1a4>
 8003b44:	4b36      	ldr	r3, [pc, #216]	@ (8003c20 <HAL_I2S_Init+0x27c>)
 8003b46:	e001      	b.n	8003b4c <HAL_I2S_Init+0x1a8>
 8003b48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	4932      	ldr	r1, [pc, #200]	@ (8003c1c <HAL_I2S_Init+0x278>)
 8003b54:	428a      	cmp	r2, r1
 8003b56:	d101      	bne.n	8003b5c <HAL_I2S_Init+0x1b8>
 8003b58:	4a31      	ldr	r2, [pc, #196]	@ (8003c20 <HAL_I2S_Init+0x27c>)
 8003b5a:	e001      	b.n	8003b60 <HAL_I2S_Init+0x1bc>
 8003b5c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b60:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b64:	f023 030f 	bic.w	r3, r3, #15
 8003b68:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c1c <HAL_I2S_Init+0x278>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d101      	bne.n	8003b78 <HAL_I2S_Init+0x1d4>
 8003b74:	4b2a      	ldr	r3, [pc, #168]	@ (8003c20 <HAL_I2S_Init+0x27c>)
 8003b76:	e001      	b.n	8003b7c <HAL_I2S_Init+0x1d8>
 8003b78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a25      	ldr	r2, [pc, #148]	@ (8003c1c <HAL_I2S_Init+0x278>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_I2S_Init+0x1ea>
 8003b8a:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <HAL_I2S_Init+0x27c>)
 8003b8c:	e001      	b.n	8003b92 <HAL_I2S_Init+0x1ee>
 8003b8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b9e:	d003      	beq.n	8003ba8 <HAL_I2S_Init+0x204>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d103      	bne.n	8003bb0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ba8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	e001      	b.n	8003bb4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	897b      	ldrh	r3, [r7, #10]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003be0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a0d      	ldr	r2, [pc, #52]	@ (8003c1c <HAL_I2S_Init+0x278>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2S_Init+0x24c>
 8003bec:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <HAL_I2S_Init+0x27c>)
 8003bee:	e001      	b.n	8003bf4 <HAL_I2S_Init+0x250>
 8003bf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bf4:	897a      	ldrh	r2, [r7, #10]
 8003bf6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	08003d1b 	.word	0x08003d1b
 8003c14:	cccccccd 	.word	0xcccccccd
 8003c18:	08003e31 	.word	0x08003e31
 8003c1c:	40003800 	.word	0x40003800
 8003c20:	40003400 	.word	0x40003400

08003c24 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10e      	bne.n	8003cb4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ca4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ffb8 	bl	8003c24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	1c9a      	adds	r2, r3, #2
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10e      	bne.n	8003d12 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d02:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ff93 	bl	8003c38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d13a      	bne.n	8003dac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d109      	bne.n	8003d54 <I2S_IRQHandler+0x3a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d102      	bne.n	8003d54 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff ffb4 	bl	8003cbc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	d126      	bne.n	8003dac <I2S_IRQHandler+0x92>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d11f      	bne.n	8003dac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	f043 0202 	orr.w	r2, r3, #2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ff50 	bl	8003c4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d136      	bne.n	8003e26 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d109      	bne.n	8003dd6 <I2S_IRQHandler+0xbc>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dcc:	2b80      	cmp	r3, #128	@ 0x80
 8003dce:	d102      	bne.n	8003dd6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff45 	bl	8003c60 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d122      	bne.n	8003e26 <I2S_IRQHandler+0x10c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d11b      	bne.n	8003e26 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dfc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ff13 	bl	8003c4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a92      	ldr	r2, [pc, #584]	@ (8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e4a:	4b92      	ldr	r3, [pc, #584]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e4c:	e001      	b.n	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a8b      	ldr	r2, [pc, #556]	@ (8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e68:	4b8a      	ldr	r3, [pc, #552]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e6a:	e001      	b.n	8003e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e7c:	d004      	beq.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 8099 	bne.w	8003fba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d107      	bne.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f925 	bl	80040ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d107      	bne.n	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9c8 	bl	800424c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	d13a      	bne.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d035      	beq.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003eda:	4b6e      	ldr	r3, [pc, #440]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003edc:	e001      	b.n	8003ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ede:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4969      	ldr	r1, [pc, #420]	@ (8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eea:	428b      	cmp	r3, r1
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eee:	4b69      	ldr	r3, [pc, #420]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef0:	e001      	b.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ef2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ef6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003efa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fe88 	bl	8003c4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	f040 80c3 	bne.w	80040ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80bd 	beq.w	80040ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a49      	ldr	r2, [pc, #292]	@ (8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f6e:	4b49      	ldr	r3, [pc, #292]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f70:	e001      	b.n	8003f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4944      	ldr	r1, [pc, #272]	@ (8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f7e:	428b      	cmp	r3, r1
 8003f80:	d101      	bne.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f82:	4b44      	ldr	r3, [pc, #272]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f84:	e001      	b.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	f043 0204 	orr.w	r2, r3, #4
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fe4a 	bl	8003c4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fb8:	e089      	b.n	80040ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d107      	bne.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8be 	bl	8004150 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d107      	bne.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f8fd 	bl	80041e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff4:	2b40      	cmp	r3, #64	@ 0x40
 8003ff6:	d12f      	bne.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d02a      	beq.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004010:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1e      	ldr	r2, [pc, #120]	@ (8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d101      	bne.n	8004020 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800401c:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800401e:	e001      	b.n	8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004020:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4919      	ldr	r1, [pc, #100]	@ (8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800402c:	428b      	cmp	r3, r1
 800402e:	d101      	bne.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004030:	4b18      	ldr	r3, [pc, #96]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004032:	e001      	b.n	8004038 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004034:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004038:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800403c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404a:	f043 0202 	orr.w	r2, r3, #2
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff fdfa 	bl	8003c4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b08      	cmp	r3, #8
 8004060:	d136      	bne.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d031      	beq.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a07      	ldr	r2, [pc, #28]	@ (8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d101      	bne.n	800407a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004076:	4b07      	ldr	r3, [pc, #28]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004078:	e001      	b.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800407a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4902      	ldr	r1, [pc, #8]	@ (8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004086:	428b      	cmp	r3, r1
 8004088:	d106      	bne.n	8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800408a:	4b02      	ldr	r3, [pc, #8]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800408c:	e006      	b.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800408e:	bf00      	nop
 8004090:	40003800 	.word	0x40003800
 8004094:	40003400 	.word	0x40003400
 8004098:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800409c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040a0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040be:	f043 0204 	orr.w	r2, r3, #4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fdc0 	bl	8003c4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040cc:	e000      	b.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040ce:	bf00      	nop
}
 80040d0:	bf00      	nop
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	1c99      	adds	r1, r3, #2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6251      	str	r1, [r2, #36]	@ 0x24
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d113      	bne.n	8004146 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800412c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ffc9 	bl	80040d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	1c99      	adds	r1, r3, #2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6251      	str	r1, [r2, #36]	@ 0x24
 8004162:	8819      	ldrh	r1, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1d      	ldr	r2, [pc, #116]	@ (80041e0 <I2SEx_TxISR_I2SExt+0x90>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <I2SEx_TxISR_I2SExt+0x22>
 800416e:	4b1d      	ldr	r3, [pc, #116]	@ (80041e4 <I2SEx_TxISR_I2SExt+0x94>)
 8004170:	e001      	b.n	8004176 <I2SEx_TxISR_I2SExt+0x26>
 8004172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004176:	460a      	mov	r2, r1
 8004178:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d121      	bne.n	80041d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a12      	ldr	r2, [pc, #72]	@ (80041e0 <I2SEx_TxISR_I2SExt+0x90>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <I2SEx_TxISR_I2SExt+0x50>
 800419c:	4b11      	ldr	r3, [pc, #68]	@ (80041e4 <I2SEx_TxISR_I2SExt+0x94>)
 800419e:	e001      	b.n	80041a4 <I2SEx_TxISR_I2SExt+0x54>
 80041a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	490d      	ldr	r1, [pc, #52]	@ (80041e0 <I2SEx_TxISR_I2SExt+0x90>)
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d101      	bne.n	80041b4 <I2SEx_TxISR_I2SExt+0x64>
 80041b0:	4b0c      	ldr	r3, [pc, #48]	@ (80041e4 <I2SEx_TxISR_I2SExt+0x94>)
 80041b2:	e001      	b.n	80041b8 <I2SEx_TxISR_I2SExt+0x68>
 80041b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff81 	bl	80040d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40003800 	.word	0x40003800
 80041e4:	40003400 	.word	0x40003400

080041e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68d8      	ldr	r0, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	1c99      	adds	r1, r3, #2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004200:	b282      	uxth	r2, r0
 8004202:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d113      	bne.n	8004244 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800422a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff ff4a 	bl	80040d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a20      	ldr	r2, [pc, #128]	@ (80042dc <I2SEx_RxISR_I2SExt+0x90>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <I2SEx_RxISR_I2SExt+0x16>
 800425e:	4b20      	ldr	r3, [pc, #128]	@ (80042e0 <I2SEx_RxISR_I2SExt+0x94>)
 8004260:	e001      	b.n	8004266 <I2SEx_RxISR_I2SExt+0x1a>
 8004262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004266:	68d8      	ldr	r0, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426c:	1c99      	adds	r1, r3, #2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004272:	b282      	uxth	r2, r0
 8004274:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d121      	bne.n	80042d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a12      	ldr	r2, [pc, #72]	@ (80042dc <I2SEx_RxISR_I2SExt+0x90>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <I2SEx_RxISR_I2SExt+0x50>
 8004298:	4b11      	ldr	r3, [pc, #68]	@ (80042e0 <I2SEx_RxISR_I2SExt+0x94>)
 800429a:	e001      	b.n	80042a0 <I2SEx_RxISR_I2SExt+0x54>
 800429c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	490d      	ldr	r1, [pc, #52]	@ (80042dc <I2SEx_RxISR_I2SExt+0x90>)
 80042a8:	428b      	cmp	r3, r1
 80042aa:	d101      	bne.n	80042b0 <I2SEx_RxISR_I2SExt+0x64>
 80042ac:	4b0c      	ldr	r3, [pc, #48]	@ (80042e0 <I2SEx_RxISR_I2SExt+0x94>)
 80042ae:	e001      	b.n	80042b4 <I2SEx_RxISR_I2SExt+0x68>
 80042b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d106      	bne.n	80042d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff ff03 	bl	80040d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40003800 	.word	0x40003800
 80042e0:	40003400 	.word	0x40003400

080042e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e267      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d075      	beq.n	80043ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004302:	4b88      	ldr	r3, [pc, #544]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b04      	cmp	r3, #4
 800430c:	d00c      	beq.n	8004328 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430e:	4b85      	ldr	r3, [pc, #532]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004316:	2b08      	cmp	r3, #8
 8004318:	d112      	bne.n	8004340 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431a:	4b82      	ldr	r3, [pc, #520]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004326:	d10b      	bne.n	8004340 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004328:	4b7e      	ldr	r3, [pc, #504]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d05b      	beq.n	80043ec <HAL_RCC_OscConfig+0x108>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d157      	bne.n	80043ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e242      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004348:	d106      	bne.n	8004358 <HAL_RCC_OscConfig+0x74>
 800434a:	4b76      	ldr	r3, [pc, #472]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a75      	ldr	r2, [pc, #468]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e01d      	b.n	8004394 <HAL_RCC_OscConfig+0xb0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x98>
 8004362:	4b70      	ldr	r3, [pc, #448]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6f      	ldr	r2, [pc, #444]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b6d      	ldr	r3, [pc, #436]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a6c      	ldr	r2, [pc, #432]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0xb0>
 800437c:	4b69      	ldr	r3, [pc, #420]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a68      	ldr	r2, [pc, #416]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	4b66      	ldr	r3, [pc, #408]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a65      	ldr	r2, [pc, #404]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800438e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fc fdce 	bl	8000f3c <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fc fdca 	bl	8000f3c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	@ 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e207      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0xc0>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c4:	f7fc fdba 	bl	8000f3c <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fc fdb6 	bl	8000f3c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	@ 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1f3      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043de:	4b51      	ldr	r3, [pc, #324]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0xe8>
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d063      	beq.n	80044c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004406:	4b47      	ldr	r3, [pc, #284]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800440e:	2b08      	cmp	r3, #8
 8004410:	d11c      	bne.n	800444c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004412:	4b44      	ldr	r3, [pc, #272]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d116      	bne.n	800444c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441e:	4b41      	ldr	r3, [pc, #260]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_RCC_OscConfig+0x152>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d001      	beq.n	8004436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e1c7      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004436:	4b3b      	ldr	r3, [pc, #236]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4937      	ldr	r1, [pc, #220]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444a:	e03a      	b.n	80044c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d020      	beq.n	8004496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004454:	4b34      	ldr	r3, [pc, #208]	@ (8004528 <HAL_RCC_OscConfig+0x244>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fc fd6f 	bl	8000f3c <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004462:	f7fc fd6b 	bl	8000f3c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e1a8      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004474:	4b2b      	ldr	r3, [pc, #172]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004480:	4b28      	ldr	r3, [pc, #160]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4925      	ldr	r1, [pc, #148]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004490:	4313      	orrs	r3, r2
 8004492:	600b      	str	r3, [r1, #0]
 8004494:	e015      	b.n	80044c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004496:	4b24      	ldr	r3, [pc, #144]	@ (8004528 <HAL_RCC_OscConfig+0x244>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fc fd4e 	bl	8000f3c <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a4:	f7fc fd4a 	bl	8000f3c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e187      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d036      	beq.n	800453c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d016      	beq.n	8004504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d6:	4b15      	ldr	r3, [pc, #84]	@ (800452c <HAL_RCC_OscConfig+0x248>)
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fc fd2e 	bl	8000f3c <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e4:	f7fc fd2a 	bl	8000f3c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e167      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 80044f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x200>
 8004502:	e01b      	b.n	800453c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004504:	4b09      	ldr	r3, [pc, #36]	@ (800452c <HAL_RCC_OscConfig+0x248>)
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450a:	f7fc fd17 	bl	8000f3c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	e00e      	b.n	8004530 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004512:	f7fc fd13 	bl	8000f3c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d907      	bls.n	8004530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e150      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
 8004524:	40023800 	.word	0x40023800
 8004528:	42470000 	.word	0x42470000
 800452c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004530:	4b88      	ldr	r3, [pc, #544]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1ea      	bne.n	8004512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8097 	beq.w	8004678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454e:	4b81      	ldr	r3, [pc, #516]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10f      	bne.n	800457a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	4b7d      	ldr	r3, [pc, #500]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	4a7c      	ldr	r2, [pc, #496]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004568:	6413      	str	r3, [r2, #64]	@ 0x40
 800456a:	4b7a      	ldr	r3, [pc, #488]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457a:	4b77      	ldr	r3, [pc, #476]	@ (8004758 <HAL_RCC_OscConfig+0x474>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d118      	bne.n	80045b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004586:	4b74      	ldr	r3, [pc, #464]	@ (8004758 <HAL_RCC_OscConfig+0x474>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a73      	ldr	r2, [pc, #460]	@ (8004758 <HAL_RCC_OscConfig+0x474>)
 800458c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004592:	f7fc fcd3 	bl	8000f3c <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459a:	f7fc fccf 	bl	8000f3c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e10c      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004758 <HAL_RCC_OscConfig+0x474>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d106      	bne.n	80045ce <HAL_RCC_OscConfig+0x2ea>
 80045c0:	4b64      	ldr	r3, [pc, #400]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c4:	4a63      	ldr	r2, [pc, #396]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80045cc:	e01c      	b.n	8004608 <HAL_RCC_OscConfig+0x324>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x30c>
 80045d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045da:	4a5e      	ldr	r2, [pc, #376]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045dc:	f043 0304 	orr.w	r3, r3, #4
 80045e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0x324>
 80045f0:	4b58      	ldr	r3, [pc, #352]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f4:	4a57      	ldr	r2, [pc, #348]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fc:	4b55      	ldr	r3, [pc, #340]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004600:	4a54      	ldr	r2, [pc, #336]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004602:	f023 0304 	bic.w	r3, r3, #4
 8004606:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d015      	beq.n	800463c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fc fc94 	bl	8000f3c <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004616:	e00a      	b.n	800462e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004618:	f7fc fc90 	bl	8000f3c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e0cb      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462e:	4b49      	ldr	r3, [pc, #292]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ee      	beq.n	8004618 <HAL_RCC_OscConfig+0x334>
 800463a:	e014      	b.n	8004666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463c:	f7fc fc7e 	bl	8000f3c <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004642:	e00a      	b.n	800465a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fc fc7a 	bl	8000f3c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e0b5      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465a:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1ee      	bne.n	8004644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466c:	4b39      	ldr	r3, [pc, #228]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	4a38      	ldr	r2, [pc, #224]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004676:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80a1 	beq.w	80047c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004682:	4b34      	ldr	r3, [pc, #208]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b08      	cmp	r3, #8
 800468c:	d05c      	beq.n	8004748 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d141      	bne.n	800471a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004696:	4b31      	ldr	r3, [pc, #196]	@ (800475c <HAL_RCC_OscConfig+0x478>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fc fc4e 	bl	8000f3c <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fc fc4a 	bl	8000f3c <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e087      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b6:	4b27      	ldr	r3, [pc, #156]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	019b      	lsls	r3, r3, #6
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	3b01      	subs	r3, #1
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	491b      	ldr	r1, [pc, #108]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ec:	4b1b      	ldr	r3, [pc, #108]	@ (800475c <HAL_RCC_OscConfig+0x478>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fc fc23 	bl	8000f3c <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fa:	f7fc fc1f 	bl	8000f3c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e05c      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470c:	4b11      	ldr	r3, [pc, #68]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <HAL_RCC_OscConfig+0x416>
 8004718:	e054      	b.n	80047c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471a:	4b10      	ldr	r3, [pc, #64]	@ (800475c <HAL_RCC_OscConfig+0x478>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fc fc0c 	bl	8000f3c <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7fc fc08 	bl	8000f3c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e045      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473a:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x444>
 8004746:	e03d      	b.n	80047c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d107      	bne.n	8004760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e038      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
 8004754:	40023800 	.word	0x40023800
 8004758:	40007000 	.word	0x40007000
 800475c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004760:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <HAL_RCC_OscConfig+0x4ec>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d028      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d121      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d11a      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004790:	4013      	ands	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004798:	4293      	cmp	r3, r2
 800479a:	d111      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	3b01      	subs	r3, #1
 80047aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800

080047d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0cc      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047e8:	4b68      	ldr	r3, [pc, #416]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d90c      	bls.n	8004810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b65      	ldr	r3, [pc, #404]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b63      	ldr	r3, [pc, #396]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0b8      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d020      	beq.n	800485e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004828:	4b59      	ldr	r3, [pc, #356]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a58      	ldr	r2, [pc, #352]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004840:	4b53      	ldr	r3, [pc, #332]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4a52      	ldr	r2, [pc, #328]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800484a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800484c:	4b50      	ldr	r3, [pc, #320]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	494d      	ldr	r1, [pc, #308]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d044      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d107      	bne.n	8004882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	4b47      	ldr	r3, [pc, #284]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d119      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e07f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d003      	beq.n	8004892 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800488e:	2b03      	cmp	r3, #3
 8004890:	d107      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004892:	4b3f      	ldr	r3, [pc, #252]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e06f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e067      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048b2:	4b37      	ldr	r3, [pc, #220]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f023 0203 	bic.w	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	4934      	ldr	r1, [pc, #208]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c4:	f7fc fb3a 	bl	8000f3c <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048cc:	f7fc fb36 	bl	8000f3c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e04f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 020c 	and.w	r2, r3, #12
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d1eb      	bne.n	80048cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048f4:	4b25      	ldr	r3, [pc, #148]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d20c      	bcs.n	800491c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b22      	ldr	r3, [pc, #136]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b20      	ldr	r3, [pc, #128]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e032      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004928:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4916      	ldr	r1, [pc, #88]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004946:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	490e      	ldr	r1, [pc, #56]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800495a:	f000 f821 	bl	80049a0 <HAL_RCC_GetSysClockFreq>
 800495e:	4602      	mov	r2, r0
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	490a      	ldr	r1, [pc, #40]	@ (8004994 <HAL_RCC_ClockConfig+0x1c0>)
 800496c:	5ccb      	ldrb	r3, [r1, r3]
 800496e:	fa22 f303 	lsr.w	r3, r2, r3
 8004972:	4a09      	ldr	r2, [pc, #36]	@ (8004998 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004976:	4b09      	ldr	r3, [pc, #36]	@ (800499c <HAL_RCC_ClockConfig+0x1c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fc fa9a 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023c00 	.word	0x40023c00
 8004990:	40023800 	.word	0x40023800
 8004994:	08008b00 	.word	0x08008b00
 8004998:	20000000 	.word	0x20000000
 800499c:	20000004 	.word	0x20000004

080049a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a4:	b094      	sub	sp, #80	@ 0x50
 80049a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b8:	4b79      	ldr	r3, [pc, #484]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 030c 	and.w	r3, r3, #12
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d00d      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x40>
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	f200 80e1 	bhi.w	8004b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x34>
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d003      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0x3a>
 80049d2:	e0db      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049d4:	4b73      	ldr	r3, [pc, #460]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80049d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049d8:	e0db      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049da:	4b73      	ldr	r3, [pc, #460]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80049dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049de:	e0d8      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049e0:	4b6f      	ldr	r3, [pc, #444]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ea:	4b6d      	ldr	r3, [pc, #436]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d063      	beq.n	8004abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f6:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	2200      	movs	r2, #0
 80049fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a12:	4622      	mov	r2, r4
 8004a14:	462b      	mov	r3, r5
 8004a16:	f04f 0000 	mov.w	r0, #0
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	0159      	lsls	r1, r3, #5
 8004a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a24:	0150      	lsls	r0, r2, #5
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	1a51      	subs	r1, r2, r1
 8004a2e:	6139      	str	r1, [r7, #16]
 8004a30:	4629      	mov	r1, r5
 8004a32:	eb63 0301 	sbc.w	r3, r3, r1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a44:	4659      	mov	r1, fp
 8004a46:	018b      	lsls	r3, r1, #6
 8004a48:	4651      	mov	r1, sl
 8004a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a4e:	4651      	mov	r1, sl
 8004a50:	018a      	lsls	r2, r1, #6
 8004a52:	4651      	mov	r1, sl
 8004a54:	ebb2 0801 	subs.w	r8, r2, r1
 8004a58:	4659      	mov	r1, fp
 8004a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a72:	4690      	mov	r8, r2
 8004a74:	4699      	mov	r9, r3
 8004a76:	4623      	mov	r3, r4
 8004a78:	eb18 0303 	adds.w	r3, r8, r3
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	462b      	mov	r3, r5
 8004a80:	eb49 0303 	adc.w	r3, r9, r3
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a92:	4629      	mov	r1, r5
 8004a94:	024b      	lsls	r3, r1, #9
 8004a96:	4621      	mov	r1, r4
 8004a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	024a      	lsls	r2, r1, #9
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ab0:	f7fb fb92 	bl	80001d8 <__aeabi_uldivmod>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004abc:	e058      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abe:	4b38      	ldr	r3, [pc, #224]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	099b      	lsrs	r3, r3, #6
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	4611      	mov	r1, r2
 8004aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ace:	623b      	str	r3, [r7, #32]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	f04f 0000 	mov.w	r0, #0
 8004ae0:	f04f 0100 	mov.w	r1, #0
 8004ae4:	0159      	lsls	r1, r3, #5
 8004ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aea:	0150      	lsls	r0, r2, #5
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4641      	mov	r1, r8
 8004af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004af6:	4649      	mov	r1, r9
 8004af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b10:	ebb2 040a 	subs.w	r4, r2, sl
 8004b14:	eb63 050b 	sbc.w	r5, r3, fp
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	00eb      	lsls	r3, r5, #3
 8004b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b26:	00e2      	lsls	r2, r4, #3
 8004b28:	4614      	mov	r4, r2
 8004b2a:	461d      	mov	r5, r3
 8004b2c:	4643      	mov	r3, r8
 8004b2e:	18e3      	adds	r3, r4, r3
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	464b      	mov	r3, r9
 8004b34:	eb45 0303 	adc.w	r3, r5, r3
 8004b38:	607b      	str	r3, [r7, #4]
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b46:	4629      	mov	r1, r5
 8004b48:	028b      	lsls	r3, r1, #10
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b50:	4621      	mov	r1, r4
 8004b52:	028a      	lsls	r2, r1, #10
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	61fa      	str	r2, [r7, #28]
 8004b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b64:	f7fb fb38 	bl	80001d8 <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	0c1b      	lsrs	r3, r3, #16
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b8a:	e002      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3750      	adds	r7, #80	@ 0x50
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	00f42400 	.word	0x00f42400
 8004ba8:	007a1200 	.word	0x007a1200

08004bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000000 	.word	0x20000000

08004bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bc8:	f7ff fff0 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	0a9b      	lsrs	r3, r3, #10
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4903      	ldr	r1, [pc, #12]	@ (8004be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	08008b10 	.word	0x08008b10

08004bec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d105      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d038      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c14:	4b68      	ldr	r3, [pc, #416]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c1a:	f7fc f98f 	bl	8000f3c <HAL_GetTick>
 8004c1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c20:	e008      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c22:	f7fc f98b 	bl	8000f3c <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e0bd      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c34:	4b61      	ldr	r3, [pc, #388]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f0      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	019b      	lsls	r3, r3, #6
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	071b      	lsls	r3, r3, #28
 8004c52:	495a      	ldr	r1, [pc, #360]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c5a:	4b57      	ldr	r3, [pc, #348]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c60:	f7fc f96c 	bl	8000f3c <HAL_GetTick>
 8004c64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c68:	f7fc f968 	bl	8000f3c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e09a      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c7a:	4b50      	ldr	r3, [pc, #320]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8083 	beq.w	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	4b48      	ldr	r3, [pc, #288]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	4a47      	ldr	r2, [pc, #284]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ca4:	4b45      	ldr	r3, [pc, #276]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cb0:	4b43      	ldr	r3, [pc, #268]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a42      	ldr	r2, [pc, #264]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cba:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cbc:	f7fc f93e 	bl	8000f3c <HAL_GetTick>
 8004cc0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc4:	f7fc f93a 	bl	8000f3c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e06c      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ce2:	4b36      	ldr	r3, [pc, #216]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cea:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d02f      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d028      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d00:	4b2e      	ldr	r3, [pc, #184]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d08:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d10:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d16:	4a29      	ldr	r2, [pc, #164]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d1c:	4b27      	ldr	r3, [pc, #156]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d114      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fc f908 	bl	8000f3c <HAL_GetTick>
 8004d2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d30:	f7fc f904 	bl	8000f3c <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e034      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d46:	4b1d      	ldr	r3, [pc, #116]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0ee      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d5e:	d10d      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004d60:	4b16      	ldr	r3, [pc, #88]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d74:	4911      	ldr	r1, [pc, #68]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
 8004d7a:	e005      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a0e      	ldr	r2, [pc, #56]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d82:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d86:	6093      	str	r3, [r2, #8]
 8004d88:	4b0c      	ldr	r3, [pc, #48]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d94:	4909      	ldr	r1, [pc, #36]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	7d1a      	ldrb	r2, [r3, #20]
 8004daa:	4b07      	ldr	r3, [pc, #28]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004dac:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	42470068 	.word	0x42470068
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	40007000 	.word	0x40007000
 8004dc4:	42470e40 	.word	0x42470e40
 8004dc8:	424711e0 	.word	0x424711e0

08004dcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d141      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dea:	4b25      	ldr	r3, [pc, #148]	@ (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d006      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e00:	d131      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e02:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e04:	617b      	str	r3, [r7, #20]
          break;
 8004e06:	e031      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e08:	4b1d      	ldr	r3, [pc, #116]	@ (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e14:	d109      	bne.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e16:	4b1a      	ldr	r3, [pc, #104]	@ (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e20:	4a19      	ldr	r2, [pc, #100]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e008      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e2a:	4b15      	ldr	r3, [pc, #84]	@ (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e34:	4a15      	ldr	r2, [pc, #84]	@ (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e3c:	4b10      	ldr	r3, [pc, #64]	@ (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e50:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e56:	0f1b      	lsrs	r3, r3, #28
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	617b      	str	r3, [r7, #20]
          break;
 8004e64:	e002      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
          break;
 8004e6a:	bf00      	nop
        }
      }
      break;
 8004e6c:	e000      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8004e6e:	bf00      	nop
    }
  }
  return frequency;
 8004e70:	697b      	ldr	r3, [r7, #20]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800
 8004e84:	00bb8000 	.word	0x00bb8000
 8004e88:	007a1200 	.word	0x007a1200
 8004e8c:	00f42400 	.word	0x00f42400

08004e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e07b      	b.n	8004f9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d108      	bne.n	8004ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eb2:	d009      	beq.n	8004ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	61da      	str	r2, [r3, #28]
 8004eba:	e005      	b.n	8004ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fb fed0 	bl	8000c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004efe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4c:	ea42 0103 	orr.w	r1, r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	f003 0104 	and.w	r1, r3, #4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	f003 0210 	and.w	r2, r3, #16
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	f107 001c 	add.w	r0, r7, #28
 8004fb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fb4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d123      	bne.n	8005004 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fe4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f9dc 	bl	80053b6 <USB_CoreReset>
 8004ffe:	4603      	mov	r3, r0
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	e01b      	b.n	800503c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f9d0 	bl	80053b6 <USB_CoreReset>
 8005016:	4603      	mov	r3, r0
 8005018:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800501a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005026:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	639a      	str	r2, [r3, #56]	@ 0x38
 800502e:	e005      	b.n	800503c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005034:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800503c:	7fbb      	ldrb	r3, [r7, #30]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d10b      	bne.n	800505a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f043 0206 	orr.w	r2, r3, #6
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f043 0220 	orr.w	r2, r3, #32
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005066:	b004      	add	sp, #16
 8005068:	4770      	bx	lr

0800506a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f043 0201 	orr.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 0201 	bic.w	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d115      	bne.n	80050fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050dc:	200a      	movs	r0, #10
 80050de:	f7fb ff39 	bl	8000f54 <HAL_Delay>
      ms += 10U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	330a      	adds	r3, #10
 80050e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f956 	bl	800539a <USB_GetMode>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d01e      	beq.n	8005132 <USB_SetCurrentMode+0x84>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80050f8:	d9f0      	bls.n	80050dc <USB_SetCurrentMode+0x2e>
 80050fa:	e01a      	b.n	8005132 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d115      	bne.n	800512e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800510e:	200a      	movs	r0, #10
 8005110:	f7fb ff20 	bl	8000f54 <HAL_Delay>
      ms += 10U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	330a      	adds	r3, #10
 8005118:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f93d 	bl	800539a <USB_GetMode>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <USB_SetCurrentMode+0x84>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2bc7      	cmp	r3, #199	@ 0xc7
 800512a:	d9f0      	bls.n	800510e <USB_SetCurrentMode+0x60>
 800512c:	e001      	b.n	8005132 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e005      	b.n	800513e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2bc8      	cmp	r3, #200	@ 0xc8
 8005136:	d101      	bne.n	800513c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005160:	d901      	bls.n	8005166 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e01b      	b.n	800519e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	daf2      	bge.n	8005154 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	019b      	lsls	r3, r3, #6
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3301      	adds	r3, #1
 8005182:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800518a:	d901      	bls.n	8005190 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e006      	b.n	800519e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b20      	cmp	r3, #32
 800519a:	d0f0      	beq.n	800517e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3301      	adds	r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051c2:	d901      	bls.n	80051c8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e018      	b.n	80051fa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	daf2      	bge.n	80051b6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2210      	movs	r2, #16
 80051d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3301      	adds	r3, #1
 80051de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051e6:	d901      	bls.n	80051ec <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e006      	b.n	80051fa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d0f0      	beq.n	80051da <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005206:	b480      	push	{r7}
 8005208:	b089      	sub	sp, #36	@ 0x24
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	4611      	mov	r1, r2
 8005212:	461a      	mov	r2, r3
 8005214:	460b      	mov	r3, r1
 8005216:	71fb      	strb	r3, [r7, #7]
 8005218:	4613      	mov	r3, r2
 800521a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005224:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d123      	bne.n	8005274 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800522c:	88bb      	ldrh	r3, [r7, #4]
 800522e:	3303      	adds	r3, #3
 8005230:	089b      	lsrs	r3, r3, #2
 8005232:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005234:	2300      	movs	r3, #0
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e018      	b.n	800526c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	031a      	lsls	r2, r3, #12
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005246:	461a      	mov	r2, r3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3301      	adds	r3, #1
 8005252:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	3301      	adds	r3, #1
 8005258:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3301      	adds	r3, #1
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	429a      	cmp	r2, r3
 8005272:	d3e2      	bcc.n	800523a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3724      	adds	r7, #36	@ 0x24
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005282:	b480      	push	{r7}
 8005284:	b08b      	sub	sp, #44	@ 0x2c
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	4613      	mov	r3, r2
 800528e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	089b      	lsrs	r3, r3, #2
 800529c:	b29b      	uxth	r3, r3
 800529e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052a8:	2300      	movs	r3, #0
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	e014      	b.n	80052d8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	601a      	str	r2, [r3, #0]
    pDest++;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	3301      	adds	r3, #1
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	3301      	adds	r3, #1
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	3301      	adds	r3, #1
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ce:	3301      	adds	r3, #1
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	3301      	adds	r3, #1
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	6a3a      	ldr	r2, [r7, #32]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d3e6      	bcc.n	80052ae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052e0:	8bfb      	ldrh	r3, [r7, #30]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01e      	beq.n	8005324 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052f0:	461a      	mov	r2, r3
 80052f2:	f107 0310 	add.w	r3, r7, #16
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	fa22 f303 	lsr.w	r3, r2, r3
 8005306:	b2da      	uxtb	r2, r3
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	701a      	strb	r2, [r3, #0]
      i++;
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	3301      	adds	r3, #1
 8005310:	623b      	str	r3, [r7, #32]
      pDest++;
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	3301      	adds	r3, #1
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005318:	8bfb      	ldrh	r3, [r7, #30]
 800531a:	3b01      	subs	r3, #1
 800531c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800531e:	8bfb      	ldrh	r3, [r7, #30]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ea      	bne.n	80052fa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005326:	4618      	mov	r0, r3
 8005328:	372c      	adds	r7, #44	@ 0x2c
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4013      	ands	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	4013      	ands	r3, r2
 800538a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800538c:	68bb      	ldr	r3, [r7, #8]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0301 	and.w	r3, r3, #1
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3301      	adds	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053ce:	d901      	bls.n	80053d4 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e022      	b.n	800541a <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	daf2      	bge.n	80053c2 <USB_CoreReset+0xc>

  count = 10U;
 80053dc:	230a      	movs	r3, #10
 80053de:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80053e0:	e002      	b.n	80053e8 <USB_CoreReset+0x32>
  {
    count--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f9      	bne.n	80053e2 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f043 0201 	orr.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3301      	adds	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005406:	d901      	bls.n	800540c <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e006      	b.n	800541a <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b01      	cmp	r3, #1
 8005416:	d0f0      	beq.n	80053fa <USB_CoreReset+0x44>

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005428:	b084      	sub	sp, #16
 800542a:	b580      	push	{r7, lr}
 800542c:	b086      	sub	sp, #24
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005448:	461a      	mov	r2, r3
 800544a:	2300      	movs	r3, #0
 800544c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005452:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d119      	bne.n	80054b2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800547e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005482:	2b01      	cmp	r3, #1
 8005484:	d10a      	bne.n	800549c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005494:	f043 0304 	orr.w	r3, r3, #4
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	e014      	b.n	80054c6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054aa:	f023 0304 	bic.w	r3, r3, #4
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e009      	b.n	80054c6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054c0:	f023 0304 	bic.w	r3, r3, #4
 80054c4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054c6:	2110      	movs	r1, #16
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff fe3c 	bl	8005146 <USB_FlushTxFifo>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff fe66 	bl	80051aa <USB_FlushRxFifo>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80054e8:	2300      	movs	r3, #0
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	e015      	b.n	800551a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054fa:	461a      	mov	r2, r3
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005500:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800550e:	461a      	mov	r2, r3
 8005510:	2300      	movs	r3, #0
 8005512:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	3301      	adds	r3, #1
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800551e:	461a      	mov	r2, r3
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4293      	cmp	r3, r2
 8005524:	d3e3      	bcc.n	80054ee <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005532:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2280      	movs	r2, #128	@ 0x80
 8005538:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a0e      	ldr	r2, [pc, #56]	@ (8005578 <USB_HostInit+0x150>)
 800553e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a0e      	ldr	r2, [pc, #56]	@ (800557c <USB_HostInit+0x154>)
 8005544:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005548:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f043 0210 	orr.w	r2, r3, #16
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	4b07      	ldr	r3, [pc, #28]	@ (8005580 <USB_HostInit+0x158>)
 8005562:	4313      	orrs	r3, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005574:	b004      	add	sp, #16
 8005576:	4770      	bx	lr
 8005578:	00600080 	.word	0x00600080
 800557c:	004000e0 	.word	0x004000e0
 8005580:	a3200008 	.word	0xa3200008

08005584 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055bc:	4313      	orrs	r3, r2
 80055be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d107      	bne.n	80055d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055cc:	461a      	mov	r2, r3
 80055ce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80055d2:	6053      	str	r3, [r2, #4]
 80055d4:	e00c      	b.n	80055f0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d107      	bne.n	80055ec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055e2:	461a      	mov	r2, r3
 80055e4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80055e8:	6053      	str	r3, [r2, #4]
 80055ea:	e001      	b.n	80055f0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800561e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800562c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800562e:	2064      	movs	r0, #100	@ 0x64
 8005630:	f7fb fc90 	bl	8000f54 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800563c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005640:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005642:	200a      	movs	r0, #10
 8005644:	f7fb fc86 	bl	8000f54 <HAL_Delay>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005676:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <USB_DriveVbus+0x44>
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d106      	bne.n	8005696 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005690:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005694:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a0:	d109      	bne.n	80056b6 <USB_DriveVbus+0x64>
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80056b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056b4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	0c5b      	lsrs	r3, r3, #17
 80056e2:	f003 0303 	and.w	r3, r3, #3
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	b29b      	uxth	r3, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	461a      	mov	r2, r3
 8005722:	4603      	mov	r3, r0
 8005724:	70fb      	strb	r3, [r7, #3]
 8005726:	460b      	mov	r3, r1
 8005728:	70bb      	strb	r3, [r7, #2]
 800572a:	4613      	mov	r3, r2
 800572c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005742:	461a      	mov	r2, r3
 8005744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005748:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800574a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800574e:	2b03      	cmp	r3, #3
 8005750:	d867      	bhi.n	8005822 <USB_HC_Init+0x10e>
 8005752:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <USB_HC_Init+0x44>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	08005769 	.word	0x08005769
 800575c:	080057e5 	.word	0x080057e5
 8005760:	08005769 	.word	0x08005769
 8005764:	080057a7 	.word	0x080057a7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005774:	461a      	mov	r2, r3
 8005776:	f240 439d 	movw	r3, #1181	@ 0x49d
 800577a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800577c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005780:	2b00      	cmp	r3, #0
 8005782:	da51      	bge.n	8005828 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	78fa      	ldrb	r2, [r7, #3]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	440a      	add	r2, r1
 800579a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800579e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80057a4:	e040      	b.n	8005828 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057b2:	461a      	mov	r2, r3
 80057b4:	f240 639d 	movw	r3, #1693	@ 0x69d
 80057b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	da34      	bge.n	800582c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057e0:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057e2:	e023      	b.n	800582c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f0:	461a      	mov	r2, r3
 80057f2:	f240 2325 	movw	r3, #549	@ 0x225
 80057f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	da17      	bge.n	8005830 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	78fa      	ldrb	r2, [r7, #3]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	440a      	add	r2, r1
 8005816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800581a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800581e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005820:	e006      	b.n	8005830 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	77fb      	strb	r3, [r7, #31]
      break;
 8005826:	e004      	b.n	8005832 <USB_HC_Init+0x11e>
      break;
 8005828:	bf00      	nop
 800582a:	e002      	b.n	8005832 <USB_HC_Init+0x11e>
      break;
 800582c:	bf00      	nop
 800582e:	e000      	b.n	8005832 <USB_HC_Init+0x11e>
      break;
 8005830:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800583e:	461a      	mov	r2, r3
 8005840:	2300      	movs	r3, #0
 8005842:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	78fa      	ldrb	r2, [r7, #3]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	440a      	add	r2, r1
 800585a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800585e:	f043 0302 	orr.w	r3, r3, #2
 8005862:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	2101      	movs	r1, #1
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	6939      	ldr	r1, [r7, #16]
 800587a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800587e:	4313      	orrs	r3, r2
 8005880:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800588e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005892:	2b00      	cmp	r3, #0
 8005894:	da03      	bge.n	800589e <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	e001      	b.n	80058a2 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff ff0e 	bl	80056c4 <USB_GetHostSpeed>
 80058a8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d106      	bne.n	80058c0 <USB_HC_Init+0x1ac>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d003      	beq.n	80058c0 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e001      	b.n	80058c4 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c4:	787b      	ldrb	r3, [r7, #1]
 80058c6:	059b      	lsls	r3, r3, #22
 80058c8:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058cc:	78bb      	ldrb	r3, [r7, #2]
 80058ce:	02db      	lsls	r3, r3, #11
 80058d0:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058d4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058da:	049b      	lsls	r3, r3, #18
 80058dc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80058e2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80058e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058e8:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	431a      	orrs	r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005902:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005904:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005908:	2b03      	cmp	r3, #3
 800590a:	d003      	beq.n	8005914 <USB_HC_Init+0x200>
 800590c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005910:	2b01      	cmp	r3, #1
 8005912:	d10f      	bne.n	8005934 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4413      	add	r3, r2
 800591c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	78fa      	ldrb	r2, [r7, #3]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	440a      	add	r2, r1
 800592a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800592e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005932:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005934:	7ffb      	ldrb	r3, [r7, #31]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop

08005940 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08c      	sub	sp, #48	@ 0x30
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	4613      	mov	r3, r2
 800594c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005958:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800595c:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	799b      	ldrb	r3, [r3, #6]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d158      	bne.n	8005a18 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005966:	2301      	movs	r3, #1
 8005968:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	78db      	ldrb	r3, [r3, #3]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005972:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	8a92      	ldrh	r2, [r2, #20]
 8005978:	fb03 f202 	mul.w	r2, r3, r2
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	61da      	str	r2, [r3, #28]
 8005980:	e079      	b.n	8005a76 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	7c9b      	ldrb	r3, [r3, #18]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d130      	bne.n	80059ec <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005990:	d918      	bls.n	80059c4 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	8a9b      	ldrh	r3, [r3, #20]
 8005996:	461a      	mov	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d003      	beq.n	80059b4 <USB_HC_StartXfer+0x74>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d103      	bne.n	80059bc <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2202      	movs	r2, #2
 80059b8:	60da      	str	r2, [r3, #12]
 80059ba:	e05c      	b.n	8005a76 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2201      	movs	r2, #1
 80059c0:	60da      	str	r2, [r3, #12]
 80059c2:	e058      	b.n	8005a76 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	6a1a      	ldr	r2, [r3, #32]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d007      	beq.n	80059e4 <USB_HC_StartXfer+0xa4>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d003      	beq.n	80059e4 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2204      	movs	r2, #4
 80059e0:	60da      	str	r2, [r3, #12]
 80059e2:	e048      	b.n	8005a76 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2203      	movs	r2, #3
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	e044      	b.n	8005a76 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d10d      	bne.n	8005a0e <USB_HC_StartXfer+0xce>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	8a92      	ldrh	r2, [r2, #20]
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d907      	bls.n	8005a0e <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	8a92      	ldrh	r2, [r2, #20]
 8005a04:	fb03 f202 	mul.w	r2, r3, r2
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	61da      	str	r2, [r3, #28]
 8005a0c:	e033      	b.n	8005a76 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	61da      	str	r2, [r3, #28]
 8005a16:	e02e      	b.n	8005a76 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d018      	beq.n	8005a52 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	8a92      	ldrh	r2, [r2, #20]
 8005a28:	4413      	add	r3, r2
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	8a92      	ldrh	r2, [r2, #20]
 8005a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a34:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005a36:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005a38:	8b7b      	ldrh	r3, [r7, #26]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d90b      	bls.n	8005a56 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8005a3e:	8b7b      	ldrh	r3, [r7, #26]
 8005a40:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	8a92      	ldrh	r2, [r2, #20]
 8005a48:	fb03 f202 	mul.w	r2, r3, r2
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	61da      	str	r2, [r3, #28]
 8005a50:	e001      	b.n	8005a56 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8005a52:	2301      	movs	r3, #1
 8005a54:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	78db      	ldrb	r3, [r3, #3]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d007      	beq.n	8005a6e <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	8a92      	ldrh	r2, [r2, #20]
 8005a64:	fb03 f202 	mul.w	r2, r3, r2
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	61da      	str	r2, [r3, #28]
 8005a6c:	e003      	b.n	8005a76 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a80:	04d9      	lsls	r1, r3, #19
 8005a82:	4ba4      	ldr	r3, [pc, #656]	@ (8005d14 <USB_HC_StartXfer+0x3d4>)
 8005a84:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a86:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	7d9b      	ldrb	r3, [r3, #22]
 8005a8c:	075b      	lsls	r3, r3, #29
 8005a8e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a92:	69f9      	ldr	r1, [r7, #28]
 8005a94:	0148      	lsls	r0, r1, #5
 8005a96:	6a39      	ldr	r1, [r7, #32]
 8005a98:	4401      	add	r1, r0
 8005a9a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a9e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005aa0:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6999      	ldr	r1, [r3, #24]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ab8:	460a      	mov	r2, r1
 8005aba:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	6a3a      	ldr	r2, [r7, #32]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005af2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	7e7b      	ldrb	r3, [r7, #25]
 8005b04:	075b      	lsls	r3, r3, #29
 8005b06:	69f9      	ldr	r1, [r7, #28]
 8005b08:	0148      	lsls	r0, r1, #5
 8005b0a:	6a39      	ldr	r1, [r7, #32]
 8005b0c:	4401      	add	r1, r0
 8005b0e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005b12:	4313      	orrs	r3, r2
 8005b14:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	799b      	ldrb	r3, [r3, #6]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	f040 80c4 	bne.w	8005ca8 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	7c5b      	ldrb	r3, [r3, #17]
 8005b24:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	6a3a      	ldr	r2, [r7, #32]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b3c:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	6a3a      	ldr	r2, [r7, #32]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b58:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b5c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	79db      	ldrb	r3, [r3, #7]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d123      	bne.n	8005bae <USB_HC_StartXfer+0x26e>
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	78db      	ldrb	r3, [r3, #3]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d11f      	bne.n	8005bae <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	6a3a      	ldr	r2, [r7, #32]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b8c:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	6a3a      	ldr	r2, [r7, #32]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bac:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	7c9b      	ldrb	r3, [r3, #18]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d003      	beq.n	8005bbe <USB_HC_StartXfer+0x27e>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	7c9b      	ldrb	r3, [r3, #18]
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d117      	bne.n	8005bee <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d113      	bne.n	8005bee <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	78db      	ldrb	r3, [r3, #3]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10f      	bne.n	8005bee <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	6a3a      	ldr	r2, [r7, #32]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bec:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	7c9b      	ldrb	r3, [r3, #18]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d163      	bne.n	8005cbe <USB_HC_StartXfer+0x37e>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	78db      	ldrb	r3, [r3, #3]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d15f      	bne.n	8005cbe <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d859      	bhi.n	8005cbc <USB_HC_StartXfer+0x37c>
 8005c08:	a201      	add	r2, pc, #4	@ (adr r2, 8005c10 <USB_HC_StartXfer+0x2d0>)
 8005c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0e:	bf00      	nop
 8005c10:	08005c21 	.word	0x08005c21
 8005c14:	08005c43 	.word	0x08005c43
 8005c18:	08005c65 	.word	0x08005c65
 8005c1c:	08005c87 	.word	0x08005c87
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	6a3a      	ldr	r2, [r7, #32]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c3e:	6053      	str	r3, [r2, #4]
          break;
 8005c40:	e03d      	b.n	8005cbe <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	6a3a      	ldr	r2, [r7, #32]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c5c:	f043 030e 	orr.w	r3, r3, #14
 8005c60:	6053      	str	r3, [r2, #4]
          break;
 8005c62:	e02c      	b.n	8005cbe <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c82:	6053      	str	r3, [r2, #4]
          break;
 8005c84:	e01b      	b.n	8005cbe <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	6a3a      	ldr	r2, [r7, #32]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ca0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ca4:	6053      	str	r3, [r2, #4]
          break;
 8005ca6:	e00a      	b.n	8005cbe <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	6053      	str	r3, [r2, #4]
 8005cba:	e000      	b.n	8005cbe <USB_HC_StartXfer+0x37e>
          break;
 8005cbc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005cd4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	78db      	ldrb	r3, [r3, #3]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ce4:	613b      	str	r3, [r7, #16]
 8005ce6:	e003      	b.n	8005cf0 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cf6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d04:	461a      	mov	r2, r3
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e055      	b.n	8005dc0 <USB_HC_StartXfer+0x480>
 8005d14:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	78db      	ldrb	r3, [r3, #3]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d14e      	bne.n	8005dbe <USB_HC_StartXfer+0x47e>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d04a      	beq.n	8005dbe <USB_HC_StartXfer+0x47e>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	79db      	ldrb	r3, [r3, #7]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d146      	bne.n	8005dbe <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	7c9b      	ldrb	r3, [r3, #18]
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d831      	bhi.n	8005d9c <USB_HC_StartXfer+0x45c>
 8005d38:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <USB_HC_StartXfer+0x400>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d51 	.word	0x08005d51
 8005d44:	08005d75 	.word	0x08005d75
 8005d48:	08005d51 	.word	0x08005d51
 8005d4c:	08005d75 	.word	0x08005d75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	3303      	adds	r3, #3
 8005d56:	089b      	lsrs	r3, r3, #2
 8005d58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005d5a:	8afa      	ldrh	r2, [r7, #22]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d91c      	bls.n	8005da0 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	f043 0220 	orr.w	r2, r3, #32
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d72:	e015      	b.n	8005da0 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	3303      	adds	r3, #3
 8005d7a:	089b      	lsrs	r3, r3, #2
 8005d7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005d7e:	8afa      	ldrh	r2, [r7, #22]
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d90a      	bls.n	8005da4 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d9a:	e003      	b.n	8005da4 <USB_HC_StartXfer+0x464>

      default:
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e002      	b.n	8005da6 <USB_HC_StartXfer+0x466>
        break;
 8005da0:	bf00      	nop
 8005da2:	e000      	b.n	8005da6 <USB_HC_StartXfer+0x466>
        break;
 8005da4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6999      	ldr	r1, [r3, #24]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	785a      	ldrb	r2, [r3, #1]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2000      	movs	r0, #0
 8005db6:	9000      	str	r0, [sp, #0]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7ff fa24 	bl	8005206 <USB_WritePacket>
  }

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3728      	adds	r7, #40	@ 0x28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	b29b      	uxth	r3, r3
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b089      	sub	sp, #36	@ 0x24
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	0c9b      	lsrs	r3, r3, #18
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	0fdb      	lsrs	r3, r3, #31
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	0fdb      	lsrs	r3, r3, #31
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d10d      	bne.n	8005e6c <USB_HC_Halt+0x82>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <USB_HC_Halt+0x82>
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d002      	beq.n	8005e68 <USB_HC_Halt+0x7e>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d101      	bne.n	8005e6c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e0d8      	b.n	800601e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <USB_HC_Halt+0x8e>
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d173      	bne.n	8005f60 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d14a      	bne.n	8005f3a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d133      	bne.n	8005f18 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ece:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005eee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005efc:	d82e      	bhi.n	8005f5c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f14:	d0ec      	beq.n	8005ef0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f16:	e081      	b.n	800601c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f36:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f38:	e070      	b.n	800601c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f5a:	e05f      	b.n	800601c <USB_HC_Halt+0x232>
            break;
 8005f5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f5e:	e05d      	b.n	800601c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d133      	bne.n	8005ff8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005faa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fdc:	d81d      	bhi.n	800601a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ff4:	d0ec      	beq.n	8005fd0 <USB_HC_Halt+0x1e6>
 8005ff6:	e011      	b.n	800601c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	440a      	add	r2, r1
 800600e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006012:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	e000      	b.n	800601c <USB_HC_Halt+0x232>
          break;
 800601a:	bf00      	nop
    }
  }

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3724      	adds	r7, #36	@ 0x24
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b088      	sub	sp, #32
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff f824 	bl	800508c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006044:	2110      	movs	r1, #16
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff f87d 	bl	8005146 <USB_FlushTxFifo>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff f8a7 	bl	80051aa <USB_FlushRxFifo>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006066:	2300      	movs	r3, #0
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	e01f      	b.n	80060ac <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006082:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800608a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006092:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a0:	461a      	mov	r2, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	3301      	adds	r3, #1
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	d9dc      	bls.n	800606c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80060b2:	2300      	movs	r3, #0
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	e034      	b.n	8006122 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060ce:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060d6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060de:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ec:	461a      	mov	r2, r3
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060fe:	d80c      	bhi.n	800611a <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	4413      	add	r3, r2
 8006108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006112:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006116:	d0ec      	beq.n	80060f2 <USB_StopHost+0xc8>
 8006118:	e000      	b.n	800611c <USB_StopHost+0xf2>
        break;
 800611a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	3301      	adds	r3, #1
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	2b0f      	cmp	r3, #15
 8006126:	d9c7      	bls.n	80060b8 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800612e:	461a      	mov	r2, r3
 8006130:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006134:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800613c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fe ff93 	bl	800506a <USB_EnableGlobalInt>

  return ret;
 8006144:	7ffb      	ldrb	r3, [r7, #31]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3720      	adds	r7, #32
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800614e:	b590      	push	{r4, r7, lr}
 8006150:	b089      	sub	sp, #36	@ 0x24
 8006152:	af04      	add	r7, sp, #16
 8006154:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006156:	2301      	movs	r3, #1
 8006158:	2202      	movs	r2, #2
 800615a:	2102      	movs	r1, #2
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fc84 	bl	8006a6a <USBH_FindInterface>
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006166:	7bfb      	ldrb	r3, [r7, #15]
 8006168:	2bff      	cmp	r3, #255	@ 0xff
 800616a:	d002      	beq.n	8006172 <USBH_CDC_InterfaceInit+0x24>
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d901      	bls.n	8006176 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006172:	2302      	movs	r3, #2
 8006174:	e13d      	b.n	80063f2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fc59 	bl	8006a32 <USBH_SelectInterface>
 8006180:	4603      	mov	r3, r0
 8006182:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006184:	7bbb      	ldrb	r3, [r7, #14]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800618a:	2302      	movs	r3, #2
 800618c:	e131      	b.n	80063f2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006194:	2050      	movs	r0, #80	@ 0x50
 8006196:	f002 fb59 	bl	800884c <malloc>
 800619a:	4603      	mov	r3, r0
 800619c:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80061ae:	2302      	movs	r3, #2
 80061b0:	e11f      	b.n	80063f2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80061b2:	2250      	movs	r2, #80	@ 0x50
 80061b4:	2100      	movs	r1, #0
 80061b6:	68b8      	ldr	r0, [r7, #8]
 80061b8:	f002 fc06 	bl	80089c8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	211a      	movs	r1, #26
 80061c2:	fb01 f303 	mul.w	r3, r1, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da15      	bge.n	8006200 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	211a      	movs	r1, #26
 80061da:	fb01 f303 	mul.w	r3, r1, r3
 80061de:	4413      	add	r3, r2
 80061e0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80061e4:	781a      	ldrb	r2, [r3, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	211a      	movs	r1, #26
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80061fa:	881a      	ldrh	r2, [r3, #0]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 ffc5 	bl	8008196 <USBH_AllocPipe>
 800620c:	4603      	mov	r3, r0
 800620e:	461a      	mov	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	7819      	ldrb	r1, [r3, #0]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	7858      	ldrb	r0, [r3, #1]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	8952      	ldrh	r2, [r2, #10]
 800622c:	9202      	str	r2, [sp, #8]
 800622e:	2203      	movs	r2, #3
 8006230:	9201      	str	r2, [sp, #4]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	4623      	mov	r3, r4
 8006236:	4602      	mov	r2, r0
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 ff7d 	bl	8008138 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f002 fa7a 	bl	8008740 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800624c:	2300      	movs	r3, #0
 800624e:	2200      	movs	r2, #0
 8006250:	210a      	movs	r1, #10
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fc09 	bl	8006a6a <USBH_FindInterface>
 8006258:	4603      	mov	r3, r0
 800625a:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	2bff      	cmp	r3, #255	@ 0xff
 8006260:	d002      	beq.n	8006268 <USBH_CDC_InterfaceInit+0x11a>
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d901      	bls.n	800626c <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006268:	2302      	movs	r3, #2
 800626a:	e0c2      	b.n	80063f2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	211a      	movs	r1, #26
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	4413      	add	r3, r2
 8006278:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	b25b      	sxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	da16      	bge.n	80062b2 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	211a      	movs	r1, #26
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006294:	781a      	ldrb	r2, [r3, #0]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	211a      	movs	r1, #26
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	835a      	strh	r2, [r3, #26]
 80062b0:	e015      	b.n	80062de <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	211a      	movs	r1, #26
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	4413      	add	r3, r2
 80062be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062c2:	781a      	ldrb	r2, [r3, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	211a      	movs	r1, #26
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062d8:	881a      	ldrh	r2, [r3, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	211a      	movs	r1, #26
 80062e4:	fb01 f303 	mul.w	r3, r1, r3
 80062e8:	4413      	add	r3, r2
 80062ea:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	b25b      	sxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da16      	bge.n	8006324 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	211a      	movs	r1, #26
 80062fc:	fb01 f303 	mul.w	r3, r1, r3
 8006300:	4413      	add	r3, r2
 8006302:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006306:	781a      	ldrb	r2, [r3, #0]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	211a      	movs	r1, #26
 8006312:	fb01 f303 	mul.w	r3, r1, r3
 8006316:	4413      	add	r3, r2
 8006318:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	835a      	strh	r2, [r3, #26]
 8006322:	e015      	b.n	8006350 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	211a      	movs	r1, #26
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	4413      	add	r3, r2
 8006330:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006334:	781a      	ldrb	r2, [r3, #0]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	211a      	movs	r1, #26
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	4413      	add	r3, r2
 8006346:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800634a:	881a      	ldrh	r2, [r3, #0]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	7b9b      	ldrb	r3, [r3, #14]
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 ff1d 	bl	8008196 <USBH_AllocPipe>
 800635c:	4603      	mov	r3, r0
 800635e:	461a      	mov	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	7bdb      	ldrb	r3, [r3, #15]
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f001 ff13 	bl	8008196 <USBH_AllocPipe>
 8006370:	4603      	mov	r3, r0
 8006372:	461a      	mov	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	7b59      	ldrb	r1, [r3, #13]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	7b98      	ldrb	r0, [r3, #14]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	8b12      	ldrh	r2, [r2, #24]
 8006390:	9202      	str	r2, [sp, #8]
 8006392:	2202      	movs	r2, #2
 8006394:	9201      	str	r2, [sp, #4]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	4623      	mov	r3, r4
 800639a:	4602      	mov	r2, r0
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 fecb 	bl	8008138 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	7b19      	ldrb	r1, [r3, #12]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	7bd8      	ldrb	r0, [r3, #15]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	8b52      	ldrh	r2, [r2, #26]
 80063ba:	9202      	str	r2, [sp, #8]
 80063bc:	2202      	movs	r2, #2
 80063be:	9201      	str	r2, [sp, #4]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	4623      	mov	r3, r4
 80063c4:	4602      	mov	r2, r0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 feb6 	bl	8008138 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	7b5b      	ldrb	r3, [r3, #13]
 80063d8:	2200      	movs	r2, #0
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f002 f9af 	bl	8008740 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	7b1b      	ldrb	r3, [r3, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f002 f9a8 	bl	8008740 <USBH_LL_SetToggle>

  return USBH_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd90      	pop	{r4, r7, pc}

080063fa <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00e      	beq.n	8006432 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 feab 	bl	8008176 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fed6 	bl	80081d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	7b1b      	ldrb	r3, [r3, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00e      	beq.n	8006458 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	7b1b      	ldrb	r3, [r3, #12]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fe98 	bl	8008176 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	7b1b      	ldrb	r3, [r3, #12]
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 fec3 	bl	80081d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	7b5b      	ldrb	r3, [r3, #13]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00e      	beq.n	800647e <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	7b5b      	ldrb	r3, [r3, #13]
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fe85 	bl	8008176 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	7b5b      	ldrb	r3, [r3, #13]
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 feb0 	bl	80081d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	4618      	mov	r0, r3
 8006494:	f002 f9e2 	bl	800885c <free>
    phost->pActiveClass->pData = 0U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800649e:	2200      	movs	r2, #0
 80064a0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3340      	adds	r3, #64	@ 0x40
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f8b2 	bl	800662e <GetLineCoding>
 80064ca:	4603      	mov	r3, r0
 80064cc:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80064ce:	7afb      	ldrb	r3, [r7, #11]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80064da:	2102      	movs	r1, #2
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80064e0:	7afb      	ldrb	r3, [r7, #11]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800650c:	2b04      	cmp	r3, #4
 800650e:	d877      	bhi.n	8006600 <USBH_CDC_Process+0x114>
 8006510:	a201      	add	r2, pc, #4	@ (adr r2, 8006518 <USBH_CDC_Process+0x2c>)
 8006512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006516:	bf00      	nop
 8006518:	0800652d 	.word	0x0800652d
 800651c:	08006533 	.word	0x08006533
 8006520:	08006563 	.word	0x08006563
 8006524:	080065d7 	.word	0x080065d7
 8006528:	080065e5 	.word	0x080065e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]
      break;
 8006530:	e06d      	b.n	800660e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f897 	bl	800666c <SetLineCoding>
 800653e:	4603      	mov	r3, r0
 8006540:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006550:	e058      	b.n	8006604 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d055      	beq.n	8006604 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2204      	movs	r2, #4
 800655c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006560:	e050      	b.n	8006604 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	3340      	adds	r3, #64	@ 0x40
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f860 	bl	800662e <GetLineCoding>
 800656e:	4603      	mov	r3, r0
 8006570:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d126      	bne.n	80065c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800658a:	791b      	ldrb	r3, [r3, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d13b      	bne.n	8006608 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800659a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800659c:	429a      	cmp	r2, r3
 800659e:	d133      	bne.n	8006608 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d12b      	bne.n	8006608 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d124      	bne.n	8006608 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f958 	bl	8006874 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80065c4:	e020      	b.n	8006608 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d01d      	beq.n	8006608 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2204      	movs	r2, #4
 80065d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80065d4:	e018      	b.n	8006608 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f867 	bl	80066aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f8da 	bl	8006796 <CDC_ProcessReception>
      break;
 80065e2:	e014      	b.n	800660e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80065e4:	2100      	movs	r1, #0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 f81e 	bl	8007628 <USBH_ClrFeature>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80065fe:	e005      	b.n	800660c <USBH_CDC_Process+0x120>

    default:
      break;
 8006600:	bf00      	nop
 8006602:	e004      	b.n	800660e <USBH_CDC_Process+0x122>
      break;
 8006604:	bf00      	nop
 8006606:	e002      	b.n	800660e <USBH_CDC_Process+0x122>
      break;
 8006608:	bf00      	nop
 800660a:	e000      	b.n	800660e <USBH_CDC_Process+0x122>
      break;
 800660c:	bf00      	nop

  }

  return status;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	22a1      	movs	r2, #161	@ 0xa1
 800663c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2221      	movs	r2, #33	@ 0x21
 8006642:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2207      	movs	r2, #7
 8006654:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2207      	movs	r2, #7
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fb17 	bl	8007c90 <USBH_CtlReq>
 8006662:	4603      	mov	r3, r0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2221      	movs	r2, #33	@ 0x21
 800667a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2207      	movs	r2, #7
 8006692:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2207      	movs	r2, #7
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 faf8 	bl	8007c90 <USBH_CtlReq>
 80066a0:	4603      	mov	r3, r0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b086      	sub	sp, #24
 80066ae:	af02      	add	r7, sp, #8
 80066b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066bc:	2300      	movs	r3, #0
 80066be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d002      	beq.n	80066d0 <CDC_ProcessTransmission+0x26>
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d023      	beq.n	8006716 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80066ce:	e05e      	b.n	800678e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	8b12      	ldrh	r2, [r2, #24]
 80066d8:	4293      	cmp	r3, r2
 80066da:	d90b      	bls.n	80066f4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	69d9      	ldr	r1, [r3, #28]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8b1a      	ldrh	r2, [r3, #24]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	7b5b      	ldrb	r3, [r3, #13]
 80066e8:	2001      	movs	r0, #1
 80066ea:	9000      	str	r0, [sp, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 fce0 	bl	80080b2 <USBH_BulkSendData>
 80066f2:	e00b      	b.n	800670c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	7b5b      	ldrb	r3, [r3, #13]
 8006702:	2001      	movs	r0, #1
 8006704:	9000      	str	r0, [sp, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 fcd3 	bl	80080b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006714:	e03b      	b.n	800678e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	7b5b      	ldrb	r3, [r3, #13]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 ffe5 	bl	80086ec <USBH_LL_GetURBState>
 8006722:	4603      	mov	r3, r0
 8006724:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d128      	bne.n	800677e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	8b12      	ldrh	r2, [r2, #24]
 8006734:	4293      	cmp	r3, r2
 8006736:	d90e      	bls.n	8006756 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	8b12      	ldrh	r2, [r2, #24]
 8006740:	1a9a      	subs	r2, r3, r2
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	8b12      	ldrh	r2, [r2, #24]
 800674e:	441a      	add	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	61da      	str	r2, [r3, #28]
 8006754:	e002      	b.n	800675c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	d004      	beq.n	800676e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800676c:	e00e      	b.n	800678c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f868 	bl	800684c <USBH_CDC_TransmitCallback>
      break;
 800677c:	e006      	b.n	800678c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d103      	bne.n	800678c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800678c:	bf00      	nop
  }
}
 800678e:	bf00      	nop
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d002      	beq.n	80067bc <CDC_ProcessReception+0x26>
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d00e      	beq.n	80067d8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80067ba:	e043      	b.n	8006844 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	6a19      	ldr	r1, [r3, #32]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	8b5a      	ldrh	r2, [r3, #26]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	7b1b      	ldrb	r3, [r3, #12]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fc97 	bl	80080fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2204      	movs	r2, #4
 80067d2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80067d6:	e035      	b.n	8006844 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	7b1b      	ldrb	r3, [r3, #12]
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 ff84 	bl	80086ec <USBH_LL_GetURBState>
 80067e4:	4603      	mov	r3, r0
 80067e6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80067e8:	7cfb      	ldrb	r3, [r7, #19]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d129      	bne.n	8006842 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	7b1b      	ldrb	r3, [r3, #12]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fef9 	bl	80085ec <USBH_LL_GetLastXferSize>
 80067fa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	429a      	cmp	r2, r3
 8006804:	d016      	beq.n	8006834 <CDC_ProcessReception+0x9e>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	8b5b      	ldrh	r3, [r3, #26]
 800680a:	461a      	mov	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4293      	cmp	r3, r2
 8006810:	d110      	bne.n	8006834 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	1ad2      	subs	r2, r2, r3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	6a1a      	ldr	r2, [r3, #32]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	441a      	add	r2, r3
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2203      	movs	r2, #3
 800682e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006832:	e006      	b.n	8006842 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f80f 	bl	8006860 <USBH_CDC_ReceiveCallback>
      break;
 8006842:	bf00      	nop
  }
}
 8006844:	bf00      	nop
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	4613      	mov	r3, r2
 8006894:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800689c:	2302      	movs	r3, #2
 800689e:	e029      	b.n	80068f4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	79fa      	ldrb	r2, [r7, #7]
 80068a4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f81f 	bl	80068fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f001 fdc9 	bl	8008484 <USBH_LL_Init>

  return USBH_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006904:	2300      	movs	r3, #0
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	e009      	b.n	800691e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	33e0      	adds	r3, #224	@ 0xe0
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	2200      	movs	r2, #0
 8006916:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3301      	adds	r3, #1
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b0f      	cmp	r3, #15
 8006922:	d9f2      	bls.n	800690a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e009      	b.n	800693e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3301      	adds	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006944:	d3f1      	bcc.n	800692a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2240      	movs	r2, #64	@ 0x40
 800696a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	331c      	adds	r3, #28
 8006996:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800699a:	2100      	movs	r1, #0
 800699c:	4618      	mov	r0, r3
 800699e:	f002 f813 	bl	80089c8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80069a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f002 f80a 	bl	80089c8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80069ba:	2212      	movs	r2, #18
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f002 f802 	bl	80089c8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80069ca:	223e      	movs	r2, #62	@ 0x3e
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 fffa 	bl	80089c8 <memset>

  return USBH_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d016      	beq.n	8006a20 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10e      	bne.n	8006a1a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006a02:	1c59      	adds	r1, r3, #1
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	33de      	adds	r3, #222	@ 0xde
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e004      	b.n	8006a24 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	73fb      	strb	r3, [r7, #15]
 8006a1e:	e001      	b.n	8006a24 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a20:	2302      	movs	r3, #2
 8006a22:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006a48:	78fa      	ldrb	r2, [r7, #3]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d204      	bcs.n	8006a58 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	78fa      	ldrb	r2, [r7, #3]
 8006a52:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006a56:	e001      	b.n	8006a5c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	4608      	mov	r0, r1
 8006a74:	4611      	mov	r1, r2
 8006a76:	461a      	mov	r2, r3
 8006a78:	4603      	mov	r3, r0
 8006a7a:	70fb      	strb	r3, [r7, #3]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70bb      	strb	r3, [r7, #2]
 8006a80:	4613      	mov	r3, r2
 8006a82:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006a92:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a94:	e025      	b.n	8006ae2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	221a      	movs	r2, #26
 8006a9a:	fb02 f303 	mul.w	r3, r2, r3
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	795b      	ldrb	r3, [r3, #5]
 8006aac:	78fa      	ldrb	r2, [r7, #3]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d002      	beq.n	8006ab8 <USBH_FindInterface+0x4e>
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	2bff      	cmp	r3, #255	@ 0xff
 8006ab6:	d111      	bne.n	8006adc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006abc:	78ba      	ldrb	r2, [r7, #2]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d002      	beq.n	8006ac8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ac2:	78bb      	ldrb	r3, [r7, #2]
 8006ac4:	2bff      	cmp	r3, #255	@ 0xff
 8006ac6:	d109      	bne.n	8006adc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006acc:	787a      	ldrb	r2, [r7, #1]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d002      	beq.n	8006ad8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ad2:	787b      	ldrb	r3, [r7, #1]
 8006ad4:	2bff      	cmp	r3, #255	@ 0xff
 8006ad6:	d101      	bne.n	8006adc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	e006      	b.n	8006aea <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d9d6      	bls.n	8006a96 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006ae8:	23ff      	movs	r3, #255	@ 0xff
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 fcfc 	bl	80084fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006b04:	2101      	movs	r1, #1
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fe03 	bl	8008712 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af04      	add	r7, sp, #16
 8006b1e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006b20:	2302      	movs	r3, #2
 8006b22:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d102      	bne.n	8006b3a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2203      	movs	r2, #3
 8006b38:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b0b      	cmp	r3, #11
 8006b42:	f200 81bc 	bhi.w	8006ebe <USBH_Process+0x3a6>
 8006b46:	a201      	add	r2, pc, #4	@ (adr r2, 8006b4c <USBH_Process+0x34>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b7d 	.word	0x08006b7d
 8006b50:	08006baf 	.word	0x08006baf
 8006b54:	08006c19 	.word	0x08006c19
 8006b58:	08006e59 	.word	0x08006e59
 8006b5c:	08006ebf 	.word	0x08006ebf
 8006b60:	08006cb9 	.word	0x08006cb9
 8006b64:	08006dff 	.word	0x08006dff
 8006b68:	08006cef 	.word	0x08006cef
 8006b6c:	08006d0f 	.word	0x08006d0f
 8006b70:	08006d2d 	.word	0x08006d2d
 8006b74:	08006d71 	.word	0x08006d71
 8006b78:	08006e41 	.word	0x08006e41
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 819c 	beq.w	8006ec2 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006b90:	20c8      	movs	r0, #200	@ 0xc8
 8006b92:	f001 fe08 	bl	80087a6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fd0d 	bl	80085b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8006bac:	e189      	b.n	8006ec2 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d107      	bne.n	8006bca <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006bc8:	e18a      	b.n	8006ee0 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006bd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bd4:	d914      	bls.n	8006c00 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006bdc:	3301      	adds	r3, #1
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d903      	bls.n	8006bf8 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	220d      	movs	r2, #13
 8006bf4:	701a      	strb	r2, [r3, #0]
      break;
 8006bf6:	e173      	b.n	8006ee0 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
      break;
 8006bfe:	e16f      	b.n	8006ee0 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006c06:	f103 020a 	add.w	r2, r3, #10
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006c10:	200a      	movs	r0, #10
 8006c12:	f001 fdc8 	bl	80087a6 <USBH_Delay>
      break;
 8006c16:	e163      	b.n	8006ee0 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c28:	2104      	movs	r1, #4
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006c2e:	2064      	movs	r0, #100	@ 0x64
 8006c30:	f001 fdb9 	bl	80087a6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 fc97 	bl	8008568 <USBH_LL_GetSpeed>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2205      	movs	r2, #5
 8006c48:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 faa2 	bl	8008196 <USBH_AllocPipe>
 8006c52:	4603      	mov	r3, r0
 8006c54:	461a      	mov	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006c5a:	2180      	movs	r1, #128	@ 0x80
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 fa9a 	bl	8008196 <USBH_AllocPipe>
 8006c62:	4603      	mov	r3, r0
 8006c64:	461a      	mov	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7919      	ldrb	r1, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c7e:	9202      	str	r2, [sp, #8]
 8006c80:	2200      	movs	r2, #0
 8006c82:	9201      	str	r2, [sp, #4]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4603      	mov	r3, r0
 8006c88:	2280      	movs	r2, #128	@ 0x80
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fa54 	bl	8008138 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7959      	ldrb	r1, [r3, #5]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ca4:	9202      	str	r2, [sp, #8]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	9201      	str	r2, [sp, #4]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4603      	mov	r3, r0
 8006cae:	2200      	movs	r2, #0
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fa41 	bl	8008138 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006cb6:	e113      	b.n	8006ee0 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f917 	bl	8006eec <USBH_HandleEnum>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 80fd 	bne.w	8006ec6 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d103      	bne.n	8006ce6 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8006ce4:	e0ef      	b.n	8006ec6 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2207      	movs	r2, #7
 8006cea:	701a      	strb	r2, [r3, #0]
      break;
 8006cec:	e0eb      	b.n	8006ec6 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80e8 	beq.w	8006eca <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d00:	2101      	movs	r1, #1
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2208      	movs	r2, #8
 8006d0a:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8006d0c:	e0dd      	b.n	8006eca <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fc3f 	bl	800759a <USBH_SetCfg>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f040 80d5 	bne.w	8006ece <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2209      	movs	r2, #9
 8006d28:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006d2a:	e0d0      	b.n	8006ece <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d016      	beq.n	8006d68 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fc4f 	bl	80075e0 <USBH_SetFeature>
 8006d42:	4603      	mov	r3, r0
 8006d44:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	220a      	movs	r2, #10
 8006d52:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006d54:	e0bd      	b.n	8006ed2 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	f040 80b9 	bne.w	8006ed2 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	220a      	movs	r2, #10
 8006d64:	701a      	strb	r2, [r3, #0]
      break;
 8006d66:	e0b4      	b.n	8006ed2 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	701a      	strb	r2, [r3, #0]
      break;
 8006d6e:	e0b0      	b.n	8006ed2 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80ad 	beq.w	8006ed6 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
 8006d88:	e016      	b.n	8006db8 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d8a:	7bfa      	ldrb	r2, [r7, #15]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	32de      	adds	r2, #222	@ 0xde
 8006d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d94:	791a      	ldrb	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d108      	bne.n	8006db2 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006da0:	7bfa      	ldrb	r2, [r7, #15]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	32de      	adds	r2, #222	@ 0xde
 8006da6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006db0:	e005      	b.n	8006dbe <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	3301      	adds	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0e5      	beq.n	8006d8a <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d016      	beq.n	8006df6 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2206      	movs	r2, #6
 8006dde:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006de6:	2103      	movs	r1, #3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006dec:	e073      	b.n	8006ed6 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	220d      	movs	r2, #13
 8006df2:	701a      	strb	r2, [r3, #0]
      break;
 8006df4:	e06f      	b.n	8006ed6 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	220d      	movs	r2, #13
 8006dfa:	701a      	strb	r2, [r3, #0]
      break;
 8006dfc:	e06b      	b.n	8006ed6 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d017      	beq.n	8006e38 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
 8006e14:	4603      	mov	r3, r0
 8006e16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	220b      	movs	r2, #11
 8006e24:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006e26:	e058      	b.n	8006eda <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d154      	bne.n	8006eda <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	220d      	movs	r2, #13
 8006e34:	701a      	strb	r2, [r3, #0]
      break;
 8006e36:	e050      	b.n	8006eda <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	220d      	movs	r2, #13
 8006e3c:	701a      	strb	r2, [r3, #0]
      break;
 8006e3e:	e04c      	b.n	8006eda <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d049      	beq.n	8006ede <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
      }
      break;
 8006e56:	e042      	b.n	8006ede <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff fd4b 	bl	80068fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d009      	beq.n	8006e84 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e94:	2105      	movs	r1, #5
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d107      	bne.n	8006eb6 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fe21 	bl	8006af6 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006eb4:	e014      	b.n	8006ee0 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 fb20 	bl	80084fc <USBH_LL_Start>
      break;
 8006ebc:	e010      	b.n	8006ee0 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ebe:	bf00      	nop
 8006ec0:	e00e      	b.n	8006ee0 <USBH_Process+0x3c8>
      break;
 8006ec2:	bf00      	nop
 8006ec4:	e00c      	b.n	8006ee0 <USBH_Process+0x3c8>
      break;
 8006ec6:	bf00      	nop
 8006ec8:	e00a      	b.n	8006ee0 <USBH_Process+0x3c8>
    break;
 8006eca:	bf00      	nop
 8006ecc:	e008      	b.n	8006ee0 <USBH_Process+0x3c8>
      break;
 8006ece:	bf00      	nop
 8006ed0:	e006      	b.n	8006ee0 <USBH_Process+0x3c8>
      break;
 8006ed2:	bf00      	nop
 8006ed4:	e004      	b.n	8006ee0 <USBH_Process+0x3c8>
      break;
 8006ed6:	bf00      	nop
 8006ed8:	e002      	b.n	8006ee0 <USBH_Process+0x3c8>
      break;
 8006eda:	bf00      	nop
 8006edc:	e000      	b.n	8006ee0 <USBH_Process+0x3c8>
      break;
 8006ede:	bf00      	nop
  }
  return USBH_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop

08006eec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af04      	add	r7, sp, #16
 8006ef2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	785b      	ldrb	r3, [r3, #1]
 8006f00:	2b07      	cmp	r3, #7
 8006f02:	f200 81bd 	bhi.w	8007280 <USBH_HandleEnum+0x394>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <USBH_HandleEnum+0x20>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f2d 	.word	0x08006f2d
 8006f10:	08006fe7 	.word	0x08006fe7
 8006f14:	08007051 	.word	0x08007051
 8006f18:	080070db 	.word	0x080070db
 8006f1c:	08007145 	.word	0x08007145
 8006f20:	080071b5 	.word	0x080071b5
 8006f24:	080071fb 	.word	0x080071fb
 8006f28:	08007241 	.word	0x08007241
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006f2c:	2108      	movs	r1, #8
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa50 	bl	80073d4 <USBH_Get_DevDesc>
 8006f34:	4603      	mov	r3, r0
 8006f36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d12e      	bne.n	8006f9c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7919      	ldrb	r1, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f62:	9202      	str	r2, [sp, #8]
 8006f64:	2200      	movs	r2, #0
 8006f66:	9201      	str	r2, [sp, #4]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2280      	movs	r2, #128	@ 0x80
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 f8e2 	bl	8008138 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	7959      	ldrb	r1, [r3, #5]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f88:	9202      	str	r2, [sp, #8]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	9201      	str	r2, [sp, #4]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4603      	mov	r3, r0
 8006f92:	2200      	movs	r2, #0
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f8cf 	bl	8008138 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f9a:	e173      	b.n	8007284 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	f040 8170 	bne.w	8007284 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006faa:	3301      	adds	r3, #1
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d903      	bls.n	8006fc6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	220d      	movs	r2, #13
 8006fc2:	701a      	strb	r2, [r3, #0]
      break;
 8006fc4:	e15e      	b.n	8007284 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	795b      	ldrb	r3, [r3, #5]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 f903 	bl	80081d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 f8fd 	bl	80081d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
      break;
 8006fe4:	e14e      	b.n	8007284 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006fe6:	2112      	movs	r1, #18
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f9f3 	bl	80073d4 <USBH_Get_DevDesc>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d103      	bne.n	8007000 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ffe:	e143      	b.n	8007288 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b03      	cmp	r3, #3
 8007004:	f040 8140 	bne.w	8007288 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800700e:	3301      	adds	r3, #1
 8007010:	b2da      	uxtb	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800701e:	2b03      	cmp	r3, #3
 8007020:	d903      	bls.n	800702a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	220d      	movs	r2, #13
 8007026:	701a      	strb	r2, [r3, #0]
      break;
 8007028:	e12e      	b.n	8007288 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	795b      	ldrb	r3, [r3, #5]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 f8d1 	bl	80081d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	791b      	ldrb	r3, [r3, #4]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f8cb 	bl	80081d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]
      break;
 800704e:	e11b      	b.n	8007288 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007050:	2101      	movs	r1, #1
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa7d 	bl	8007552 <USBH_SetAddress>
 8007058:	4603      	mov	r3, r0
 800705a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d130      	bne.n	80070c4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007062:	2002      	movs	r0, #2
 8007064:	f001 fb9f 	bl	80087a6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2203      	movs	r2, #3
 8007074:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7919      	ldrb	r1, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800708a:	9202      	str	r2, [sp, #8]
 800708c:	2200      	movs	r2, #0
 800708e:	9201      	str	r2, [sp, #4]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	4603      	mov	r3, r0
 8007094:	2280      	movs	r2, #128	@ 0x80
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 f84e 	bl	8008138 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	7959      	ldrb	r1, [r3, #5]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070b0:	9202      	str	r2, [sp, #8]
 80070b2:	2200      	movs	r2, #0
 80070b4:	9201      	str	r2, [sp, #4]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	4603      	mov	r3, r0
 80070ba:	2200      	movs	r2, #0
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 f83b 	bl	8008138 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070c2:	e0e3      	b.n	800728c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	f040 80e0 	bne.w	800728c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	220d      	movs	r2, #13
 80070d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	705a      	strb	r2, [r3, #1]
      break;
 80070d8:	e0d8      	b.n	800728c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80070da:	2109      	movs	r1, #9
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f9a5 	bl	800742c <USBH_Get_CfgDesc>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d103      	bne.n	80070f4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2204      	movs	r2, #4
 80070f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070f2:	e0cd      	b.n	8007290 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	f040 80ca 	bne.w	8007290 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007102:	3301      	adds	r3, #1
 8007104:	b2da      	uxtb	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007112:	2b03      	cmp	r3, #3
 8007114:	d903      	bls.n	800711e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	220d      	movs	r2, #13
 800711a:	701a      	strb	r2, [r3, #0]
      break;
 800711c:	e0b8      	b.n	8007290 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	795b      	ldrb	r3, [r3, #5]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 f857 	bl	80081d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	791b      	ldrb	r3, [r3, #4]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 f851 	bl	80081d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
      break;
 8007142:	e0a5      	b.n	8007290 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f96d 	bl	800742c <USBH_Get_CfgDesc>
 8007152:	4603      	mov	r3, r0
 8007154:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d103      	bne.n	8007164 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2205      	movs	r2, #5
 8007160:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007162:	e097      	b.n	8007294 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b03      	cmp	r3, #3
 8007168:	f040 8094 	bne.w	8007294 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007172:	3301      	adds	r3, #1
 8007174:	b2da      	uxtb	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007182:	2b03      	cmp	r3, #3
 8007184:	d903      	bls.n	800718e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	220d      	movs	r2, #13
 800718a:	701a      	strb	r2, [r3, #0]
      break;
 800718c:	e082      	b.n	8007294 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	795b      	ldrb	r3, [r3, #5]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f81f 	bl	80081d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	791b      	ldrb	r3, [r3, #4]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f819 	bl	80081d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	701a      	strb	r2, [r3, #0]
      break;
 80071b2:	e06f      	b.n	8007294 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d019      	beq.n	80071f2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071ca:	23ff      	movs	r3, #255	@ 0xff
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f957 	bl	8007480 <USBH_Get_StringDesc>
 80071d2:	4603      	mov	r3, r0
 80071d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071d6:	7bbb      	ldrb	r3, [r7, #14]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2206      	movs	r2, #6
 80071e0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80071e2:	e059      	b.n	8007298 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d156      	bne.n	8007298 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2206      	movs	r2, #6
 80071ee:	705a      	strb	r2, [r3, #1]
      break;
 80071f0:	e052      	b.n	8007298 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2206      	movs	r2, #6
 80071f6:	705a      	strb	r2, [r3, #1]
      break;
 80071f8:	e04e      	b.n	8007298 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007200:	2b00      	cmp	r3, #0
 8007202:	d019      	beq.n	8007238 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007210:	23ff      	movs	r3, #255	@ 0xff
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f934 	bl	8007480 <USBH_Get_StringDesc>
 8007218:	4603      	mov	r3, r0
 800721a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d103      	bne.n	800722a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2207      	movs	r2, #7
 8007226:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007228:	e038      	b.n	800729c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b03      	cmp	r3, #3
 800722e:	d135      	bne.n	800729c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2207      	movs	r2, #7
 8007234:	705a      	strb	r2, [r3, #1]
      break;
 8007236:	e031      	b.n	800729c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2207      	movs	r2, #7
 800723c:	705a      	strb	r2, [r3, #1]
      break;
 800723e:	e02d      	b.n	800729c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007246:	2b00      	cmp	r3, #0
 8007248:	d017      	beq.n	800727a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007256:	23ff      	movs	r3, #255	@ 0xff
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f911 	bl	8007480 <USBH_Get_StringDesc>
 800725e:	4603      	mov	r3, r0
 8007260:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d102      	bne.n	800726e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800726c:	e018      	b.n	80072a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	2b03      	cmp	r3, #3
 8007272:	d115      	bne.n	80072a0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]
      break;
 8007278:	e012      	b.n	80072a0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]
      break;
 800727e:	e00f      	b.n	80072a0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007280:	bf00      	nop
 8007282:	e00e      	b.n	80072a2 <USBH_HandleEnum+0x3b6>
      break;
 8007284:	bf00      	nop
 8007286:	e00c      	b.n	80072a2 <USBH_HandleEnum+0x3b6>
      break;
 8007288:	bf00      	nop
 800728a:	e00a      	b.n	80072a2 <USBH_HandleEnum+0x3b6>
      break;
 800728c:	bf00      	nop
 800728e:	e008      	b.n	80072a2 <USBH_HandleEnum+0x3b6>
      break;
 8007290:	bf00      	nop
 8007292:	e006      	b.n	80072a2 <USBH_HandleEnum+0x3b6>
      break;
 8007294:	bf00      	nop
 8007296:	e004      	b.n	80072a2 <USBH_HandleEnum+0x3b6>
      break;
 8007298:	bf00      	nop
 800729a:	e002      	b.n	80072a2 <USBH_HandleEnum+0x3b6>
      break;
 800729c:	bf00      	nop
 800729e:	e000      	b.n	80072a2 <USBH_HandleEnum+0x3b6>
      break;
 80072a0:	bf00      	nop
  }
  return Status;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f804 	bl	80072ee <USBH_HandleSof>
}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b0b      	cmp	r3, #11
 80072fe:	d10a      	bne.n	8007316 <USBH_HandleSof+0x28>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
  }
}
 8007316:	bf00      	nop
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800732e:	bf00      	nop
}
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8007352:	bf00      	nop
}
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 f8c0 	bl	8008532 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	791b      	ldrb	r3, [r3, #4]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 ff0d 	bl	80081d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	795b      	ldrb	r3, [r3, #5]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 ff07 	bl	80081d8 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af02      	add	r7, sp, #8
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80073e0:	887b      	ldrh	r3, [r7, #2]
 80073e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e6:	d901      	bls.n	80073ec <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e01b      	b.n	8007424 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80073f2:	887b      	ldrh	r3, [r7, #2]
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4613      	mov	r3, r2
 80073f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073fc:	2100      	movs	r1, #0
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f872 	bl	80074e8 <USBH_GetDescriptor>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007414:	887a      	ldrh	r2, [r7, #2]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f929 	bl	8007670 <USBH_ParseDevDesc>
 800741e:	4603      	mov	r3, r0
 8007420:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007422:	7bfb      	ldrb	r3, [r7, #15]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af02      	add	r7, sp, #8
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	331c      	adds	r3, #28
 800743c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800743e:	887b      	ldrh	r3, [r7, #2]
 8007440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007444:	d901      	bls.n	800744a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007446:	2303      	movs	r3, #3
 8007448:	e016      	b.n	8007478 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800744a:	887b      	ldrh	r3, [r7, #2]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007454:	2100      	movs	r1, #0
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f846 	bl	80074e8 <USBH_GetDescriptor>
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d107      	bne.n	8007476 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007466:	887b      	ldrh	r3, [r7, #2]
 8007468:	461a      	mov	r2, r3
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f9af 	bl	80077d0 <USBH_ParseCfgDesc>
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	461a      	mov	r2, r3
 800748c:	460b      	mov	r3, r1
 800748e:	72fb      	strb	r3, [r7, #11]
 8007490:	4613      	mov	r3, r2
 8007492:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007494:	893b      	ldrh	r3, [r7, #8]
 8007496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800749a:	d802      	bhi.n	80074a2 <USBH_Get_StringDesc+0x22>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e01c      	b.n	80074e0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80074a6:	7afb      	ldrb	r3, [r7, #11]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80074ae:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80074b6:	893b      	ldrh	r3, [r7, #8]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	460b      	mov	r3, r1
 80074bc:	2100      	movs	r1, #0
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f812 	bl	80074e8 <USBH_GetDescriptor>
 80074c4:	4603      	mov	r3, r0
 80074c6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d107      	bne.n	80074de <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074d4:	893a      	ldrh	r2, [r7, #8]
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 fb8c 	bl	8007bf6 <USBH_ParseStringDesc>
  }

  return status;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	607b      	str	r3, [r7, #4]
 80074f2:	460b      	mov	r3, r1
 80074f4:	72fb      	strb	r3, [r7, #11]
 80074f6:	4613      	mov	r3, r2
 80074f8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	789b      	ldrb	r3, [r3, #2]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d11c      	bne.n	800753c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007502:	7afb      	ldrb	r3, [r7, #11]
 8007504:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007508:	b2da      	uxtb	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2206      	movs	r2, #6
 8007512:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	893a      	ldrh	r2, [r7, #8]
 8007518:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800751a:	893b      	ldrh	r3, [r7, #8]
 800751c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007524:	d104      	bne.n	8007530 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f240 4209 	movw	r2, #1033	@ 0x409
 800752c:	829a      	strh	r2, [r3, #20]
 800752e:	e002      	b.n	8007536 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8b3a      	ldrh	r2, [r7, #24]
 800753a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800753c:	8b3b      	ldrh	r3, [r7, #24]
 800753e:	461a      	mov	r2, r3
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 fba4 	bl	8007c90 <USBH_CtlReq>
 8007548:	4603      	mov	r3, r0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	460b      	mov	r3, r1
 800755c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	789b      	ldrb	r3, [r3, #2]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d10f      	bne.n	8007586 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2205      	movs	r2, #5
 8007570:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	b29a      	uxth	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007586:	2200      	movs	r2, #0
 8007588:	2100      	movs	r1, #0
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fb80 	bl	8007c90 <USBH_CtlReq>
 8007590:	4603      	mov	r3, r0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b082      	sub	sp, #8
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	460b      	mov	r3, r1
 80075a4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	789b      	ldrb	r3, [r3, #2]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d10e      	bne.n	80075cc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2209      	movs	r2, #9
 80075b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	887a      	ldrh	r2, [r7, #2]
 80075be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075cc:	2200      	movs	r2, #0
 80075ce:	2100      	movs	r1, #0
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fb5d 	bl	8007c90 <USBH_CtlReq>
 80075d6:	4603      	mov	r3, r0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	789b      	ldrb	r3, [r3, #2]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d10f      	bne.n	8007614 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2203      	movs	r2, #3
 80075fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	b29a      	uxth	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007614:	2200      	movs	r2, #0
 8007616:	2100      	movs	r1, #0
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fb39 	bl	8007c90 <USBH_CtlReq>
 800761e:	4603      	mov	r3, r0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	789b      	ldrb	r3, [r3, #2]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d10f      	bne.n	800765c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800765c:	2200      	movs	r2, #0
 800765e:	2100      	movs	r1, #0
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fb15 	bl	8007c90 <USBH_CtlReq>
 8007666:	4603      	mov	r3, r0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007684:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007690:	2302      	movs	r3, #2
 8007692:	e094      	b.n	80077be <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	781a      	ldrb	r2, [r3, #0]
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	785a      	ldrb	r2, [r3, #1]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	3302      	adds	r3, #2
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	3303      	adds	r3, #3
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	4313      	orrs	r3, r2
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	791a      	ldrb	r2, [r3, #4]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	795a      	ldrb	r2, [r3, #5]
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	799a      	ldrb	r2, [r3, #6]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	79da      	ldrb	r2, [r3, #7]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d11b      	bne.n	800772a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	79db      	ldrb	r3, [r3, #7]
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	dc0f      	bgt.n	800771a <USBH_ParseDevDesc+0xaa>
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	db0f      	blt.n	800771e <USBH_ParseDevDesc+0xae>
 80076fe:	3b08      	subs	r3, #8
 8007700:	4a32      	ldr	r2, [pc, #200]	@ (80077cc <USBH_ParseDevDesc+0x15c>)
 8007702:	fa22 f303 	lsr.w	r3, r2, r3
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf14      	ite	ne
 800770e:	2301      	movne	r3, #1
 8007710:	2300      	moveq	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d106      	bne.n	8007726 <USBH_ParseDevDesc+0xb6>
 8007718:	e001      	b.n	800771e <USBH_ParseDevDesc+0xae>
 800771a:	2b40      	cmp	r3, #64	@ 0x40
 800771c:	d003      	beq.n	8007726 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2208      	movs	r2, #8
 8007722:	71da      	strb	r2, [r3, #7]
        break;
 8007724:	e000      	b.n	8007728 <USBH_ParseDevDesc+0xb8>
        break;
 8007726:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007728:	e00e      	b.n	8007748 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007730:	2b02      	cmp	r3, #2
 8007732:	d107      	bne.n	8007744 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	79db      	ldrb	r3, [r3, #7]
 8007738:	2b08      	cmp	r3, #8
 800773a:	d005      	beq.n	8007748 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	2208      	movs	r2, #8
 8007740:	71da      	strb	r2, [r3, #7]
 8007742:	e001      	b.n	8007748 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007744:	2303      	movs	r3, #3
 8007746:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007748:	88fb      	ldrh	r3, [r7, #6]
 800774a:	2b08      	cmp	r3, #8
 800774c:	d936      	bls.n	80077bc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	3308      	adds	r3, #8
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3309      	adds	r3, #9
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	b29b      	uxth	r3, r3
 8007760:	4313      	orrs	r3, r2
 8007762:	b29a      	uxth	r2, r3
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	330a      	adds	r3, #10
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	330b      	adds	r3, #11
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	b29b      	uxth	r3, r3
 800777a:	4313      	orrs	r3, r2
 800777c:	b29a      	uxth	r2, r3
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	330c      	adds	r3, #12
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	330d      	adds	r3, #13
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	b29b      	uxth	r3, r3
 8007794:	4313      	orrs	r3, r2
 8007796:	b29a      	uxth	r2, r3
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	7b9a      	ldrb	r2, [r3, #14]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	7bda      	ldrb	r2, [r3, #15]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	7c1a      	ldrb	r2, [r3, #16]
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	7c5a      	ldrb	r2, [r3, #17]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	01000101 	.word	0x01000101

080077d0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08c      	sub	sp, #48	@ 0x30
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80077e4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80077fe:	2302      	movs	r3, #2
 8007800:	e0de      	b.n	80079c0 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b09      	cmp	r3, #9
 800780c:	d002      	beq.n	8007814 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800780e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007810:	2209      	movs	r2, #9
 8007812:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	785a      	ldrb	r2, [r3, #1]
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	3302      	adds	r3, #2
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	3303      	adds	r3, #3
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	b29b      	uxth	r3, r3
 8007836:	4313      	orrs	r3, r2
 8007838:	b29b      	uxth	r3, r3
 800783a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800783e:	bf28      	it	cs
 8007840:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007844:	b29a      	uxth	r2, r3
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	791a      	ldrb	r2, [r3, #4]
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	795a      	ldrb	r2, [r3, #5]
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	799a      	ldrb	r2, [r3, #6]
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	79da      	ldrb	r2, [r3, #7]
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	7a1a      	ldrb	r2, [r3, #8]
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007872:	88fb      	ldrh	r3, [r7, #6]
 8007874:	2b09      	cmp	r3, #9
 8007876:	f240 80a1 	bls.w	80079bc <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800787a:	2309      	movs	r3, #9
 800787c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800787e:	2300      	movs	r3, #0
 8007880:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007882:	e085      	b.n	8007990 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007884:	f107 0316 	add.w	r3, r7, #22
 8007888:	4619      	mov	r1, r3
 800788a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800788c:	f000 f9e6 	bl	8007c5c <USBH_GetNextDesc>
 8007890:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007894:	785b      	ldrb	r3, [r3, #1]
 8007896:	2b04      	cmp	r3, #4
 8007898:	d17a      	bne.n	8007990 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800789a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d002      	beq.n	80078a8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80078a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a4:	2209      	movs	r2, #9
 80078a6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80078a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078ac:	221a      	movs	r2, #26
 80078ae:	fb02 f303 	mul.w	r3, r2, r3
 80078b2:	3308      	adds	r3, #8
 80078b4:	6a3a      	ldr	r2, [r7, #32]
 80078b6:	4413      	add	r3, r2
 80078b8:	3302      	adds	r3, #2
 80078ba:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80078bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078be:	69f8      	ldr	r0, [r7, #28]
 80078c0:	f000 f882 	bl	80079c8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078ce:	e043      	b.n	8007958 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078d0:	f107 0316 	add.w	r3, r7, #22
 80078d4:	4619      	mov	r1, r3
 80078d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078d8:	f000 f9c0 	bl	8007c5c <USBH_GetNextDesc>
 80078dc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80078de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e0:	785b      	ldrb	r3, [r3, #1]
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	d138      	bne.n	8007958 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	795b      	ldrb	r3, [r3, #5]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d113      	bne.n	8007916 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d003      	beq.n	80078fe <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	799b      	ldrb	r3, [r3, #6]
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d10b      	bne.n	8007916 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	79db      	ldrb	r3, [r3, #7]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10b      	bne.n	800791e <USBH_ParseCfgDesc+0x14e>
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b09      	cmp	r3, #9
 800790c:	d007      	beq.n	800791e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800790e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007910:	2209      	movs	r2, #9
 8007912:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007914:	e003      	b.n	800791e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007918:	2207      	movs	r2, #7
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	e000      	b.n	8007920 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800791e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007924:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007928:	3201      	adds	r2, #1
 800792a:	00d2      	lsls	r2, r2, #3
 800792c:	211a      	movs	r1, #26
 800792e:	fb01 f303 	mul.w	r3, r1, r3
 8007932:	4413      	add	r3, r2
 8007934:	3308      	adds	r3, #8
 8007936:	6a3a      	ldr	r2, [r7, #32]
 8007938:	4413      	add	r3, r2
 800793a:	3304      	adds	r3, #4
 800793c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800793e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007940:	69b9      	ldr	r1, [r7, #24]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f86f 	bl	8007a26 <USBH_ParseEPDesc>
 8007948:	4603      	mov	r3, r0
 800794a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800794e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007952:	3301      	adds	r3, #1
 8007954:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007958:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800795c:	2b01      	cmp	r3, #1
 800795e:	d80a      	bhi.n	8007976 <USBH_ParseCfgDesc+0x1a6>
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	791b      	ldrb	r3, [r3, #4]
 8007964:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007968:	429a      	cmp	r2, r3
 800796a:	d204      	bcs.n	8007976 <USBH_ParseCfgDesc+0x1a6>
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	885a      	ldrh	r2, [r3, #2]
 8007970:	8afb      	ldrh	r3, [r7, #22]
 8007972:	429a      	cmp	r2, r3
 8007974:	d8ac      	bhi.n	80078d0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	791b      	ldrb	r3, [r3, #4]
 800797a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800797e:	429a      	cmp	r2, r3
 8007980:	d201      	bcs.n	8007986 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8007982:	2303      	movs	r3, #3
 8007984:	e01c      	b.n	80079c0 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8007986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800798a:	3301      	adds	r3, #1
 800798c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007994:	2b01      	cmp	r3, #1
 8007996:	d805      	bhi.n	80079a4 <USBH_ParseCfgDesc+0x1d4>
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	885a      	ldrh	r2, [r3, #2]
 800799c:	8afb      	ldrh	r3, [r7, #22]
 800799e:	429a      	cmp	r2, r3
 80079a0:	f63f af70 	bhi.w	8007884 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	791b      	ldrb	r3, [r3, #4]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	bf28      	it	cs
 80079ac:	2302      	movcs	r3, #2
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d201      	bcs.n	80079bc <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e001      	b.n	80079c0 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80079bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3730      	adds	r7, #48	@ 0x30
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	781a      	ldrb	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	785a      	ldrb	r2, [r3, #1]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	789a      	ldrb	r2, [r3, #2]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	78da      	ldrb	r2, [r3, #3]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	791a      	ldrb	r2, [r3, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	795a      	ldrb	r2, [r3, #5]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	799a      	ldrb	r2, [r3, #6]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	79da      	ldrb	r2, [r3, #7]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	7a1a      	ldrb	r2, [r3, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	721a      	strb	r2, [r3, #8]
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b087      	sub	sp, #28
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	781a      	ldrb	r2, [r3, #0]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	785a      	ldrb	r2, [r3, #1]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	789a      	ldrb	r2, [r3, #2]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	78da      	ldrb	r2, [r3, #3]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3305      	adds	r3, #5
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	799a      	ldrb	r2, [r3, #6]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	889b      	ldrh	r3, [r3, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a88:	d804      	bhi.n	8007a94 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a92:	d901      	bls.n	8007a98 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007a94:	2303      	movs	r3, #3
 8007a96:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d136      	bne.n	8007b10 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	78db      	ldrb	r3, [r3, #3]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d108      	bne.n	8007ac0 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	889b      	ldrh	r3, [r3, #4]
 8007ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab6:	f240 8097 	bls.w	8007be8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007aba:	2303      	movs	r3, #3
 8007abc:	75fb      	strb	r3, [r7, #23]
 8007abe:	e093      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	78db      	ldrb	r3, [r3, #3]
 8007ac4:	f003 0303 	and.w	r3, r3, #3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d107      	bne.n	8007adc <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	889b      	ldrh	r3, [r3, #4]
 8007ad0:	2b40      	cmp	r3, #64	@ 0x40
 8007ad2:	f240 8089 	bls.w	8007be8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	75fb      	strb	r3, [r7, #23]
 8007ada:	e085      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	78db      	ldrb	r3, [r3, #3]
 8007ae0:	f003 0303 	and.w	r3, r3, #3
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d005      	beq.n	8007af4 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	78db      	ldrb	r3, [r3, #3]
 8007aec:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d10a      	bne.n	8007b0a <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	799b      	ldrb	r3, [r3, #6]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <USBH_ParseEPDesc+0xde>
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	799b      	ldrb	r3, [r3, #6]
 8007b00:	2b10      	cmp	r3, #16
 8007b02:	d970      	bls.n	8007be6 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007b04:	2303      	movs	r3, #3
 8007b06:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b08:	e06d      	b.n	8007be6 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	75fb      	strb	r3, [r7, #23]
 8007b0e:	e06b      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d13c      	bne.n	8007b94 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	78db      	ldrb	r3, [r3, #3]
 8007b1e:	f003 0303 	and.w	r3, r3, #3
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d005      	beq.n	8007b32 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	78db      	ldrb	r3, [r3, #3]
 8007b2a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	889b      	ldrh	r3, [r3, #4]
 8007b36:	2b40      	cmp	r3, #64	@ 0x40
 8007b38:	d956      	bls.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b3e:	e053      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	78db      	ldrb	r3, [r3, #3]
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d10e      	bne.n	8007b6a <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	799b      	ldrb	r3, [r3, #6]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d803      	bhi.n	8007b64 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007b60:	2b40      	cmp	r3, #64	@ 0x40
 8007b62:	d941      	bls.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b64:	2303      	movs	r3, #3
 8007b66:	75fb      	strb	r3, [r7, #23]
 8007b68:	e03e      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	78db      	ldrb	r3, [r3, #3]
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d10b      	bne.n	8007b8e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	799b      	ldrb	r3, [r3, #6]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <USBH_ParseEPDesc+0x162>
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	889b      	ldrh	r3, [r3, #4]
 8007b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b86:	d32f      	bcc.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	75fb      	strb	r3, [r7, #23]
 8007b8c:	e02c      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	75fb      	strb	r3, [r7, #23]
 8007b92:	e029      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d120      	bne.n	8007be0 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	78db      	ldrb	r3, [r3, #3]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	889b      	ldrh	r3, [r3, #4]
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	d01a      	beq.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	75fb      	strb	r3, [r7, #23]
 8007bb6:	e017      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	78db      	ldrb	r3, [r3, #3]
 8007bbc:	f003 0303 	and.w	r3, r3, #3
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d10a      	bne.n	8007bda <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	799b      	ldrb	r3, [r3, #6]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <USBH_ParseEPDesc+0x1ae>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	889b      	ldrh	r3, [r3, #4]
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d909      	bls.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	75fb      	strb	r3, [r7, #23]
 8007bd8:	e006      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	75fb      	strb	r3, [r7, #23]
 8007bde:	e003      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007be0:	2303      	movs	r3, #3
 8007be2:	75fb      	strb	r3, [r7, #23]
 8007be4:	e000      	b.n	8007be8 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007be6:	bf00      	nop
  }

  return status;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b087      	sub	sp, #28
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	4613      	mov	r3, r2
 8007c02:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3301      	adds	r3, #1
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d120      	bne.n	8007c50 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	1e9a      	subs	r2, r3, #2
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	4293      	cmp	r3, r2
 8007c18:	bf28      	it	cs
 8007c1a:	4613      	movcs	r3, r2
 8007c1c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3302      	adds	r3, #2
 8007c22:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c24:	2300      	movs	r3, #0
 8007c26:	82fb      	strh	r3, [r7, #22]
 8007c28:	e00b      	b.n	8007c42 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c2a:	8afb      	ldrh	r3, [r7, #22]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	781a      	ldrb	r2, [r3, #0]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c3c:	8afb      	ldrh	r3, [r7, #22]
 8007c3e:	3302      	adds	r3, #2
 8007c40:	82fb      	strh	r3, [r7, #22]
 8007c42:	8afa      	ldrh	r2, [r7, #22]
 8007c44:	8abb      	ldrh	r3, [r7, #20]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d3ef      	bcc.n	8007c2a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
  }
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	4413      	add	r3, r2
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4413      	add	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c82:	68fb      	ldr	r3, [r7, #12]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	789b      	ldrb	r3, [r3, #2]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d002      	beq.n	8007cb0 <USBH_CtlReq+0x20>
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d00f      	beq.n	8007cce <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8007cae:	e027      	b.n	8007d00 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	88fa      	ldrh	r2, [r7, #6]
 8007cba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	75fb      	strb	r3, [r7, #23]
      break;
 8007ccc:	e018      	b.n	8007d00 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f81c 	bl	8007d0c <USBH_HandleControl>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <USBH_CtlReq+0x54>
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d106      	bne.n	8007cf2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	761a      	strb	r2, [r3, #24]
      break;
 8007cf0:	e005      	b.n	8007cfe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d102      	bne.n	8007cfe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	709a      	strb	r2, [r3, #2]
      break;
 8007cfe:	bf00      	nop
  }
  return status;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d14:	2301      	movs	r3, #1
 8007d16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	7e1b      	ldrb	r3, [r3, #24]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	2b0a      	cmp	r3, #10
 8007d24:	f200 8157 	bhi.w	8007fd6 <USBH_HandleControl+0x2ca>
 8007d28:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <USBH_HandleControl+0x24>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	08007d77 	.word	0x08007d77
 8007d38:	08007de1 	.word	0x08007de1
 8007d3c:	08007e07 	.word	0x08007e07
 8007d40:	08007e41 	.word	0x08007e41
 8007d44:	08007e6b 	.word	0x08007e6b
 8007d48:	08007ebd 	.word	0x08007ebd
 8007d4c:	08007edf 	.word	0x08007edf
 8007d50:	08007f1b 	.word	0x08007f1b
 8007d54:	08007f41 	.word	0x08007f41
 8007d58:	08007f7f 	.word	0x08007f7f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f103 0110 	add.w	r1, r3, #16
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	795b      	ldrb	r3, [r3, #5]
 8007d66:	461a      	mov	r2, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f945 	bl	8007ff8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2202      	movs	r2, #2
 8007d72:	761a      	strb	r2, [r3, #24]
      break;
 8007d74:	e13a      	b.n	8007fec <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	795b      	ldrb	r3, [r3, #5]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fcb5 	bl	80086ec <USBH_LL_GetURBState>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d11e      	bne.n	8007dca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	7c1b      	ldrb	r3, [r3, #16]
 8007d90:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	8adb      	ldrh	r3, [r3, #22]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d9e:	7b7b      	ldrb	r3, [r7, #13]
 8007da0:	2b80      	cmp	r3, #128	@ 0x80
 8007da2:	d103      	bne.n	8007dac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2203      	movs	r2, #3
 8007da8:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007daa:	e116      	b.n	8007fda <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2205      	movs	r2, #5
 8007db0:	761a      	strb	r2, [r3, #24]
      break;
 8007db2:	e112      	b.n	8007fda <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8007db4:	7b7b      	ldrb	r3, [r7, #13]
 8007db6:	2b80      	cmp	r3, #128	@ 0x80
 8007db8:	d103      	bne.n	8007dc2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2209      	movs	r2, #9
 8007dbe:	761a      	strb	r2, [r3, #24]
      break;
 8007dc0:	e10b      	b.n	8007fda <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2207      	movs	r2, #7
 8007dc6:	761a      	strb	r2, [r3, #24]
      break;
 8007dc8:	e107      	b.n	8007fda <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d003      	beq.n	8007dd8 <USBH_HandleControl+0xcc>
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	f040 8101 	bne.w	8007fda <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	220b      	movs	r2, #11
 8007ddc:	761a      	strb	r2, [r3, #24]
      break;
 8007dde:	e0fc      	b.n	8007fda <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6899      	ldr	r1, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	899a      	ldrh	r2, [r3, #12]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	791b      	ldrb	r3, [r3, #4]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f93c 	bl	8008076 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2204      	movs	r2, #4
 8007e02:	761a      	strb	r2, [r3, #24]
      break;
 8007e04:	e0f2      	b.n	8007fec <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	791b      	ldrb	r3, [r3, #4]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc6d 	bl	80086ec <USBH_LL_GetURBState>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d103      	bne.n	8007e24 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2209      	movs	r2, #9
 8007e20:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007e22:	e0dc      	b.n	8007fde <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	2b05      	cmp	r3, #5
 8007e28:	d102      	bne.n	8007e30 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2e:	e0d6      	b.n	8007fde <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	f040 80d3 	bne.w	8007fde <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	220b      	movs	r2, #11
 8007e3c:	761a      	strb	r2, [r3, #24]
      break;
 8007e3e:	e0ce      	b.n	8007fde <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6899      	ldr	r1, [r3, #8]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	899a      	ldrh	r2, [r3, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	795b      	ldrb	r3, [r3, #5]
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	9000      	str	r0, [sp, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f8eb 	bl	800802c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2206      	movs	r2, #6
 8007e66:	761a      	strb	r2, [r3, #24]
      break;
 8007e68:	e0c0      	b.n	8007fec <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	795b      	ldrb	r3, [r3, #5]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fc3b 	bl	80086ec <USBH_LL_GetURBState>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d103      	bne.n	8007e88 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2207      	movs	r2, #7
 8007e84:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007e86:	e0ac      	b.n	8007fe2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	d105      	bne.n	8007e9a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	220c      	movs	r2, #12
 8007e92:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e94:	2303      	movs	r3, #3
 8007e96:	73fb      	strb	r3, [r7, #15]
      break;
 8007e98:	e0a3      	b.n	8007fe2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d103      	bne.n	8007ea8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2205      	movs	r2, #5
 8007ea4:	761a      	strb	r2, [r3, #24]
      break;
 8007ea6:	e09c      	b.n	8007fe2 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	f040 8099 	bne.w	8007fe2 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	220b      	movs	r2, #11
 8007eb4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eba:	e092      	b.n	8007fe2 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	791b      	ldrb	r3, [r3, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f8d6 	bl	8008076 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2208      	movs	r2, #8
 8007eda:	761a      	strb	r2, [r3, #24]

      break;
 8007edc:	e086      	b.n	8007fec <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	791b      	ldrb	r3, [r3, #4]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fc01 	bl	80086ec <USBH_LL_GetURBState>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d105      	bne.n	8007f00 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	220d      	movs	r2, #13
 8007ef8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007efe:	e072      	b.n	8007fe6 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d103      	bne.n	8007f0e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	220b      	movs	r2, #11
 8007f0a:	761a      	strb	r2, [r3, #24]
      break;
 8007f0c:	e06b      	b.n	8007fe6 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	2b05      	cmp	r3, #5
 8007f12:	d168      	bne.n	8007fe6 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8007f14:	2303      	movs	r3, #3
 8007f16:	73fb      	strb	r3, [r7, #15]
      break;
 8007f18:	e065      	b.n	8007fe6 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	795b      	ldrb	r3, [r3, #5]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	9200      	str	r2, [sp, #0]
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f880 	bl	800802c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	220a      	movs	r2, #10
 8007f3c:	761a      	strb	r2, [r3, #24]
      break;
 8007f3e:	e055      	b.n	8007fec <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	795b      	ldrb	r3, [r3, #5]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fbd0 	bl	80086ec <USBH_LL_GetURBState>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d105      	bne.n	8007f62 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	220d      	movs	r2, #13
 8007f5e:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007f60:	e043      	b.n	8007fea <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d103      	bne.n	8007f70 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2209      	movs	r2, #9
 8007f6c:	761a      	strb	r2, [r3, #24]
      break;
 8007f6e:	e03c      	b.n	8007fea <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d139      	bne.n	8007fea <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	220b      	movs	r2, #11
 8007f7a:	761a      	strb	r2, [r3, #24]
      break;
 8007f7c:	e035      	b.n	8007fea <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7e5b      	ldrb	r3, [r3, #25]
 8007f82:	3301      	adds	r3, #1
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	765a      	strb	r2, [r3, #25]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7e5b      	ldrb	r3, [r3, #25]
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d806      	bhi.n	8007fa0 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f9e:	e025      	b.n	8007fec <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fa6:	2106      	movs	r1, #6
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	795b      	ldrb	r3, [r3, #5]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f90d 	bl	80081d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	791b      	ldrb	r3, [r3, #4]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f907 	bl	80081d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd4:	e00a      	b.n	8007fec <USBH_HandleControl+0x2e0>

    default:
      break;
 8007fd6:	bf00      	nop
 8007fd8:	e008      	b.n	8007fec <USBH_HandleControl+0x2e0>
      break;
 8007fda:	bf00      	nop
 8007fdc:	e006      	b.n	8007fec <USBH_HandleControl+0x2e0>
      break;
 8007fde:	bf00      	nop
 8007fe0:	e004      	b.n	8007fec <USBH_HandleControl+0x2e0>
      break;
 8007fe2:	bf00      	nop
 8007fe4:	e002      	b.n	8007fec <USBH_HandleControl+0x2e0>
      break;
 8007fe6:	bf00      	nop
 8007fe8:	e000      	b.n	8007fec <USBH_HandleControl+0x2e0>
      break;
 8007fea:	bf00      	nop
  }

  return status;
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop

08007ff8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af04      	add	r7, sp, #16
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008006:	79f9      	ldrb	r1, [r7, #7]
 8008008:	2300      	movs	r3, #0
 800800a:	9303      	str	r3, [sp, #12]
 800800c:	2308      	movs	r3, #8
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	2300      	movs	r3, #0
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	2300      	movs	r3, #0
 800801a:	2200      	movs	r2, #0
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 fb34 	bl	800868a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af04      	add	r7, sp, #16
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	4611      	mov	r1, r2
 8008038:	461a      	mov	r2, r3
 800803a:	460b      	mov	r3, r1
 800803c:	80fb      	strh	r3, [r7, #6]
 800803e:	4613      	mov	r3, r2
 8008040:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008050:	7979      	ldrb	r1, [r7, #5]
 8008052:	7e3b      	ldrb	r3, [r7, #24]
 8008054:	9303      	str	r3, [sp, #12]
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	9302      	str	r3, [sp, #8]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	2301      	movs	r3, #1
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	2300      	movs	r3, #0
 8008064:	2200      	movs	r2, #0
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 fb0f 	bl	800868a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b088      	sub	sp, #32
 800807a:	af04      	add	r7, sp, #16
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	4611      	mov	r1, r2
 8008082:	461a      	mov	r2, r3
 8008084:	460b      	mov	r3, r1
 8008086:	80fb      	strh	r3, [r7, #6]
 8008088:	4613      	mov	r3, r2
 800808a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800808c:	7979      	ldrb	r1, [r7, #5]
 800808e:	2300      	movs	r3, #0
 8008090:	9303      	str	r3, [sp, #12]
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	2301      	movs	r3, #1
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	2300      	movs	r3, #0
 80080a0:	2201      	movs	r2, #1
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 faf1 	bl	800868a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080a8:	2300      	movs	r3, #0

}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b088      	sub	sp, #32
 80080b6:	af04      	add	r7, sp, #16
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	4611      	mov	r1, r2
 80080be:	461a      	mov	r2, r3
 80080c0:	460b      	mov	r3, r1
 80080c2:	80fb      	strh	r3, [r7, #6]
 80080c4:	4613      	mov	r3, r2
 80080c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080d6:	7979      	ldrb	r1, [r7, #5]
 80080d8:	7e3b      	ldrb	r3, [r7, #24]
 80080da:	9303      	str	r3, [sp, #12]
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	9302      	str	r3, [sp, #8]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	9301      	str	r3, [sp, #4]
 80080e4:	2301      	movs	r3, #1
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	2302      	movs	r3, #2
 80080ea:	2200      	movs	r2, #0
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 facc 	bl	800868a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af04      	add	r7, sp, #16
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4611      	mov	r1, r2
 8008108:	461a      	mov	r2, r3
 800810a:	460b      	mov	r3, r1
 800810c:	80fb      	strh	r3, [r7, #6]
 800810e:	4613      	mov	r3, r2
 8008110:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008112:	7979      	ldrb	r1, [r7, #5]
 8008114:	2300      	movs	r3, #0
 8008116:	9303      	str	r3, [sp, #12]
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	9302      	str	r3, [sp, #8]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	2301      	movs	r3, #1
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	2302      	movs	r3, #2
 8008126:	2201      	movs	r2, #1
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 faae 	bl	800868a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af04      	add	r7, sp, #16
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	4608      	mov	r0, r1
 8008142:	4611      	mov	r1, r2
 8008144:	461a      	mov	r2, r3
 8008146:	4603      	mov	r3, r0
 8008148:	70fb      	strb	r3, [r7, #3]
 800814a:	460b      	mov	r3, r1
 800814c:	70bb      	strb	r3, [r7, #2]
 800814e:	4613      	mov	r3, r2
 8008150:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008152:	7878      	ldrb	r0, [r7, #1]
 8008154:	78ba      	ldrb	r2, [r7, #2]
 8008156:	78f9      	ldrb	r1, [r7, #3]
 8008158:	8b3b      	ldrh	r3, [r7, #24]
 800815a:	9302      	str	r3, [sp, #8]
 800815c:	7d3b      	ldrb	r3, [r7, #20]
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	7c3b      	ldrb	r3, [r7, #16]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	4603      	mov	r3, r0
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fa53 	bl	8008612 <USBH_LL_OpenPipe>

  return USBH_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa72 	bl	8008670 <USBH_LL_ClosePipe>

  return USBH_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f836 	bl	8008214 <USBH_GetFreePipe>
 80081a8:	4603      	mov	r3, r0
 80081aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081ac:	89fb      	ldrh	r3, [r7, #14]
 80081ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00a      	beq.n	80081cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	89fb      	ldrh	r3, [r7, #14]
 80081ba:	f003 030f 	and.w	r3, r3, #15
 80081be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	33e0      	adds	r3, #224	@ 0xe0
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80081cc:	89fb      	ldrh	r3, [r7, #14]
 80081ce:	b2db      	uxtb	r3, r3
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80081e4:	78fb      	ldrb	r3, [r7, #3]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	d80d      	bhi.n	8008206 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	33e0      	adds	r3, #224	@ 0xe0
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	33e0      	adds	r3, #224	@ 0xe0
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]
 8008224:	e00f      	b.n	8008246 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	33e0      	adds	r3, #224	@ 0xe0
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d102      	bne.n	8008240 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	b29b      	uxth	r3, r3
 800823e:	e007      	b.n	8008250 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	3301      	adds	r3, #1
 8008244:	73fb      	strb	r3, [r7, #15]
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	2b0f      	cmp	r3, #15
 800824a:	d9ec      	bls.n	8008226 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800824c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008260:	2201      	movs	r2, #1
 8008262:	490e      	ldr	r1, [pc, #56]	@ (800829c <MX_USB_HOST_Init+0x40>)
 8008264:	480e      	ldr	r0, [pc, #56]	@ (80082a0 <MX_USB_HOST_Init+0x44>)
 8008266:	f7fe fb0f 	bl	8006888 <USBH_Init>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008270:	f7f8 fbc6 	bl	8000a00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008274:	490b      	ldr	r1, [pc, #44]	@ (80082a4 <MX_USB_HOST_Init+0x48>)
 8008276:	480a      	ldr	r0, [pc, #40]	@ (80082a0 <MX_USB_HOST_Init+0x44>)
 8008278:	f7fe fbb1 	bl	80069de <USBH_RegisterClass>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008282:	f7f8 fbbd 	bl	8000a00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008286:	4806      	ldr	r0, [pc, #24]	@ (80082a0 <MX_USB_HOST_Init+0x44>)
 8008288:	f7fe fc35 	bl	8006af6 <USBH_Start>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008292:	f7f8 fbb5 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008296:	bf00      	nop
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	080082bd 	.word	0x080082bd
 80082a0:	200001dc 	.word	0x200001dc
 80082a4:	2000000c 	.word	0x2000000c

080082a8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80082ac:	4802      	ldr	r0, [pc, #8]	@ (80082b8 <MX_USB_HOST_Process+0x10>)
 80082ae:	f7fe fc33 	bl	8006b18 <USBH_Process>
}
 80082b2:	bf00      	nop
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	200001dc 	.word	0x200001dc

080082bc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d819      	bhi.n	8008304 <USBH_UserProcess+0x48>
 80082d0:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <USBH_UserProcess+0x1c>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	08008305 	.word	0x08008305
 80082dc:	080082f5 	.word	0x080082f5
 80082e0:	08008305 	.word	0x08008305
 80082e4:	080082fd 	.word	0x080082fd
 80082e8:	080082ed 	.word	0x080082ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082ec:	4b09      	ldr	r3, [pc, #36]	@ (8008314 <USBH_UserProcess+0x58>)
 80082ee:	2203      	movs	r2, #3
 80082f0:	701a      	strb	r2, [r3, #0]
  break;
 80082f2:	e008      	b.n	8008306 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082f4:	4b07      	ldr	r3, [pc, #28]	@ (8008314 <USBH_UserProcess+0x58>)
 80082f6:	2202      	movs	r2, #2
 80082f8:	701a      	strb	r2, [r3, #0]
  break;
 80082fa:	e004      	b.n	8008306 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082fc:	4b05      	ldr	r3, [pc, #20]	@ (8008314 <USBH_UserProcess+0x58>)
 80082fe:	2201      	movs	r2, #1
 8008300:	701a      	strb	r2, [r3, #0]
  break;
 8008302:	e000      	b.n	8008306 <USBH_UserProcess+0x4a>

  default:
  break;
 8008304:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	200005b4 	.word	0x200005b4

08008318 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	@ 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008320:	f107 0314 	add.w	r3, r7, #20
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	605a      	str	r2, [r3, #4]
 800832a:	609a      	str	r2, [r3, #8]
 800832c:	60da      	str	r2, [r3, #12]
 800832e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008338:	d147      	bne.n	80083ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800833a:	2300      	movs	r3, #0
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	4b25      	ldr	r3, [pc, #148]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 8008340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008342:	4a24      	ldr	r2, [pc, #144]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 8008344:	f043 0301 	orr.w	r3, r3, #1
 8008348:	6313      	str	r3, [r2, #48]	@ 0x30
 800834a:	4b22      	ldr	r3, [pc, #136]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 800834c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008356:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800835a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800835c:	2300      	movs	r3, #0
 800835e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008360:	2300      	movs	r3, #0
 8008362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008364:	f107 0314 	add.w	r3, r7, #20
 8008368:	4619      	mov	r1, r3
 800836a:	481b      	ldr	r0, [pc, #108]	@ (80083d8 <HAL_HCD_MspInit+0xc0>)
 800836c:	f7f8 ff28 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008370:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008376:	2302      	movs	r3, #2
 8008378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800837a:	2300      	movs	r3, #0
 800837c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800837e:	2303      	movs	r3, #3
 8008380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008382:	230a      	movs	r3, #10
 8008384:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008386:	f107 0314 	add.w	r3, r7, #20
 800838a:	4619      	mov	r1, r3
 800838c:	4812      	ldr	r0, [pc, #72]	@ (80083d8 <HAL_HCD_MspInit+0xc0>)
 800838e:	f7f8 ff17 	bl	80011c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008392:	4b10      	ldr	r3, [pc, #64]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 8008394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008396:	4a0f      	ldr	r2, [pc, #60]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 8008398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800839c:	6353      	str	r3, [r2, #52]	@ 0x34
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]
 80083a2:	4b0c      	ldr	r3, [pc, #48]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 80083a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a6:	4a0b      	ldr	r2, [pc, #44]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 80083a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80083ae:	4b09      	ldr	r3, [pc, #36]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 80083b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083ba:	2200      	movs	r2, #0
 80083bc:	2100      	movs	r1, #0
 80083be:	2043      	movs	r0, #67	@ 0x43
 80083c0:	f7f8 fec7 	bl	8001152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083c4:	2043      	movs	r0, #67	@ 0x43
 80083c6:	f7f8 fee0 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083ca:	bf00      	nop
 80083cc:	3728      	adds	r7, #40	@ 0x28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	40023800 	.word	0x40023800
 80083d8:	40020000 	.word	0x40020000

080083dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe ff6d 	bl	80072ca <USBH_LL_IncTimer>
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe ffa9 	bl	800735e <USBH_LL_Connect>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe ffb2 	bl	800738c <USBH_LL_Disconnect>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
 800843c:	4613      	mov	r3, r2
 800843e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe ff5f 	bl	800731e <USBH_LL_PortEnabled>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe ff5f 	bl	800733a <USBH_LL_PortDisabled>
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008492:	2b01      	cmp	r3, #1
 8008494:	d12a      	bne.n	80084ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008496:	4a18      	ldr	r2, [pc, #96]	@ (80084f8 <USBH_LL_Init+0x74>)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a15      	ldr	r2, [pc, #84]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084a2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084a6:	4b14      	ldr	r3, [pc, #80]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084ae:	4b12      	ldr	r3, [pc, #72]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084b0:	2208      	movs	r2, #8
 80084b2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084b4:	4b10      	ldr	r3, [pc, #64]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084b6:	2201      	movs	r2, #1
 80084b8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084ba:	4b0f      	ldr	r3, [pc, #60]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084bc:	2200      	movs	r2, #0
 80084be:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80084c0:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084c2:	2202      	movs	r2, #2
 80084c4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084c6:	4b0c      	ldr	r3, [pc, #48]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80084cc:	480a      	ldr	r0, [pc, #40]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084ce:	f7f9 f814 	bl	80014fa <HAL_HCD_Init>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084d8:	f7f8 fa92 	bl	8000a00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084dc:	4806      	ldr	r0, [pc, #24]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084de:	f7f9 fc51 	bl	8001d84 <HAL_HCD_GetCurrentFrame>
 80084e2:	4603      	mov	r3, r0
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7fe fee0 	bl	80072ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	200005b8 	.word	0x200005b8

080084fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008512:	4618      	mov	r0, r3
 8008514:	f7f9 fbbe 	bl	8001c94 <HAL_HCD_Start>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 f94c 	bl	80087bc <USBH_Get_USB_Status>
 8008524:	4603      	mov	r3, r0
 8008526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008528:	7bbb      	ldrb	r3, [r7, #14]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008548:	4618      	mov	r0, r3
 800854a:	f7f9 fbc6 	bl	8001cda <HAL_HCD_Stop>
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	4618      	mov	r0, r3
 8008556:	f000 f931 	bl	80087bc <USBH_Get_USB_Status>
 800855a:	4603      	mov	r3, r0
 800855c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800855e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008570:	2301      	movs	r3, #1
 8008572:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800857a:	4618      	mov	r0, r3
 800857c:	f7f9 fc10 	bl	8001da0 <HAL_HCD_GetCurrentSpeed>
 8008580:	4603      	mov	r3, r0
 8008582:	2b02      	cmp	r3, #2
 8008584:	d00c      	beq.n	80085a0 <USBH_LL_GetSpeed+0x38>
 8008586:	2b02      	cmp	r3, #2
 8008588:	d80d      	bhi.n	80085a6 <USBH_LL_GetSpeed+0x3e>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <USBH_LL_GetSpeed+0x2c>
 800858e:	2b01      	cmp	r3, #1
 8008590:	d003      	beq.n	800859a <USBH_LL_GetSpeed+0x32>
 8008592:	e008      	b.n	80085a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]
    break;
 8008598:	e008      	b.n	80085ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800859a:	2301      	movs	r3, #1
 800859c:	73fb      	strb	r3, [r7, #15]
    break;
 800859e:	e005      	b.n	80085ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80085a0:	2302      	movs	r3, #2
 80085a2:	73fb      	strb	r3, [r7, #15]
    break;
 80085a4:	e002      	b.n	80085ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80085a6:	2301      	movs	r3, #1
 80085a8:	73fb      	strb	r3, [r7, #15]
    break;
 80085aa:	bf00      	nop
  }
  return  speed;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7f9 fba1 	bl	8001d14 <HAL_HCD_ResetPort>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 f8ef 	bl	80087bc <USBH_Get_USB_Status>
 80085de:	4603      	mov	r3, r0
 80085e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085fe:	78fa      	ldrb	r2, [r7, #3]
 8008600:	4611      	mov	r1, r2
 8008602:	4618      	mov	r0, r3
 8008604:	f7f9 fba9 	bl	8001d5a <HAL_HCD_HC_GetXferCount>
 8008608:	4603      	mov	r3, r0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8008612:	b590      	push	{r4, r7, lr}
 8008614:	b089      	sub	sp, #36	@ 0x24
 8008616:	af04      	add	r7, sp, #16
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	4608      	mov	r0, r1
 800861c:	4611      	mov	r1, r2
 800861e:	461a      	mov	r2, r3
 8008620:	4603      	mov	r3, r0
 8008622:	70fb      	strb	r3, [r7, #3]
 8008624:	460b      	mov	r3, r1
 8008626:	70bb      	strb	r3, [r7, #2]
 8008628:	4613      	mov	r3, r2
 800862a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800863a:	787c      	ldrb	r4, [r7, #1]
 800863c:	78ba      	ldrb	r2, [r7, #2]
 800863e:	78f9      	ldrb	r1, [r7, #3]
 8008640:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008642:	9302      	str	r3, [sp, #8]
 8008644:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	4623      	mov	r3, r4
 8008652:	f7f8 ffb9 	bl	80015c8 <HAL_HCD_HC_Init>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	4618      	mov	r0, r3
 800865e:	f000 f8ad 	bl	80087bc <USBH_Get_USB_Status>
 8008662:	4603      	mov	r3, r0
 8008664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008666:	7bbb      	ldrb	r3, [r7, #14]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	bd90      	pop	{r4, r7, pc}

08008670 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800868a:	b590      	push	{r4, r7, lr}
 800868c:	b089      	sub	sp, #36	@ 0x24
 800868e:	af04      	add	r7, sp, #16
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	4608      	mov	r0, r1
 8008694:	4611      	mov	r1, r2
 8008696:	461a      	mov	r2, r3
 8008698:	4603      	mov	r3, r0
 800869a:	70fb      	strb	r3, [r7, #3]
 800869c:	460b      	mov	r3, r1
 800869e:	70bb      	strb	r3, [r7, #2]
 80086a0:	4613      	mov	r3, r2
 80086a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80086b2:	787c      	ldrb	r4, [r7, #1]
 80086b4:	78ba      	ldrb	r2, [r7, #2]
 80086b6:	78f9      	ldrb	r1, [r7, #3]
 80086b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086bc:	9303      	str	r3, [sp, #12]
 80086be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80086c0:	9302      	str	r3, [sp, #8]
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	4623      	mov	r3, r4
 80086ce:	f7f9 f833 	bl	8001738 <HAL_HCD_HC_SubmitRequest>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f86f 	bl	80087bc <USBH_Get_USB_Status>
 80086de:	4603      	mov	r3, r0
 80086e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd90      	pop	{r4, r7, pc}

080086ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086fe:	78fa      	ldrb	r2, [r7, #3]
 8008700:	4611      	mov	r1, r2
 8008702:	4618      	mov	r0, r3
 8008704:	f7f9 fb14 	bl	8001d30 <HAL_HCD_HC_GetURBState>
 8008708:	4603      	mov	r3, r0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	460b      	mov	r3, r1
 800871c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008724:	2b01      	cmp	r3, #1
 8008726:	d103      	bne.n	8008730 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f872 	bl	8008814 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008730:	20c8      	movs	r0, #200	@ 0xc8
 8008732:	f7f8 fc0f 	bl	8000f54 <HAL_Delay>
  return USBH_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
 800874c:	4613      	mov	r3, r2
 800874e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008756:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008758:	78fa      	ldrb	r2, [r7, #3]
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	4613      	mov	r3, r2
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	1a9b      	subs	r3, r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	3317      	adds	r3, #23
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800876e:	78fa      	ldrb	r2, [r7, #3]
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	4613      	mov	r3, r2
 8008774:	011b      	lsls	r3, r3, #4
 8008776:	1a9b      	subs	r3, r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	440b      	add	r3, r1
 800877c:	333c      	adds	r3, #60	@ 0x3c
 800877e:	78ba      	ldrb	r2, [r7, #2]
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	e009      	b.n	8008798 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008784:	78fa      	ldrb	r2, [r7, #3]
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	4613      	mov	r3, r2
 800878a:	011b      	lsls	r3, r3, #4
 800878c:	1a9b      	subs	r3, r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	333d      	adds	r3, #61	@ 0x3d
 8008794:	78ba      	ldrb	r2, [r7, #2]
 8008796:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7f8 fbd0 	bl	8000f54 <HAL_Delay>
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087ca:	79fb      	ldrb	r3, [r7, #7]
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d817      	bhi.n	8008800 <USBH_Get_USB_Status+0x44>
 80087d0:	a201      	add	r2, pc, #4	@ (adr r2, 80087d8 <USBH_Get_USB_Status+0x1c>)
 80087d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d6:	bf00      	nop
 80087d8:	080087e9 	.word	0x080087e9
 80087dc:	080087ef 	.word	0x080087ef
 80087e0:	080087f5 	.word	0x080087f5
 80087e4:	080087fb 	.word	0x080087fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]
    break;
 80087ec:	e00b      	b.n	8008806 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80087ee:	2302      	movs	r3, #2
 80087f0:	73fb      	strb	r3, [r7, #15]
    break;
 80087f2:	e008      	b.n	8008806 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
    break;
 80087f8:	e005      	b.n	8008806 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80087fa:	2302      	movs	r3, #2
 80087fc:	73fb      	strb	r3, [r7, #15]
    break;
 80087fe:	e002      	b.n	8008806 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008800:	2302      	movs	r3, #2
 8008802:	73fb      	strb	r3, [r7, #15]
    break;
 8008804:	bf00      	nop
  }
  return usb_status;
 8008806:	7bfb      	ldrb	r3, [r7, #15]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d102      	bne.n	800882e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008828:	2300      	movs	r3, #0
 800882a:	73fb      	strb	r3, [r7, #15]
 800882c:	e001      	b.n	8008832 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800882e:	2301      	movs	r3, #1
 8008830:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	461a      	mov	r2, r3
 8008836:	2101      	movs	r1, #1
 8008838:	4803      	ldr	r0, [pc, #12]	@ (8008848 <MX_DriverVbusFS+0x34>)
 800883a:	f7f8 fe45 	bl	80014c8 <HAL_GPIO_WritePin>
}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	40020800 	.word	0x40020800

0800884c <malloc>:
 800884c:	4b02      	ldr	r3, [pc, #8]	@ (8008858 <malloc+0xc>)
 800884e:	4601      	mov	r1, r0
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	f000 b82d 	b.w	80088b0 <_malloc_r>
 8008856:	bf00      	nop
 8008858:	2000002c 	.word	0x2000002c

0800885c <free>:
 800885c:	4b02      	ldr	r3, [pc, #8]	@ (8008868 <free+0xc>)
 800885e:	4601      	mov	r1, r0
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	f000 b8f5 	b.w	8008a50 <_free_r>
 8008866:	bf00      	nop
 8008868:	2000002c 	.word	0x2000002c

0800886c <sbrk_aligned>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	4e0f      	ldr	r6, [pc, #60]	@ (80088ac <sbrk_aligned+0x40>)
 8008870:	460c      	mov	r4, r1
 8008872:	6831      	ldr	r1, [r6, #0]
 8008874:	4605      	mov	r5, r0
 8008876:	b911      	cbnz	r1, 800887e <sbrk_aligned+0x12>
 8008878:	f000 f8ae 	bl	80089d8 <_sbrk_r>
 800887c:	6030      	str	r0, [r6, #0]
 800887e:	4621      	mov	r1, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f000 f8a9 	bl	80089d8 <_sbrk_r>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d103      	bne.n	8008892 <sbrk_aligned+0x26>
 800888a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800888e:	4620      	mov	r0, r4
 8008890:	bd70      	pop	{r4, r5, r6, pc}
 8008892:	1cc4      	adds	r4, r0, #3
 8008894:	f024 0403 	bic.w	r4, r4, #3
 8008898:	42a0      	cmp	r0, r4
 800889a:	d0f8      	beq.n	800888e <sbrk_aligned+0x22>
 800889c:	1a21      	subs	r1, r4, r0
 800889e:	4628      	mov	r0, r5
 80088a0:	f000 f89a 	bl	80089d8 <_sbrk_r>
 80088a4:	3001      	adds	r0, #1
 80088a6:	d1f2      	bne.n	800888e <sbrk_aligned+0x22>
 80088a8:	e7ef      	b.n	800888a <sbrk_aligned+0x1e>
 80088aa:	bf00      	nop
 80088ac:	20000998 	.word	0x20000998

080088b0 <_malloc_r>:
 80088b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b4:	1ccd      	adds	r5, r1, #3
 80088b6:	f025 0503 	bic.w	r5, r5, #3
 80088ba:	3508      	adds	r5, #8
 80088bc:	2d0c      	cmp	r5, #12
 80088be:	bf38      	it	cc
 80088c0:	250c      	movcc	r5, #12
 80088c2:	2d00      	cmp	r5, #0
 80088c4:	4606      	mov	r6, r0
 80088c6:	db01      	blt.n	80088cc <_malloc_r+0x1c>
 80088c8:	42a9      	cmp	r1, r5
 80088ca:	d904      	bls.n	80088d6 <_malloc_r+0x26>
 80088cc:	230c      	movs	r3, #12
 80088ce:	6033      	str	r3, [r6, #0]
 80088d0:	2000      	movs	r0, #0
 80088d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089ac <_malloc_r+0xfc>
 80088da:	f000 f869 	bl	80089b0 <__malloc_lock>
 80088de:	f8d8 3000 	ldr.w	r3, [r8]
 80088e2:	461c      	mov	r4, r3
 80088e4:	bb44      	cbnz	r4, 8008938 <_malloc_r+0x88>
 80088e6:	4629      	mov	r1, r5
 80088e8:	4630      	mov	r0, r6
 80088ea:	f7ff ffbf 	bl	800886c <sbrk_aligned>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	4604      	mov	r4, r0
 80088f2:	d158      	bne.n	80089a6 <_malloc_r+0xf6>
 80088f4:	f8d8 4000 	ldr.w	r4, [r8]
 80088f8:	4627      	mov	r7, r4
 80088fa:	2f00      	cmp	r7, #0
 80088fc:	d143      	bne.n	8008986 <_malloc_r+0xd6>
 80088fe:	2c00      	cmp	r4, #0
 8008900:	d04b      	beq.n	800899a <_malloc_r+0xea>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	4639      	mov	r1, r7
 8008906:	4630      	mov	r0, r6
 8008908:	eb04 0903 	add.w	r9, r4, r3
 800890c:	f000 f864 	bl	80089d8 <_sbrk_r>
 8008910:	4581      	cmp	r9, r0
 8008912:	d142      	bne.n	800899a <_malloc_r+0xea>
 8008914:	6821      	ldr	r1, [r4, #0]
 8008916:	1a6d      	subs	r5, r5, r1
 8008918:	4629      	mov	r1, r5
 800891a:	4630      	mov	r0, r6
 800891c:	f7ff ffa6 	bl	800886c <sbrk_aligned>
 8008920:	3001      	adds	r0, #1
 8008922:	d03a      	beq.n	800899a <_malloc_r+0xea>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	442b      	add	r3, r5
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	f8d8 3000 	ldr.w	r3, [r8]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	bb62      	cbnz	r2, 800898c <_malloc_r+0xdc>
 8008932:	f8c8 7000 	str.w	r7, [r8]
 8008936:	e00f      	b.n	8008958 <_malloc_r+0xa8>
 8008938:	6822      	ldr	r2, [r4, #0]
 800893a:	1b52      	subs	r2, r2, r5
 800893c:	d420      	bmi.n	8008980 <_malloc_r+0xd0>
 800893e:	2a0b      	cmp	r2, #11
 8008940:	d917      	bls.n	8008972 <_malloc_r+0xc2>
 8008942:	1961      	adds	r1, r4, r5
 8008944:	42a3      	cmp	r3, r4
 8008946:	6025      	str	r5, [r4, #0]
 8008948:	bf18      	it	ne
 800894a:	6059      	strne	r1, [r3, #4]
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	bf08      	it	eq
 8008950:	f8c8 1000 	streq.w	r1, [r8]
 8008954:	5162      	str	r2, [r4, r5]
 8008956:	604b      	str	r3, [r1, #4]
 8008958:	4630      	mov	r0, r6
 800895a:	f000 f82f 	bl	80089bc <__malloc_unlock>
 800895e:	f104 000b 	add.w	r0, r4, #11
 8008962:	1d23      	adds	r3, r4, #4
 8008964:	f020 0007 	bic.w	r0, r0, #7
 8008968:	1ac2      	subs	r2, r0, r3
 800896a:	bf1c      	itt	ne
 800896c:	1a1b      	subne	r3, r3, r0
 800896e:	50a3      	strne	r3, [r4, r2]
 8008970:	e7af      	b.n	80088d2 <_malloc_r+0x22>
 8008972:	6862      	ldr	r2, [r4, #4]
 8008974:	42a3      	cmp	r3, r4
 8008976:	bf0c      	ite	eq
 8008978:	f8c8 2000 	streq.w	r2, [r8]
 800897c:	605a      	strne	r2, [r3, #4]
 800897e:	e7eb      	b.n	8008958 <_malloc_r+0xa8>
 8008980:	4623      	mov	r3, r4
 8008982:	6864      	ldr	r4, [r4, #4]
 8008984:	e7ae      	b.n	80088e4 <_malloc_r+0x34>
 8008986:	463c      	mov	r4, r7
 8008988:	687f      	ldr	r7, [r7, #4]
 800898a:	e7b6      	b.n	80088fa <_malloc_r+0x4a>
 800898c:	461a      	mov	r2, r3
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	42a3      	cmp	r3, r4
 8008992:	d1fb      	bne.n	800898c <_malloc_r+0xdc>
 8008994:	2300      	movs	r3, #0
 8008996:	6053      	str	r3, [r2, #4]
 8008998:	e7de      	b.n	8008958 <_malloc_r+0xa8>
 800899a:	230c      	movs	r3, #12
 800899c:	6033      	str	r3, [r6, #0]
 800899e:	4630      	mov	r0, r6
 80089a0:	f000 f80c 	bl	80089bc <__malloc_unlock>
 80089a4:	e794      	b.n	80088d0 <_malloc_r+0x20>
 80089a6:	6005      	str	r5, [r0, #0]
 80089a8:	e7d6      	b.n	8008958 <_malloc_r+0xa8>
 80089aa:	bf00      	nop
 80089ac:	2000099c 	.word	0x2000099c

080089b0 <__malloc_lock>:
 80089b0:	4801      	ldr	r0, [pc, #4]	@ (80089b8 <__malloc_lock+0x8>)
 80089b2:	f000 b84b 	b.w	8008a4c <__retarget_lock_acquire_recursive>
 80089b6:	bf00      	nop
 80089b8:	20000adc 	.word	0x20000adc

080089bc <__malloc_unlock>:
 80089bc:	4801      	ldr	r0, [pc, #4]	@ (80089c4 <__malloc_unlock+0x8>)
 80089be:	f000 b846 	b.w	8008a4e <__retarget_lock_release_recursive>
 80089c2:	bf00      	nop
 80089c4:	20000adc 	.word	0x20000adc

080089c8 <memset>:
 80089c8:	4402      	add	r2, r0
 80089ca:	4603      	mov	r3, r0
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d100      	bne.n	80089d2 <memset+0xa>
 80089d0:	4770      	bx	lr
 80089d2:	f803 1b01 	strb.w	r1, [r3], #1
 80089d6:	e7f9      	b.n	80089cc <memset+0x4>

080089d8 <_sbrk_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d06      	ldr	r5, [pc, #24]	@ (80089f4 <_sbrk_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7f8 f9d2 	bl	8000d8c <_sbrk>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_sbrk_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_sbrk_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	20000ad8 	.word	0x20000ad8

080089f8 <__errno>:
 80089f8:	4b01      	ldr	r3, [pc, #4]	@ (8008a00 <__errno+0x8>)
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	2000002c 	.word	0x2000002c

08008a04 <__libc_init_array>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	4d0d      	ldr	r5, [pc, #52]	@ (8008a3c <__libc_init_array+0x38>)
 8008a08:	4c0d      	ldr	r4, [pc, #52]	@ (8008a40 <__libc_init_array+0x3c>)
 8008a0a:	1b64      	subs	r4, r4, r5
 8008a0c:	10a4      	asrs	r4, r4, #2
 8008a0e:	2600      	movs	r6, #0
 8008a10:	42a6      	cmp	r6, r4
 8008a12:	d109      	bne.n	8008a28 <__libc_init_array+0x24>
 8008a14:	4d0b      	ldr	r5, [pc, #44]	@ (8008a44 <__libc_init_array+0x40>)
 8008a16:	4c0c      	ldr	r4, [pc, #48]	@ (8008a48 <__libc_init_array+0x44>)
 8008a18:	f000 f864 	bl	8008ae4 <_init>
 8008a1c:	1b64      	subs	r4, r4, r5
 8008a1e:	10a4      	asrs	r4, r4, #2
 8008a20:	2600      	movs	r6, #0
 8008a22:	42a6      	cmp	r6, r4
 8008a24:	d105      	bne.n	8008a32 <__libc_init_array+0x2e>
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2c:	4798      	blx	r3
 8008a2e:	3601      	adds	r6, #1
 8008a30:	e7ee      	b.n	8008a10 <__libc_init_array+0xc>
 8008a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a36:	4798      	blx	r3
 8008a38:	3601      	adds	r6, #1
 8008a3a:	e7f2      	b.n	8008a22 <__libc_init_array+0x1e>
 8008a3c:	08008b20 	.word	0x08008b20
 8008a40:	08008b20 	.word	0x08008b20
 8008a44:	08008b20 	.word	0x08008b20
 8008a48:	08008b24 	.word	0x08008b24

08008a4c <__retarget_lock_acquire_recursive>:
 8008a4c:	4770      	bx	lr

08008a4e <__retarget_lock_release_recursive>:
 8008a4e:	4770      	bx	lr

08008a50 <_free_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4605      	mov	r5, r0
 8008a54:	2900      	cmp	r1, #0
 8008a56:	d041      	beq.n	8008adc <_free_r+0x8c>
 8008a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a5c:	1f0c      	subs	r4, r1, #4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	bfb8      	it	lt
 8008a62:	18e4      	addlt	r4, r4, r3
 8008a64:	f7ff ffa4 	bl	80089b0 <__malloc_lock>
 8008a68:	4a1d      	ldr	r2, [pc, #116]	@ (8008ae0 <_free_r+0x90>)
 8008a6a:	6813      	ldr	r3, [r2, #0]
 8008a6c:	b933      	cbnz	r3, 8008a7c <_free_r+0x2c>
 8008a6e:	6063      	str	r3, [r4, #4]
 8008a70:	6014      	str	r4, [r2, #0]
 8008a72:	4628      	mov	r0, r5
 8008a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a78:	f7ff bfa0 	b.w	80089bc <__malloc_unlock>
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d908      	bls.n	8008a92 <_free_r+0x42>
 8008a80:	6820      	ldr	r0, [r4, #0]
 8008a82:	1821      	adds	r1, r4, r0
 8008a84:	428b      	cmp	r3, r1
 8008a86:	bf01      	itttt	eq
 8008a88:	6819      	ldreq	r1, [r3, #0]
 8008a8a:	685b      	ldreq	r3, [r3, #4]
 8008a8c:	1809      	addeq	r1, r1, r0
 8008a8e:	6021      	streq	r1, [r4, #0]
 8008a90:	e7ed      	b.n	8008a6e <_free_r+0x1e>
 8008a92:	461a      	mov	r2, r3
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	b10b      	cbz	r3, 8008a9c <_free_r+0x4c>
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d9fa      	bls.n	8008a92 <_free_r+0x42>
 8008a9c:	6811      	ldr	r1, [r2, #0]
 8008a9e:	1850      	adds	r0, r2, r1
 8008aa0:	42a0      	cmp	r0, r4
 8008aa2:	d10b      	bne.n	8008abc <_free_r+0x6c>
 8008aa4:	6820      	ldr	r0, [r4, #0]
 8008aa6:	4401      	add	r1, r0
 8008aa8:	1850      	adds	r0, r2, r1
 8008aaa:	4283      	cmp	r3, r0
 8008aac:	6011      	str	r1, [r2, #0]
 8008aae:	d1e0      	bne.n	8008a72 <_free_r+0x22>
 8008ab0:	6818      	ldr	r0, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	6053      	str	r3, [r2, #4]
 8008ab6:	4408      	add	r0, r1
 8008ab8:	6010      	str	r0, [r2, #0]
 8008aba:	e7da      	b.n	8008a72 <_free_r+0x22>
 8008abc:	d902      	bls.n	8008ac4 <_free_r+0x74>
 8008abe:	230c      	movs	r3, #12
 8008ac0:	602b      	str	r3, [r5, #0]
 8008ac2:	e7d6      	b.n	8008a72 <_free_r+0x22>
 8008ac4:	6820      	ldr	r0, [r4, #0]
 8008ac6:	1821      	adds	r1, r4, r0
 8008ac8:	428b      	cmp	r3, r1
 8008aca:	bf04      	itt	eq
 8008acc:	6819      	ldreq	r1, [r3, #0]
 8008ace:	685b      	ldreq	r3, [r3, #4]
 8008ad0:	6063      	str	r3, [r4, #4]
 8008ad2:	bf04      	itt	eq
 8008ad4:	1809      	addeq	r1, r1, r0
 8008ad6:	6021      	streq	r1, [r4, #0]
 8008ad8:	6054      	str	r4, [r2, #4]
 8008ada:	e7ca      	b.n	8008a72 <_free_r+0x22>
 8008adc:	bd38      	pop	{r3, r4, r5, pc}
 8008ade:	bf00      	nop
 8008ae0:	2000099c 	.word	0x2000099c

08008ae4 <_init>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	bf00      	nop
 8008ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aea:	bc08      	pop	{r3}
 8008aec:	469e      	mov	lr, r3
 8008aee:	4770      	bx	lr

08008af0 <_fini>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	bf00      	nop
 8008af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af6:	bc08      	pop	{r3}
 8008af8:	469e      	mov	lr, r3
 8008afa:	4770      	bx	lr
